
dweis003_prodr010_lab10_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000003c6  0000045a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800104  00800104  0000045e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007eb  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002ca  00000000  00000000  00000d93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005d9  00000000  00000000  0000105d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00001638  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a4  00000000  00000000  00001820  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000794  00000000  00000000  00001bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00002358  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ec       	ldi	r30, 0xC6	; 198
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 31       	cpi	r26, 0x15	; 21
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ed d0       	rcall	.+474    	; 0x29e <main>
  c4:	7e c1       	rjmp	.+764    	; 0x3c2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
		if(c==0){return b;}
		a = b;
		b = c;
	}
	return 0;
}
  c8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
  cc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
  d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
  d8:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <_avr_timer_cntcurr>
  dc:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <_avr_timer_cntcurr+0x1>
  e0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_avr_timer_cntcurr+0x2>
  e4:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_avr_timer_cntcurr+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 112:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 116:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 11a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_avr_timer_cntcurr>
 11e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_avr_timer_cntcurr+0x1>
 122:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <_avr_timer_cntcurr+0x2>
 126:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <_avr_timer_cntcurr+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_avr_timer_cntcurr>
 148:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_avr_timer_cntcurr+0x1>
 14c:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <_avr_timer_cntcurr+0x2>
 150:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <_avr_timer_cntcurr+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_avr_timer_cntcurr>
 15e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_avr_timer_cntcurr+0x1>
 162:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <_avr_timer_cntcurr+0x2>
 166:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <_avr_timer_cntcurr+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <TimerFlag>
 178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 17c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 180:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 184:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 188:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_avr_timer_cntcurr>
 18c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_avr_timer_cntcurr+0x1>
 190:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <_avr_timer_cntcurr+0x2>
 194:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <_avr_timer_cntcurr+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <initUSART>:
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	81 f0       	breq	.+32     	; 0x1ce <initUSART+0x24>
 1ae:	e1 ec       	ldi	r30, 0xC1	; 193
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	88 61       	ori	r24, 0x18	; 24
 1b6:	80 83       	st	Z, r24
 1b8:	e2 ec       	ldi	r30, 0xC2	; 194
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	86 60       	ori	r24, 0x06	; 6
 1c0:	80 83       	st	Z, r24
 1c2:	83 e3       	ldi	r24, 0x33	; 51
 1c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1c8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1cc:	08 95       	ret
 1ce:	e9 ec       	ldi	r30, 0xC9	; 201
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	88 61       	ori	r24, 0x18	; 24
 1d6:	80 83       	st	Z, r24
 1d8:	ea ec       	ldi	r30, 0xCA	; 202
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	86 60       	ori	r24, 0x06	; 6
 1e0:	80 83       	st	Z, r24
 1e2:	83 e3       	ldi	r24, 0x33	; 51
 1e4:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 1e8:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 1ec:	08 95       	ret

000001ee <USART_Flush>:
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	29 f4       	brne	.+10     	; 0x1fc <USART_Flush+0xe>
 1f2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 1f6:	88 23       	and	r24, r24
 1f8:	74 f0       	brlt	.+28     	; 0x216 <USART_Flush+0x28>
 1fa:	08 95       	ret
 1fc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 200:	88 23       	and	r24, r24
 202:	8c f4       	brge	.+34     	; 0x226 <USART_Flush+0x38>
 204:	a6 ec       	ldi	r26, 0xC6	; 198
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	e0 ec       	ldi	r30, 0xC0	; 192
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	8c 91       	ld	r24, X
 20e:	80 81       	ld	r24, Z
 210:	88 23       	and	r24, r24
 212:	e4 f3       	brlt	.-8      	; 0x20c <USART_Flush+0x1e>
 214:	08 95       	ret
 216:	ae ec       	ldi	r26, 0xCE	; 206
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	e8 ec       	ldi	r30, 0xC8	; 200
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	8c 91       	ld	r24, X
 220:	80 81       	ld	r24, Z
 222:	88 23       	and	r24, r24
 224:	e4 f3       	brlt	.-8      	; 0x21e <USART_Flush+0x30>
 226:	08 95       	ret

00000228 <USART_Receive>:
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	41 f0       	breq	.+16     	; 0x23c <USART_Receive+0x14>
 22c:	e0 ec       	ldi	r30, 0xC0	; 192
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	88 23       	and	r24, r24
 234:	ec f7       	brge	.-6      	; 0x230 <USART_Receive+0x8>
 236:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 23a:	08 95       	ret
 23c:	e8 ec       	ldi	r30, 0xC8	; 200
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	88 23       	and	r24, r24
 244:	ec f7       	brge	.-6      	; 0x240 <USART_Receive+0x18>
 246:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 24a:	08 95       	ret

0000024c <SMTick1>:
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	89 2b       	or	r24, r25
 252:	61 f4       	brne	.+24     	; 0x26c <SMTick1+0x20>
 254:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 258:	08 2e       	mov	r0, r24
 25a:	00 0c       	add	r0, r0
 25c:	99 0b       	sbc	r25, r25
 25e:	c9 2f       	mov	r28, r25
 260:	cc 1f       	adc	r28, r28
 262:	cc 27       	eor	r28, r28
 264:	cc 1f       	adc	r28, r28
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	d8 2f       	mov	r29, r24
 26a:	02 c0       	rjmp	.+4      	; 0x270 <SMTick1+0x24>
 26c:	c0 e0       	ldi	r28, 0x00	; 0
 26e:	d0 e0       	ldi	r29, 0x00	; 0
 270:	20 97       	sbiw	r28, 0x00	; 0
 272:	21 f0       	breq	.+8      	; 0x27c <SMTick1+0x30>
 274:	c1 30       	cpi	r28, 0x01	; 1
 276:	d1 05       	cpc	r29, r1
 278:	29 f0       	breq	.+10     	; 0x284 <SMTick1+0x38>
 27a:	0d c0       	rjmp	.+26     	; 0x296 <SMTick1+0x4a>
 27c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <received_val>
 280:	85 b9       	out	0x05, r24	; 5
 282:	09 c0       	rjmp	.+18     	; 0x296 <SMTick1+0x4a>
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	d0 df       	rcall	.-96     	; 0x228 <USART_Receive>
 288:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <received_val>
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	af df       	rcall	.-162    	; 0x1ee <USART_Flush>
 290:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <received_val>
 294:	85 b9       	out	0x05, r24	; 5
 296:	ce 01       	movw	r24, r28
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <main>:
// --------END User defined FSMs-----------------------------------------------
// Implement scheduler code from PES.
int main()
{

	DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
 29e:	8f ef       	ldi	r24, 0xFF	; 255
 2a0:	84 b9       	out	0x04, r24	; 4
 2a2:	15 b8       	out	0x05, r1	; 5
 2a4:	00 e0       	ldi	r16, 0x00	; 0
 2a6:	10 e0       	ldi	r17, 0x00	; 0
 2a8:	d0 e0       	ldi	r29, 0x00	; 0
 2aa:	c0 e0       	ldi	r28, 0x00	; 0
 2ac:	54 e1       	ldi	r21, 0x14	; 20
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	20 e0       	ldi	r18, 0x00	; 0
 2b4:	04 c0       	rjmp	.+8      	; 0x2be <main+0x20>
	unsigned long int c;
	while(1){
		c = a%b;
		if(c==0){return b;}
		a = b;
		b = c;
 2b6:	06 2f       	mov	r16, r22
 2b8:	17 2f       	mov	r17, r23
 2ba:	d8 2f       	mov	r29, r24
 2bc:	c9 2f       	mov	r28, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 2be:	65 2f       	mov	r22, r21
 2c0:	74 2f       	mov	r23, r20
 2c2:	83 2f       	mov	r24, r19
 2c4:	92 2f       	mov	r25, r18
 2c6:	20 2f       	mov	r18, r16
 2c8:	31 2f       	mov	r19, r17
 2ca:	4d 2f       	mov	r20, r29
 2cc:	5c 2f       	mov	r21, r28
 2ce:	57 d0       	rcall	.+174    	; 0x37e <__udivmodsi4>
 2d0:	50 2f       	mov	r21, r16
 2d2:	41 2f       	mov	r20, r17
 2d4:	3d 2f       	mov	r19, r29
 2d6:	2c 2f       	mov	r18, r28
		if(c==0){return b;}
 2d8:	61 15       	cp	r22, r1
 2da:	71 05       	cpc	r23, r1
 2dc:	81 05       	cpc	r24, r1
 2de:	91 05       	cpc	r25, r1
 2e0:	51 f7       	brne	.-44     	; 0x2b6 <main+0x18>
	unsigned long int tmpGCD = 1;
	tmpGCD = findGCD(SMTick1_calc, 0); //can only calculate 2 at a time. If more than 2 FSM run more that once
	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;
	//Recalculate GCD periods for scheduler
	unsigned long int SMTick1_period = SMTick1_calc/GCD;
 2e2:	64 e1       	ldi	r22, 0x14	; 20
 2e4:	70 e0       	ldi	r23, 0x00	; 0
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	20 2f       	mov	r18, r16
 2ec:	31 2f       	mov	r19, r17
 2ee:	4d 2f       	mov	r20, r29
 2f0:	5c 2f       	mov	r21, r28
 2f2:	45 d0       	rcall	.+138    	; 0x37e <__udivmodsi4>

	static task task1;
	task *tasks[] = { &task1};
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	// Task 1
	task1.state = -1;//Task initial state.
 2f4:	e4 e0       	ldi	r30, 0x04	; 4
 2f6:	f1 e0       	ldi	r31, 0x01	; 1
 2f8:	8f ef       	ldi	r24, 0xFF	; 255
 2fa:	80 83       	st	Z, r24
	task1.period = SMTick1_period;//Task Period.
 2fc:	21 83       	std	Z+1, r18	; 0x01
 2fe:	32 83       	std	Z+2, r19	; 0x02
 300:	43 83       	std	Z+3, r20	; 0x03
 302:	54 83       	std	Z+4, r21	; 0x04
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 304:	25 83       	std	Z+5, r18	; 0x05
 306:	36 83       	std	Z+6, r19	; 0x06
 308:	47 83       	std	Z+7, r20	; 0x07
 30a:	50 87       	std	Z+8, r21	; 0x08
	task1.TickFct = &SMTick1;//Function pointer for the tick.
 30c:	86 e2       	ldi	r24, 0x26	; 38
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	92 87       	std	Z+10, r25	; 0x0a
 312:	81 87       	std	Z+9, r24	; 0x09
	// Set the timer and turn it on
	TimerSet(GCD);
 314:	60 2f       	mov	r22, r16
 316:	71 2f       	mov	r23, r17
 318:	8d 2f       	mov	r24, r29
	TimerOn();
 31a:	9c 2f       	mov	r25, r28
 31c:	d5 de       	rcall	.-598    	; 0xc8 <TimerSet>
	//code to initialize USART



	unsigned short i; // Scheduler for-loop iterator
	initUSART(1);     //init USART
 31e:	e5 de       	rcall	.-566    	; 0xea <TimerOn>
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	43 df       	rcall	.-378    	; 0x1aa <initUSART>
	while(1) {
		// Scheduler code ---------------------------------------------
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 324:	c4 e0       	ldi	r28, 0x04	; 4
 326:	d1 e0       	ldi	r29, 0x01	; 1
 328:	4d 81       	ldd	r20, Y+5	; 0x05
 32a:	5e 81       	ldd	r21, Y+6	; 0x06
 32c:	6f 81       	ldd	r22, Y+7	; 0x07
 32e:	78 85       	ldd	r23, Y+8	; 0x08
 330:	89 81       	ldd	r24, Y+1	; 0x01
 332:	9a 81       	ldd	r25, Y+2	; 0x02
 334:	ab 81       	ldd	r26, Y+3	; 0x03
 336:	bc 81       	ldd	r27, Y+4	; 0x04
 338:	48 17       	cp	r20, r24
 33a:	59 07       	cpc	r21, r25
 33c:	6a 07       	cpc	r22, r26
 33e:	7b 07       	cpc	r23, r27
 340:	61 f4       	brne	.+24     	; 0x35a <main+0xbc>
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 342:	88 81       	ld	r24, Y
 344:	e9 85       	ldd	r30, Y+9	; 0x09
 346:	fa 85       	ldd	r31, Y+10	; 0x0a
 348:	08 2e       	mov	r0, r24
 34a:	00 0c       	add	r0, r0
 34c:	99 0b       	sbc	r25, r25
 34e:	09 95       	icall
 350:	88 83       	st	Y, r24
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 352:	1d 82       	std	Y+5, r1	; 0x05
 354:	1e 82       	std	Y+6, r1	; 0x06
 356:	1f 82       	std	Y+7, r1	; 0x07
 358:	18 86       	std	Y+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
 35a:	8d 81       	ldd	r24, Y+5	; 0x05
 35c:	9e 81       	ldd	r25, Y+6	; 0x06
 35e:	af 81       	ldd	r26, Y+7	; 0x07
 360:	b8 85       	ldd	r27, Y+8	; 0x08
 362:	01 96       	adiw	r24, 0x01	; 1
 364:	a1 1d       	adc	r26, r1
 366:	b1 1d       	adc	r27, r1
 368:	8d 83       	std	Y+5, r24	; 0x05
 36a:	9e 83       	std	Y+6, r25	; 0x06
 36c:	af 83       	std	Y+7, r26	; 0x07
 36e:	b8 87       	std	Y+8, r27	; 0x08
		}
		while(!TimerFlag);
 370:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <TimerFlag>
 374:	88 23       	and	r24, r24
 376:	e1 f3       	breq	.-8      	; 0x370 <main+0xd2>
		TimerFlag = 0;
 378:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <TimerFlag>
	} //---------------------------------------------------------------
 37c:	d5 cf       	rjmp	.-86     	; 0x328 <main+0x8a>

0000037e <__udivmodsi4>:
 37e:	a1 e2       	ldi	r26, 0x21	; 33
 380:	1a 2e       	mov	r1, r26
 382:	aa 1b       	sub	r26, r26
 384:	bb 1b       	sub	r27, r27
 386:	fd 01       	movw	r30, r26
 388:	0d c0       	rjmp	.+26     	; 0x3a4 <__udivmodsi4_ep>

0000038a <__udivmodsi4_loop>:
 38a:	aa 1f       	adc	r26, r26
 38c:	bb 1f       	adc	r27, r27
 38e:	ee 1f       	adc	r30, r30
 390:	ff 1f       	adc	r31, r31
 392:	a2 17       	cp	r26, r18
 394:	b3 07       	cpc	r27, r19
 396:	e4 07       	cpc	r30, r20
 398:	f5 07       	cpc	r31, r21
 39a:	20 f0       	brcs	.+8      	; 0x3a4 <__udivmodsi4_ep>
 39c:	a2 1b       	sub	r26, r18
 39e:	b3 0b       	sbc	r27, r19
 3a0:	e4 0b       	sbc	r30, r20
 3a2:	f5 0b       	sbc	r31, r21

000003a4 <__udivmodsi4_ep>:
 3a4:	66 1f       	adc	r22, r22
 3a6:	77 1f       	adc	r23, r23
 3a8:	88 1f       	adc	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	1a 94       	dec	r1
 3ae:	69 f7       	brne	.-38     	; 0x38a <__udivmodsi4_loop>
 3b0:	60 95       	com	r22
 3b2:	70 95       	com	r23
 3b4:	80 95       	com	r24
 3b6:	90 95       	com	r25
 3b8:	9b 01       	movw	r18, r22
 3ba:	ac 01       	movw	r20, r24
 3bc:	bd 01       	movw	r22, r26
 3be:	cf 01       	movw	r24, r30
 3c0:	08 95       	ret

000003c2 <_exit>:
 3c2:	f8 94       	cli

000003c4 <__stop_program>:
 3c4:	ff cf       	rjmp	.-2      	; 0x3c4 <__stop_program>
