
CHIP_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800100  000019b0  00001a44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000661  008001b6  008001b6  00001afa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001afa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003289  00000000  00000000  00001e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001084  00000000  00000000  0000511d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001fef  00000000  00000000  000061a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000086c  00000000  00000000  00008190  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001371  00000000  00000000  000089fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001920  00000000  00000000  00009d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000320  00000000  00000000  0000b68d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	53 c0       	rjmp	.+166    	; 0xa8 <__ctors_end>
       2:	00 00       	nop
       4:	6f c0       	rjmp	.+222    	; 0xe4 <__bad_interrupt>
       6:	00 00       	nop
       8:	6d c0       	rjmp	.+218    	; 0xe4 <__bad_interrupt>
       a:	00 00       	nop
       c:	6b c0       	rjmp	.+214    	; 0xe4 <__bad_interrupt>
       e:	00 00       	nop
      10:	69 c0       	rjmp	.+210    	; 0xe4 <__bad_interrupt>
      12:	00 00       	nop
      14:	67 c0       	rjmp	.+206    	; 0xe4 <__bad_interrupt>
      16:	00 00       	nop
      18:	65 c0       	rjmp	.+202    	; 0xe4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	63 c0       	rjmp	.+198    	; 0xe4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	61 c0       	rjmp	.+194    	; 0xe4 <__bad_interrupt>
      22:	00 00       	nop
      24:	5f c0       	rjmp	.+190    	; 0xe4 <__bad_interrupt>
      26:	00 00       	nop
      28:	5d c0       	rjmp	.+186    	; 0xe4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5b c0       	rjmp	.+182    	; 0xe4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	59 c0       	rjmp	.+178    	; 0xe4 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__vector_13>
      38:	55 c0       	rjmp	.+170    	; 0xe4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	53 c0       	rjmp	.+166    	; 0xe4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	51 c0       	rjmp	.+162    	; 0xe4 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c0       	rjmp	.+158    	; 0xe4 <__bad_interrupt>
      46:	00 00       	nop
      48:	4d c0       	rjmp	.+154    	; 0xe4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4b c0       	rjmp	.+150    	; 0xe4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	49 c0       	rjmp	.+146    	; 0xe4 <__bad_interrupt>
      52:	00 00       	nop
      54:	47 c0       	rjmp	.+142    	; 0xe4 <__bad_interrupt>
      56:	00 00       	nop
      58:	45 c0       	rjmp	.+138    	; 0xe4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	43 c0       	rjmp	.+134    	; 0xe4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	41 c0       	rjmp	.+130    	; 0xe4 <__bad_interrupt>
      62:	00 00       	nop
      64:	3f c0       	rjmp	.+126    	; 0xe4 <__bad_interrupt>
      66:	00 00       	nop
      68:	3d c0       	rjmp	.+122    	; 0xe4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3b c0       	rjmp	.+118    	; 0xe4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	39 c0       	rjmp	.+114    	; 0xe4 <__bad_interrupt>
      72:	00 00       	nop
      74:	37 c0       	rjmp	.+110    	; 0xe4 <__bad_interrupt>
      76:	00 00       	nop
      78:	35 c0       	rjmp	.+106    	; 0xe4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	33 c0       	rjmp	.+102    	; 0xe4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	31 c0       	rjmp	.+98     	; 0xe4 <__bad_interrupt>
      82:	00 00       	nop
      84:	2f c0       	rjmp	.+94     	; 0xe4 <__bad_interrupt>
      86:	00 00       	nop
      88:	2d c0       	rjmp	.+90     	; 0xe4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	11 05       	cpc	r17, r1
      8e:	1a 05       	cpc	r17, r10
      90:	4b 05       	cpc	r20, r11
      92:	52 05       	cpc	r21, r2
      94:	5c 05       	cpc	r21, r12
      96:	6a 05       	cpc	r22, r10
      98:	7a 05       	cpc	r23, r10
      9a:	93 05       	cpc	r25, r3
      9c:	a9 05       	cpc	r26, r9
      9e:	d7 05       	cpc	r29, r7
      a0:	ec 05       	cpc	r30, r12
      a2:	ff 05       	cpc	r31, r15
      a4:	18 06       	cpc	r1, r24
      a6:	4d 06       	cpc	r4, r29

000000a8 <__ctors_end>:
      a8:	11 24       	eor	r1, r1
      aa:	1f be       	out	0x3f, r1	; 63
      ac:	cf ef       	ldi	r28, 0xFF	; 255
      ae:	d0 e4       	ldi	r29, 0x40	; 64
      b0:	de bf       	out	0x3e, r29	; 62
      b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
      b4:	11 e0       	ldi	r17, 0x01	; 1
      b6:	a0 e0       	ldi	r26, 0x00	; 0
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	e0 eb       	ldi	r30, 0xB0	; 176
      bc:	f9 e1       	ldi	r31, 0x19	; 25
      be:	00 e0       	ldi	r16, 0x00	; 0
      c0:	0b bf       	out	0x3b, r16	; 59
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x14>
      c4:	07 90       	elpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	a6 3b       	cpi	r26, 0xB6	; 182
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0x10>

000000ce <__do_clear_bss>:
      ce:	28 e0       	ldi	r18, 0x08	; 8
      d0:	a6 eb       	ldi	r26, 0xB6	; 182
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	a7 31       	cpi	r26, 0x17	; 23
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	84 d6       	rcall	.+3336   	; 0xde8 <main>
      e0:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <_exit>

000000e4 <__bad_interrupt>:
      e4:	8d cf       	rjmp	.-230    	; 0x0 <__vectors>

000000e6 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      e6:	cf 93       	push	r28
      e8:	df 93       	push	r29
      ea:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      ec:	0e 94 cf 09 	call	0x139e	; 0x139e <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      f0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <__data_end>
      f4:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <__data_end+0x1>
      f8:	c9 01       	movw	r24, r18
      fa:	8c 0f       	add	r24, r28
      fc:	9d 1f       	adc	r25, r29
      fe:	8c 3d       	cpi	r24, 0xDC	; 220
     100:	45 e0       	ldi	r20, 0x05	; 5
     102:	94 07       	cpc	r25, r20
     104:	58 f4       	brcc	.+22     	; 0x11c <pvPortMalloc+0x36>
     106:	28 17       	cp	r18, r24
     108:	39 07       	cpc	r19, r25
     10a:	58 f4       	brcc	.+22     	; 0x122 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     10c:	e9 01       	movw	r28, r18
     10e:	c8 54       	subi	r28, 0x48	; 72
     110:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
     112:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <__data_end+0x1>
     116:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <__data_end>
     11a:	05 c0       	rjmp	.+10     	; 0x126 <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     11c:	c0 e0       	ldi	r28, 0x00	; 0
     11e:	d0 e0       	ldi	r29, 0x00	; 0
     120:	02 c0       	rjmp	.+4      	; 0x126 <pvPortMalloc+0x40>
     122:	c0 e0       	ldi	r28, 0x00	; 0
     124:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     126:	0e 94 99 0a 	call	0x1532	; 0x1532 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     12a:	ce 01       	movw	r24, r28
     12c:	df 91       	pop	r29
     12e:	cf 91       	pop	r28
     130:	08 95       	ret

00000132 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     132:	08 95       	ret

00000134 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     134:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     136:	03 96       	adiw	r24, 0x03	; 3
     138:	92 83       	std	Z+2, r25	; 0x02
     13a:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     13c:	2f ef       	ldi	r18, 0xFF	; 255
     13e:	3f ef       	ldi	r19, 0xFF	; 255
     140:	34 83       	std	Z+4, r19	; 0x04
     142:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     144:	96 83       	std	Z+6, r25	; 0x06
     146:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     148:	90 87       	std	Z+8, r25	; 0x08
     14a:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     14c:	10 82       	st	Z, r1
     14e:	08 95       	ret

00000150 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     150:	fc 01       	movw	r30, r24
     152:	11 86       	std	Z+9, r1	; 0x09
     154:	10 86       	std	Z+8, r1	; 0x08
     156:	08 95       	ret

00000158 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	fc 01       	movw	r30, r24
     15e:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     160:	21 81       	ldd	r18, Z+1	; 0x01
     162:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     164:	e9 01       	movw	r28, r18
     166:	8a 81       	ldd	r24, Y+2	; 0x02
     168:	9b 81       	ldd	r25, Y+3	; 0x03
     16a:	13 96       	adiw	r26, 0x03	; 3
     16c:	9c 93       	st	X, r25
     16e:	8e 93       	st	-X, r24
     170:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     172:	81 81       	ldd	r24, Z+1	; 0x01
     174:	92 81       	ldd	r25, Z+2	; 0x02
     176:	15 96       	adiw	r26, 0x05	; 5
     178:	9c 93       	st	X, r25
     17a:	8e 93       	st	-X, r24
     17c:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     17e:	8a 81       	ldd	r24, Y+2	; 0x02
     180:	9b 81       	ldd	r25, Y+3	; 0x03
     182:	ec 01       	movw	r28, r24
     184:	7d 83       	std	Y+5, r23	; 0x05
     186:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     188:	e9 01       	movw	r28, r18
     18a:	7b 83       	std	Y+3, r23	; 0x03
     18c:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     18e:	72 83       	std	Z+2, r23	; 0x02
     190:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     192:	19 96       	adiw	r26, 0x09	; 9
     194:	fc 93       	st	X, r31
     196:	ee 93       	st	-X, r30
     198:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     19a:	80 81       	ld	r24, Z
     19c:	8f 5f       	subi	r24, 0xFF	; 255
     19e:	80 83       	st	Z, r24
}
     1a0:	df 91       	pop	r29
     1a2:	cf 91       	pop	r28
     1a4:	08 95       	ret

000001a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     1a6:	cf 93       	push	r28
     1a8:	df 93       	push	r29
     1aa:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     1ac:	48 81       	ld	r20, Y
     1ae:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     1b0:	4f 3f       	cpi	r20, 0xFF	; 255
     1b2:	2f ef       	ldi	r18, 0xFF	; 255
     1b4:	52 07       	cpc	r21, r18
     1b6:	31 f4       	brne	.+12     	; 0x1c4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     1b8:	dc 01       	movw	r26, r24
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	17 c0       	rjmp	.+46     	; 0x1f2 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     1c4:	fc 01       	movw	r30, r24
     1c6:	33 96       	adiw	r30, 0x03	; 3
     1c8:	dc 01       	movw	r26, r24
     1ca:	15 96       	adiw	r26, 0x05	; 5
     1cc:	2d 91       	ld	r18, X+
     1ce:	3c 91       	ld	r19, X
     1d0:	16 97       	sbiw	r26, 0x06	; 6
     1d2:	d9 01       	movw	r26, r18
     1d4:	2d 91       	ld	r18, X+
     1d6:	3c 91       	ld	r19, X
     1d8:	42 17       	cp	r20, r18
     1da:	53 07       	cpc	r21, r19
     1dc:	50 f0       	brcs	.+20     	; 0x1f2 <vListInsert+0x4c>
     1de:	02 80       	ldd	r0, Z+2	; 0x02
     1e0:	f3 81       	ldd	r31, Z+3	; 0x03
     1e2:	e0 2d       	mov	r30, r0
     1e4:	a2 81       	ldd	r26, Z+2	; 0x02
     1e6:	b3 81       	ldd	r27, Z+3	; 0x03
     1e8:	2d 91       	ld	r18, X+
     1ea:	3c 91       	ld	r19, X
     1ec:	42 17       	cp	r20, r18
     1ee:	53 07       	cpc	r21, r19
     1f0:	b0 f7       	brcc	.-20     	; 0x1de <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     1f2:	a2 81       	ldd	r26, Z+2	; 0x02
     1f4:	b3 81       	ldd	r27, Z+3	; 0x03
     1f6:	bb 83       	std	Y+3, r27	; 0x03
     1f8:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     1fa:	15 96       	adiw	r26, 0x05	; 5
     1fc:	dc 93       	st	X, r29
     1fe:	ce 93       	st	-X, r28
     200:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     202:	fd 83       	std	Y+5, r31	; 0x05
     204:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     206:	d3 83       	std	Z+3, r29	; 0x03
     208:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     20a:	99 87       	std	Y+9, r25	; 0x09
     20c:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     20e:	fc 01       	movw	r30, r24
     210:	20 81       	ld	r18, Z
     212:	2f 5f       	subi	r18, 0xFF	; 255
     214:	20 83       	st	Z, r18
}
     216:	df 91       	pop	r29
     218:	cf 91       	pop	r28
     21a:	08 95       	ret

0000021c <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     21c:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     21e:	a2 81       	ldd	r26, Z+2	; 0x02
     220:	b3 81       	ldd	r27, Z+3	; 0x03
     222:	84 81       	ldd	r24, Z+4	; 0x04
     224:	95 81       	ldd	r25, Z+5	; 0x05
     226:	15 96       	adiw	r26, 0x05	; 5
     228:	9c 93       	st	X, r25
     22a:	8e 93       	st	-X, r24
     22c:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     22e:	a4 81       	ldd	r26, Z+4	; 0x04
     230:	b5 81       	ldd	r27, Z+5	; 0x05
     232:	82 81       	ldd	r24, Z+2	; 0x02
     234:	93 81       	ldd	r25, Z+3	; 0x03
     236:	13 96       	adiw	r26, 0x03	; 3
     238:	9c 93       	st	X, r25
     23a:	8e 93       	st	-X, r24
     23c:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     23e:	a0 85       	ldd	r26, Z+8	; 0x08
     240:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     242:	11 96       	adiw	r26, 0x01	; 1
     244:	8d 91       	ld	r24, X+
     246:	9c 91       	ld	r25, X
     248:	12 97       	sbiw	r26, 0x02	; 2
     24a:	e8 17       	cp	r30, r24
     24c:	f9 07       	cpc	r31, r25
     24e:	31 f4       	brne	.+12     	; 0x25c <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     250:	84 81       	ldd	r24, Z+4	; 0x04
     252:	95 81       	ldd	r25, Z+5	; 0x05
     254:	12 96       	adiw	r26, 0x02	; 2
     256:	9c 93       	st	X, r25
     258:	8e 93       	st	-X, r24
     25a:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     25c:	11 86       	std	Z+9, r1	; 0x09
     25e:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     260:	8c 91       	ld	r24, X
     262:	81 50       	subi	r24, 0x01	; 1
     264:	8c 93       	st	X, r24
     266:	08 95       	ret

00000268 <initUSART>:
//RECEIVE FSM

enum RECState {Rec_Wait, Receive_State } rec_state;

void REC_Init(){
	rec_state = Rec_Wait;
     268:	81 30       	cpi	r24, 0x01	; 1
     26a:	81 f0       	breq	.+32     	; 0x28c <initUSART+0x24>
     26c:	e1 ec       	ldi	r30, 0xC1	; 193
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	80 81       	ld	r24, Z
     272:	88 61       	ori	r24, 0x18	; 24
     274:	80 83       	st	Z, r24
     276:	e2 ec       	ldi	r30, 0xC2	; 194
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	80 81       	ld	r24, Z
     27c:	86 60       	ori	r24, 0x06	; 6
     27e:	80 83       	st	Z, r24
     280:	83 e3       	ldi	r24, 0x33	; 51
     282:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     286:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     28a:	08 95       	ret
     28c:	e9 ec       	ldi	r30, 0xC9	; 201
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	80 81       	ld	r24, Z
     292:	88 61       	ori	r24, 0x18	; 24
     294:	80 83       	st	Z, r24
     296:	ea ec       	ldi	r30, 0xCA	; 202
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	80 81       	ld	r24, Z
     29c:	86 60       	ori	r24, 0x06	; 6
     29e:	80 83       	st	Z, r24
     2a0:	83 e3       	ldi	r24, 0x33	; 51
     2a2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     2a6:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     2aa:	08 95       	ret

000002ac <USART_Flush>:
     2ac:	81 30       	cpi	r24, 0x01	; 1
     2ae:	29 f4       	brne	.+10     	; 0x2ba <USART_Flush+0xe>
     2b0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     2b4:	88 23       	and	r24, r24
     2b6:	74 f0       	brlt	.+28     	; 0x2d4 <USART_Flush+0x28>
     2b8:	08 95       	ret
     2ba:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     2be:	88 23       	and	r24, r24
     2c0:	8c f4       	brge	.+34     	; 0x2e4 <USART_Flush+0x38>
     2c2:	a6 ec       	ldi	r26, 0xC6	; 198
     2c4:	b0 e0       	ldi	r27, 0x00	; 0
     2c6:	e0 ec       	ldi	r30, 0xC0	; 192
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	8c 91       	ld	r24, X
     2cc:	80 81       	ld	r24, Z
     2ce:	88 23       	and	r24, r24
     2d0:	e4 f3       	brlt	.-8      	; 0x2ca <USART_Flush+0x1e>
     2d2:	08 95       	ret
     2d4:	ae ec       	ldi	r26, 0xCE	; 206
     2d6:	b0 e0       	ldi	r27, 0x00	; 0
     2d8:	e8 ec       	ldi	r30, 0xC8	; 200
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	8c 91       	ld	r24, X
     2de:	80 81       	ld	r24, Z
     2e0:	88 23       	and	r24, r24
     2e2:	e4 f3       	brlt	.-8      	; 0x2dc <USART_Flush+0x30>
     2e4:	08 95       	ret

000002e6 <USART_Receive>:
     2e6:	81 30       	cpi	r24, 0x01	; 1
     2e8:	41 f0       	breq	.+16     	; 0x2fa <USART_Receive+0x14>
     2ea:	e0 ec       	ldi	r30, 0xC0	; 192
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	80 81       	ld	r24, Z
     2f0:	88 23       	and	r24, r24
     2f2:	ec f7       	brge	.-6      	; 0x2ee <USART_Receive+0x8>
     2f4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     2f8:	08 95       	ret
     2fa:	e8 ec       	ldi	r30, 0xC8	; 200
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	80 81       	ld	r24, Z
     300:	88 23       	and	r24, r24
     302:	ec f7       	brge	.-6      	; 0x2fe <USART_Receive+0x18>
     304:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     308:	08 95       	ret

0000030a <generate_random_num>:
     30a:	0e 94 55 0c 	call	0x18aa	; 0x18aa <rand>
     30e:	6a e0       	ldi	r22, 0x0A	; 10
     310:	70 e0       	ldi	r23, 0x00	; 0
     312:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <__divmodhi4>
     316:	08 95       	ret

00000318 <Motor_Tick>:
     318:	80 91 13 08 	lds	r24, 0x0813	; 0x800813 <motor_state>
     31c:	81 30       	cpi	r24, 0x01	; 1
     31e:	19 f0       	breq	.+6      	; 0x326 <Motor_Tick+0xe>
     320:	82 30       	cpi	r24, 0x02	; 2
     322:	99 f0       	breq	.+38     	; 0x34a <Motor_Tick+0x32>
     324:	24 c0       	rjmp	.+72     	; 0x36e <Motor_Tick+0x56>
     326:	e0 91 aa 07 	lds	r30, 0x07AA	; 0x8007aa <p_index>
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	e7 5f       	subi	r30, 0xF7	; 247
     32e:	fe 4f       	sbci	r31, 0xFE	; 254
     330:	80 81       	ld	r24, Z
     332:	85 b9       	out	0x05, r24	; 5
     334:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <p_index>
     338:	83 30       	cpi	r24, 0x03	; 3
     33a:	19 f4       	brne	.+6      	; 0x342 <Motor_Tick+0x2a>
     33c:	10 92 aa 07 	sts	0x07AA, r1	; 0x8007aa <p_index>
     340:	16 c0       	rjmp	.+44     	; 0x36e <Motor_Tick+0x56>
     342:	8f 5f       	subi	r24, 0xFF	; 255
     344:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <p_index>
     348:	12 c0       	rjmp	.+36     	; 0x36e <Motor_Tick+0x56>
     34a:	e0 91 aa 07 	lds	r30, 0x07AA	; 0x8007aa <p_index>
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	e7 5f       	subi	r30, 0xF7	; 247
     352:	fe 4f       	sbci	r31, 0xFE	; 254
     354:	80 81       	ld	r24, Z
     356:	85 b9       	out	0x05, r24	; 5
     358:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <p_index>
     35c:	81 11       	cpse	r24, r1
     35e:	04 c0       	rjmp	.+8      	; 0x368 <Motor_Tick+0x50>
     360:	83 e0       	ldi	r24, 0x03	; 3
     362:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <p_index>
     366:	03 c0       	rjmp	.+6      	; 0x36e <Motor_Tick+0x56>
     368:	81 50       	subi	r24, 0x01	; 1
     36a:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <p_index>
     36e:	80 91 13 08 	lds	r24, 0x0813	; 0x800813 <motor_state>
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	99 f0       	breq	.+38     	; 0x39c <Motor_Tick+0x84>
     376:	18 f0       	brcs	.+6      	; 0x37e <Motor_Tick+0x66>
     378:	82 30       	cpi	r24, 0x02	; 2
     37a:	79 f1       	breq	.+94     	; 0x3da <Motor_Tick+0xc2>
     37c:	4a c0       	rjmp	.+148    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     37e:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <STEPPER_GO>
     382:	88 23       	and	r24, r24
     384:	09 f4       	brne	.+2      	; 0x388 <Motor_Tick+0x70>
     386:	47 c0       	rjmp	.+142    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <motor_state>
     38e:	10 92 aa 07 	sts	0x07AA, r1	; 0x8007aa <p_index>
     392:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <numCounter+0x1>
     396:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <numCounter>
     39a:	08 95       	ret
     39c:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <numCounter>
     3a0:	90 91 a9 07 	lds	r25, 0x07A9	; 0x8007a9 <numCounter+0x1>
     3a4:	01 96       	adiw	r24, 0x01	; 1
     3a6:	90 93 a9 07 	sts	0x07A9, r25	; 0x8007a9 <numCounter+0x1>
     3aa:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <numCounter>
     3ae:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <numPhases>
     3b2:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <numPhases+0x1>
     3b6:	82 17       	cp	r24, r18
     3b8:	93 07       	cpc	r25, r19
     3ba:	24 f4       	brge	.+8      	; 0x3c4 <Motor_Tick+0xac>
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <motor_state>
     3c2:	08 95       	ret
     3c4:	82 e0       	ldi	r24, 0x02	; 2
     3c6:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <motor_state>
     3ca:	83 e0       	ldi	r24, 0x03	; 3
     3cc:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <p_index>
     3d0:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <numCounter+0x1>
     3d4:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <numCounter>
     3d8:	08 95       	ret
     3da:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <numCounter>
     3de:	90 91 a9 07 	lds	r25, 0x07A9	; 0x8007a9 <numCounter+0x1>
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	90 93 a9 07 	sts	0x07A9, r25	; 0x8007a9 <numCounter+0x1>
     3e8:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <numCounter>
     3ec:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <numPhases>
     3f0:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <numPhases+0x1>
     3f4:	82 17       	cp	r24, r18
     3f6:	93 07       	cpc	r25, r19
     3f8:	24 f4       	brge	.+8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3fa:	82 e0       	ldi	r24, 0x02	; 2
     3fc:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <motor_state>
     400:	08 95       	ret
     402:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <motor_state>
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <STEPPER_DONE>
     40c:	10 92 a5 07 	sts	0x07A5, r1	; 0x8007a5 <STEPPER_GO>
     410:	08 95       	ret
     412:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <motor_state>
     416:	08 95       	ret

00000418 <MotorSecTask>:
     418:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <motor_state>
     41c:	7d df       	rcall	.-262    	; 0x318 <Motor_Tick>
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 1d 0b 	call	0x163a	; 0x163a <vTaskDelay>
     426:	fa cf       	rjmp	.-12     	; 0x41c <MotorSecTask+0x4>

00000428 <MotorSecPulse>:
     428:	af 92       	push	r10
     42a:	bf 92       	push	r11
     42c:	cf 92       	push	r12
     42e:	df 92       	push	r13
     430:	ef 92       	push	r14
     432:	ff 92       	push	r15
     434:	0f 93       	push	r16
     436:	a1 2c       	mov	r10, r1
     438:	b1 2c       	mov	r11, r1
     43a:	c1 2c       	mov	r12, r1
     43c:	d1 2c       	mov	r13, r1
     43e:	e1 2c       	mov	r14, r1
     440:	f1 2c       	mov	r15, r1
     442:	08 2f       	mov	r16, r24
     444:	20 e0       	ldi	r18, 0x00	; 0
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	45 e5       	ldi	r20, 0x55	; 85
     44a:	50 e0       	ldi	r21, 0x00	; 0
     44c:	60 e1       	ldi	r22, 0x10	; 16
     44e:	71 e0       	ldi	r23, 0x01	; 1
     450:	8c e0       	ldi	r24, 0x0C	; 12
     452:	92 e0       	ldi	r25, 0x02	; 2
     454:	7a d6       	rcall	.+3316   	; 0x114a <xTaskGenericCreate>
     456:	0f 91       	pop	r16
     458:	ff 90       	pop	r15
     45a:	ef 90       	pop	r14
     45c:	df 90       	pop	r13
     45e:	cf 90       	pop	r12
     460:	bf 90       	pop	r11
     462:	af 90       	pop	r10
     464:	08 95       	ret

00000466 <stepper_controller_Tick>:
     466:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <stepper_controller_state>
     46a:	81 30       	cpi	r24, 0x01	; 1
     46c:	61 f0       	breq	.+24     	; 0x486 <stepper_controller_Tick+0x20>
     46e:	18 f0       	brcs	.+6      	; 0x476 <stepper_controller_Tick+0x10>
     470:	82 30       	cpi	r24, 0x02	; 2
     472:	11 f1       	breq	.+68     	; 0x4b8 <stepper_controller_Tick+0x52>
     474:	35 c0       	rjmp	.+106    	; 0x4e0 <stepper_controller_Tick+0x7a>
     476:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <systems_go>
     47a:	88 23       	and	r24, r24
     47c:	99 f1       	breq	.+102    	; 0x4e4 <stepper_controller_Tick+0x7e>
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <stepper_controller_state>
     484:	08 95       	ret
     486:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <systems_go>
     48a:	81 11       	cpse	r24, r1
     48c:	03 c0       	rjmp	.+6      	; 0x494 <stepper_controller_Tick+0x2e>
     48e:	10 92 14 08 	sts	0x0814, r1	; 0x800814 <stepper_controller_state>
     492:	08 95       	ret
     494:	3a df       	rcall	.-396    	; 0x30a <generate_random_num>
     496:	90 93 a7 07 	sts	0x07A7, r25	; 0x8007a7 <temp_random+0x1>
     49a:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <temp_random>
     49e:	02 97       	sbiw	r24, 0x02	; 2
     4a0:	3c f0       	brlt	.+14     	; 0x4b0 <stepper_controller_Tick+0x4a>
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <STEPPER_GO>
     4a8:	82 e0       	ldi	r24, 0x02	; 2
     4aa:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <stepper_controller_state>
     4ae:	08 95       	ret
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <stepper_controller_state>
     4b6:	08 95       	ret
     4b8:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <STEPPER_DONE>
     4bc:	81 30       	cpi	r24, 0x01	; 1
     4be:	91 f4       	brne	.+36     	; 0x4e4 <stepper_controller_Tick+0x7e>
     4c0:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <systems_go>
     4c4:	81 30       	cpi	r24, 0x01	; 1
     4c6:	29 f4       	brne	.+10     	; 0x4d2 <stepper_controller_Tick+0x6c>
     4c8:	10 92 a4 07 	sts	0x07A4, r1	; 0x8007a4 <STEPPER_DONE>
     4cc:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <stepper_controller_state>
     4d0:	08 95       	ret
     4d2:	81 11       	cpse	r24, r1
     4d4:	07 c0       	rjmp	.+14     	; 0x4e4 <stepper_controller_Tick+0x7e>
     4d6:	10 92 a4 07 	sts	0x07A4, r1	; 0x8007a4 <STEPPER_DONE>
     4da:	10 92 14 08 	sts	0x0814, r1	; 0x800814 <stepper_controller_state>
     4de:	08 95       	ret
     4e0:	10 92 14 08 	sts	0x0814, r1	; 0x800814 <stepper_controller_state>
     4e4:	08 95       	ret

000004e6 <stepper_controllerSecTask>:
     4e6:	10 92 14 08 	sts	0x0814, r1	; 0x800814 <stepper_controller_state>
     4ea:	bd df       	rcall	.-134    	; 0x466 <stepper_controller_Tick>
     4ec:	84 ef       	ldi	r24, 0xF4	; 244
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	0e 94 1d 0b 	call	0x163a	; 0x163a <vTaskDelay>
     4f4:	fa cf       	rjmp	.-12     	; 0x4ea <stepper_controllerSecTask+0x4>

000004f6 <Start_stepper_controller_Pulse>:
     4f6:	af 92       	push	r10
     4f8:	bf 92       	push	r11
     4fa:	cf 92       	push	r12
     4fc:	df 92       	push	r13
     4fe:	ef 92       	push	r14
     500:	ff 92       	push	r15
     502:	0f 93       	push	r16
     504:	a1 2c       	mov	r10, r1
     506:	b1 2c       	mov	r11, r1
     508:	c1 2c       	mov	r12, r1
     50a:	d1 2c       	mov	r13, r1
     50c:	e1 2c       	mov	r14, r1
     50e:	f1 2c       	mov	r15, r1
     510:	08 2f       	mov	r16, r24
     512:	20 e0       	ldi	r18, 0x00	; 0
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	45 e5       	ldi	r20, 0x55	; 85
     518:	50 e0       	ldi	r21, 0x00	; 0
     51a:	6d e1       	ldi	r22, 0x1D	; 29
     51c:	71 e0       	ldi	r23, 0x01	; 1
     51e:	83 e7       	ldi	r24, 0x73	; 115
     520:	92 e0       	ldi	r25, 0x02	; 2
     522:	13 d6       	rcall	.+3110   	; 0x114a <xTaskGenericCreate>
     524:	0f 91       	pop	r16
     526:	ff 90       	pop	r15
     528:	ef 90       	pop	r14
     52a:	df 90       	pop	r13
     52c:	cf 90       	pop	r12
     52e:	bf 90       	pop	r11
     530:	af 90       	pop	r10
     532:	08 95       	ret

00000534 <SERVO_DRIVE_Tick>:
     534:	80 91 0e 08 	lds	r24, 0x080E	; 0x80080e <servo_driver_state>
     538:	81 11       	cpse	r24, r1
     53a:	28 c0       	rjmp	.+80     	; 0x58c <SERVO_DRIVE_Tick+0x58>
     53c:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <servo_direction>
     540:	90 91 9f 07 	lds	r25, 0x079F	; 0x80079f <servo_direction+0x1>
     544:	81 30       	cpi	r24, 0x01	; 1
     546:	91 05       	cpc	r25, r1
     548:	51 f4       	brne	.+20     	; 0x55e <SERVO_DRIVE_Tick+0x2a>
     54a:	10 92 a3 07 	sts	0x07A3, r1	; 0x8007a3 <right>
     54e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <center>
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <left>
     558:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <max_servo>
     55c:	19 c0       	rjmp	.+50     	; 0x590 <SERVO_DRIVE_Tick+0x5c>
     55e:	02 97       	sbiw	r24, 0x02	; 2
     560:	59 f4       	brne	.+22     	; 0x578 <SERVO_DRIVE_Tick+0x44>
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	80 93 a3 07 	sts	0x07A3, r24	; 0x8007a3 <right>
     568:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <center>
     56c:	10 92 a2 07 	sts	0x07A2, r1	; 0x8007a2 <left>
     570:	82 e0       	ldi	r24, 0x02	; 2
     572:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <max_servo>
     576:	0c c0       	rjmp	.+24     	; 0x590 <SERVO_DRIVE_Tick+0x5c>
     578:	10 92 a3 07 	sts	0x07A3, r1	; 0x8007a3 <right>
     57c:	10 92 a2 07 	sts	0x07A2, r1	; 0x8007a2 <left>
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <center>
     586:	10 92 a1 07 	sts	0x07A1, r1	; 0x8007a1 <max_servo>
     58a:	02 c0       	rjmp	.+4      	; 0x590 <SERVO_DRIVE_Tick+0x5c>
     58c:	81 11       	cpse	r24, r1
     58e:	03 c0       	rjmp	.+6      	; 0x596 <SERVO_DRIVE_Tick+0x62>
     590:	10 92 0e 08 	sts	0x080E, r1	; 0x80080e <servo_driver_state>
     594:	08 95       	ret
     596:	10 92 0e 08 	sts	0x080E, r1	; 0x80080e <servo_driver_state>
     59a:	08 95       	ret

0000059c <SERVODRIVESecTask>:
     59c:	10 92 0e 08 	sts	0x080E, r1	; 0x80080e <servo_driver_state>
     5a0:	c9 df       	rcall	.-110    	; 0x534 <SERVO_DRIVE_Tick>
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 1d 0b 	call	0x163a	; 0x163a <vTaskDelay>
     5aa:	fa cf       	rjmp	.-12     	; 0x5a0 <SERVODRIVESecTask+0x4>

000005ac <SERVODRIVESecPulse>:
     5ac:	af 92       	push	r10
     5ae:	bf 92       	push	r11
     5b0:	cf 92       	push	r12
     5b2:	df 92       	push	r13
     5b4:	ef 92       	push	r14
     5b6:	ff 92       	push	r15
     5b8:	0f 93       	push	r16
     5ba:	a1 2c       	mov	r10, r1
     5bc:	b1 2c       	mov	r11, r1
     5be:	c1 2c       	mov	r12, r1
     5c0:	d1 2c       	mov	r13, r1
     5c2:	e1 2c       	mov	r14, r1
     5c4:	f1 2c       	mov	r15, r1
     5c6:	08 2f       	mov	r16, r24
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	45 e5       	ldi	r20, 0x55	; 85
     5ce:	50 e0       	ldi	r21, 0x00	; 0
     5d0:	67 e3       	ldi	r22, 0x37	; 55
     5d2:	71 e0       	ldi	r23, 0x01	; 1
     5d4:	8e ec       	ldi	r24, 0xCE	; 206
     5d6:	92 e0       	ldi	r25, 0x02	; 2
     5d8:	b8 d5       	rcall	.+2928   	; 0x114a <xTaskGenericCreate>
     5da:	0f 91       	pop	r16
     5dc:	ff 90       	pop	r15
     5de:	ef 90       	pop	r14
     5e0:	df 90       	pop	r13
     5e2:	cf 90       	pop	r12
     5e4:	bf 90       	pop	r11
     5e6:	af 90       	pop	r10
     5e8:	08 95       	ret

000005ea <SERVO_Tick>:
     5ea:	80 91 11 08 	lds	r24, 0x0811	; 0x800811 <servo_state>
     5ee:	88 23       	and	r24, r24
     5f0:	19 f0       	breq	.+6      	; 0x5f8 <SERVO_Tick+0xe>
     5f2:	81 30       	cpi	r24, 0x01	; 1
     5f4:	c1 f0       	breq	.+48     	; 0x626 <SERVO_Tick+0x3c>
     5f6:	36 c0       	rjmp	.+108    	; 0x664 <SERVO_Tick+0x7a>
     5f8:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <left>
     5fc:	81 11       	cpse	r24, r1
     5fe:	04 c0       	rjmp	.+8      	; 0x608 <SERVO_Tick+0x1e>
     600:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <right>
     604:	88 23       	and	r24, r24
     606:	59 f0       	breq	.+22     	; 0x61e <SERVO_Tick+0x34>
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	80 93 11 08 	sts	0x0811, r24	; 0x800811 <servo_state>
     60e:	10 92 a0 07 	sts	0x07A0, r1	; 0x8007a0 <servo_counter>
     612:	40 9a       	sbi	0x08, 0	; 8
     614:	80 91 11 08 	lds	r24, 0x0811	; 0x800811 <servo_state>
     618:	81 30       	cpi	r24, 0x01	; 1
     61a:	39 f1       	breq	.+78     	; 0x66a <SERVO_Tick+0x80>
     61c:	08 95       	ret
     61e:	40 98       	cbi	0x08, 0	; 8
     620:	10 92 11 08 	sts	0x0811, r1	; 0x800811 <servo_state>
     624:	08 95       	ret
     626:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <servo_counter>
     62a:	90 91 a1 07 	lds	r25, 0x07A1	; 0x8007a1 <max_servo>
     62e:	89 17       	cp	r24, r25
     630:	78 f4       	brcc	.+30     	; 0x650 <SERVO_Tick+0x66>
     632:	90 91 a2 07 	lds	r25, 0x07A2	; 0x8007a2 <left>
     636:	91 11       	cpse	r25, r1
     638:	04 c0       	rjmp	.+8      	; 0x642 <SERVO_Tick+0x58>
     63a:	90 91 a3 07 	lds	r25, 0x07A3	; 0x8007a3 <right>
     63e:	99 23       	and	r25, r25
     640:	39 f0       	breq	.+14     	; 0x650 <SERVO_Tick+0x66>
     642:	8f 5f       	subi	r24, 0xFF	; 255
     644:	80 93 a0 07 	sts	0x07A0, r24	; 0x8007a0 <servo_counter>
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	80 93 11 08 	sts	0x0811, r24	; 0x800811 <servo_state>
     64e:	0d c0       	rjmp	.+26     	; 0x66a <SERVO_Tick+0x80>
     650:	10 92 a2 07 	sts	0x07A2, r1	; 0x8007a2 <left>
     654:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <center>
     658:	10 92 a3 07 	sts	0x07A3, r1	; 0x8007a3 <right>
     65c:	40 98       	cbi	0x08, 0	; 8
     65e:	10 92 11 08 	sts	0x0811, r1	; 0x800811 <servo_state>
     662:	08 95       	ret
     664:	10 92 11 08 	sts	0x0811, r1	; 0x800811 <servo_state>
     668:	08 95       	ret
     66a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <center>
     66e:	88 23       	and	r24, r24
     670:	49 f0       	breq	.+18     	; 0x684 <SERVO_Tick+0x9a>
     672:	10 92 a2 07 	sts	0x07A2, r1	; 0x8007a2 <left>
     676:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <center>
     67a:	10 92 a3 07 	sts	0x07A3, r1	; 0x8007a3 <right>
     67e:	40 98       	cbi	0x08, 0	; 8
     680:	10 92 11 08 	sts	0x0811, r1	; 0x800811 <servo_state>
     684:	08 95       	ret

00000686 <SERVOSecTask>:
     686:	10 92 11 08 	sts	0x0811, r1	; 0x800811 <servo_state>
     68a:	af df       	rcall	.-162    	; 0x5ea <SERVO_Tick>
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	d4 d7       	rcall	.+4008   	; 0x163a <vTaskDelay>
     692:	fb cf       	rjmp	.-10     	; 0x68a <SERVOSecTask+0x4>

00000694 <SERVOSecPulse>:
     694:	af 92       	push	r10
     696:	bf 92       	push	r11
     698:	cf 92       	push	r12
     69a:	df 92       	push	r13
     69c:	ef 92       	push	r14
     69e:	ff 92       	push	r15
     6a0:	0f 93       	push	r16
     6a2:	a1 2c       	mov	r10, r1
     6a4:	b1 2c       	mov	r11, r1
     6a6:	c1 2c       	mov	r12, r1
     6a8:	d1 2c       	mov	r13, r1
     6aa:	e1 2c       	mov	r14, r1
     6ac:	f1 2c       	mov	r15, r1
     6ae:	08 2f       	mov	r16, r24
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	45 e5       	ldi	r20, 0x55	; 85
     6b6:	50 e0       	ldi	r21, 0x00	; 0
     6b8:	69 e4       	ldi	r22, 0x49	; 73
     6ba:	71 e0       	ldi	r23, 0x01	; 1
     6bc:	83 e4       	ldi	r24, 0x43	; 67
     6be:	93 e0       	ldi	r25, 0x03	; 3
     6c0:	44 d5       	rcall	.+2696   	; 0x114a <xTaskGenericCreate>
     6c2:	0f 91       	pop	r16
     6c4:	ff 90       	pop	r15
     6c6:	ef 90       	pop	r14
     6c8:	df 90       	pop	r13
     6ca:	cf 90       	pop	r12
     6cc:	bf 90       	pop	r11
     6ce:	af 90       	pop	r10
     6d0:	08 95       	ret

000006d2 <servo_controller_Tick>:
     6d2:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <servo_controller_state>
     6d6:	81 30       	cpi	r24, 0x01	; 1
     6d8:	69 f0       	breq	.+26     	; 0x6f4 <servo_controller_Tick+0x22>
     6da:	18 f0       	brcs	.+6      	; 0x6e2 <servo_controller_Tick+0x10>
     6dc:	82 30       	cpi	r24, 0x02	; 2
     6de:	89 f1       	breq	.+98     	; 0x742 <servo_controller_Tick+0x70>
     6e0:	54 c0       	rjmp	.+168    	; 0x78a <servo_controller_Tick+0xb8>
     6e2:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <systems_go>
     6e6:	88 23       	and	r24, r24
     6e8:	09 f4       	brne	.+2      	; 0x6ec <servo_controller_Tick+0x1a>
     6ea:	51 c0       	rjmp	.+162    	; 0x78e <servo_controller_Tick+0xbc>
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <servo_controller_state>
     6f2:	08 95       	ret
     6f4:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <systems_go>
     6f8:	81 11       	cpse	r24, r1
     6fa:	03 c0       	rjmp	.+6      	; 0x702 <servo_controller_Tick+0x30>
     6fc:	10 92 15 08 	sts	0x0815, r1	; 0x800815 <servo_controller_state>
     700:	08 95       	ret
     702:	03 de       	rcall	.-1018   	; 0x30a <generate_random_num>
     704:	90 93 9d 07 	sts	0x079D, r25	; 0x80079d <temp_random2+0x1>
     708:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <temp_random2>
     70c:	08 97       	sbiw	r24, 0x08	; 8
     70e:	ac f0       	brlt	.+42     	; 0x73a <servo_controller_Tick+0x68>
     710:	82 e0       	ldi	r24, 0x02	; 2
     712:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <servo_controller_state>
     716:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <head_movement>
     71a:	81 30       	cpi	r24, 0x01	; 1
     71c:	39 f4       	brne	.+14     	; 0x72c <servo_controller_Tick+0x5a>
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	90 93 9f 07 	sts	0x079F, r25	; 0x80079f <servo_direction+0x1>
     726:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <servo_direction>
     72a:	08 95       	ret
     72c:	82 e0       	ldi	r24, 0x02	; 2
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	90 93 9f 07 	sts	0x079F, r25	; 0x80079f <servo_direction+0x1>
     734:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <servo_direction>
     738:	08 95       	ret
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <servo_controller_state>
     740:	08 95       	ret
     742:	e3 dd       	rcall	.-1082   	; 0x30a <generate_random_num>
     744:	90 93 9d 07 	sts	0x079D, r25	; 0x80079d <temp_random2+0x1>
     748:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <temp_random2>
     74c:	03 97       	sbiw	r24, 0x03	; 3
     74e:	24 f4       	brge	.+8      	; 0x758 <servo_controller_Tick+0x86>
     750:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <systems_go>
     754:	81 11       	cpse	r24, r1
     756:	15 c0       	rjmp	.+42     	; 0x782 <servo_controller_Tick+0xb0>
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <servo_controller_state>
     75e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <head_movement>
     762:	81 30       	cpi	r24, 0x01	; 1
     764:	39 f4       	brne	.+14     	; 0x774 <servo_controller_Tick+0xa2>
     766:	82 e0       	ldi	r24, 0x02	; 2
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	90 93 9f 07 	sts	0x079F, r25	; 0x80079f <servo_direction+0x1>
     76e:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <servo_direction>
     772:	08 95       	ret
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	90 93 9f 07 	sts	0x079F, r25	; 0x80079f <servo_direction+0x1>
     77c:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <servo_direction>
     780:	08 95       	ret
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <servo_controller_state>
     788:	08 95       	ret
     78a:	10 92 15 08 	sts	0x0815, r1	; 0x800815 <servo_controller_state>
     78e:	08 95       	ret

00000790 <servo_controllerSecTask>:
     790:	10 92 15 08 	sts	0x0815, r1	; 0x800815 <servo_controller_state>
     794:	9e df       	rcall	.-196    	; 0x6d2 <servo_controller_Tick>
     796:	84 ef       	ldi	r24, 0xF4	; 244
     798:	91 e0       	ldi	r25, 0x01	; 1
     79a:	4f d7       	rcall	.+3742   	; 0x163a <vTaskDelay>
     79c:	fb cf       	rjmp	.-10     	; 0x794 <servo_controllerSecTask+0x4>

0000079e <Start_servo_controller_Pulse>:
     79e:	af 92       	push	r10
     7a0:	bf 92       	push	r11
     7a2:	cf 92       	push	r12
     7a4:	df 92       	push	r13
     7a6:	ef 92       	push	r14
     7a8:	ff 92       	push	r15
     7aa:	0f 93       	push	r16
     7ac:	a1 2c       	mov	r10, r1
     7ae:	b1 2c       	mov	r11, r1
     7b0:	c1 2c       	mov	r12, r1
     7b2:	d1 2c       	mov	r13, r1
     7b4:	e1 2c       	mov	r14, r1
     7b6:	f1 2c       	mov	r15, r1
     7b8:	08 2f       	mov	r16, r24
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	45 e5       	ldi	r20, 0x55	; 85
     7c0:	50 e0       	ldi	r21, 0x00	; 0
     7c2:	66 e5       	ldi	r22, 0x56	; 86
     7c4:	71 e0       	ldi	r23, 0x01	; 1
     7c6:	88 ec       	ldi	r24, 0xC8	; 200
     7c8:	93 e0       	ldi	r25, 0x03	; 3
     7ca:	bf d4       	rcall	.+2430   	; 0x114a <xTaskGenericCreate>
     7cc:	0f 91       	pop	r16
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	df 90       	pop	r13
     7d4:	cf 90       	pop	r12
     7d6:	bf 90       	pop	r11
     7d8:	af 90       	pop	r10
     7da:	08 95       	ret

000007dc <Audio_Tick>:
     7dc:	80 91 12 08 	lds	r24, 0x0812	; 0x800812 <audio_state>
     7e0:	88 23       	and	r24, r24
     7e2:	19 f0       	breq	.+6      	; 0x7ea <Audio_Tick+0xe>
     7e4:	81 30       	cpi	r24, 0x01	; 1
     7e6:	29 f0       	breq	.+10     	; 0x7f2 <Audio_Tick+0x16>
     7e8:	0b c0       	rjmp	.+22     	; 0x800 <Audio_Tick+0x24>
     7ea:	88 b1       	in	r24, 0x08	; 8
     7ec:	8c 60       	ori	r24, 0x0C	; 12
     7ee:	88 b9       	out	0x08, r24	; 8
     7f0:	07 c0       	rjmp	.+14     	; 0x800 <Audio_Tick+0x24>
     7f2:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <bark_setting>
     7f6:	81 30       	cpi	r24, 0x01	; 1
     7f8:	11 f4       	brne	.+4      	; 0x7fe <Audio_Tick+0x22>
     7fa:	43 98       	cbi	0x08, 3	; 8
     7fc:	01 c0       	rjmp	.+2      	; 0x800 <Audio_Tick+0x24>
     7fe:	42 98       	cbi	0x08, 2	; 8
     800:	80 91 12 08 	lds	r24, 0x0812	; 0x800812 <audio_state>
     804:	88 23       	and	r24, r24
     806:	19 f0       	breq	.+6      	; 0x80e <Audio_Tick+0x32>
     808:	81 30       	cpi	r24, 0x01	; 1
     80a:	41 f0       	breq	.+16     	; 0x81c <Audio_Tick+0x40>
     80c:	0e c0       	rjmp	.+28     	; 0x82a <Audio_Tick+0x4e>
     80e:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <systems_go>
     812:	81 30       	cpi	r24, 0x01	; 1
     814:	61 f4       	brne	.+24     	; 0x82e <Audio_Tick+0x52>
     816:	80 93 12 08 	sts	0x0812, r24	; 0x800812 <audio_state>
     81a:	08 95       	ret
     81c:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <systems_go>
     820:	81 30       	cpi	r24, 0x01	; 1
     822:	29 f0       	breq	.+10     	; 0x82e <Audio_Tick+0x52>
     824:	10 92 12 08 	sts	0x0812, r1	; 0x800812 <audio_state>
     828:	08 95       	ret
     82a:	10 92 12 08 	sts	0x0812, r1	; 0x800812 <audio_state>
     82e:	08 95       	ret

00000830 <AudioSecTask>:
     830:	10 92 12 08 	sts	0x0812, r1	; 0x800812 <audio_state>
     834:	d3 df       	rcall	.-90     	; 0x7dc <Audio_Tick>
     836:	8a e0       	ldi	r24, 0x0A	; 10
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	ff d6       	rcall	.+3582   	; 0x163a <vTaskDelay>
     83c:	fb cf       	rjmp	.-10     	; 0x834 <AudioSecTask+0x4>

0000083e <StartAudioPulse>:
     83e:	af 92       	push	r10
     840:	bf 92       	push	r11
     842:	cf 92       	push	r12
     844:	df 92       	push	r13
     846:	ef 92       	push	r14
     848:	ff 92       	push	r15
     84a:	0f 93       	push	r16
     84c:	a1 2c       	mov	r10, r1
     84e:	b1 2c       	mov	r11, r1
     850:	c1 2c       	mov	r12, r1
     852:	d1 2c       	mov	r13, r1
     854:	e1 2c       	mov	r14, r1
     856:	f1 2c       	mov	r15, r1
     858:	08 2f       	mov	r16, r24
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	45 e5       	ldi	r20, 0x55	; 85
     860:	50 e0       	ldi	r21, 0x00	; 0
     862:	6e e6       	ldi	r22, 0x6E	; 110
     864:	71 e0       	ldi	r23, 0x01	; 1
     866:	88 e1       	ldi	r24, 0x18	; 24
     868:	94 e0       	ldi	r25, 0x04	; 4
     86a:	6f d4       	rcall	.+2270   	; 0x114a <xTaskGenericCreate>
     86c:	0f 91       	pop	r16
     86e:	ff 90       	pop	r15
     870:	ef 90       	pop	r14
     872:	df 90       	pop	r13
     874:	cf 90       	pop	r12
     876:	bf 90       	pop	r11
     878:	af 90       	pop	r10
     87a:	08 95       	ret

0000087c <Beam_Tick>:
     87c:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <beam_state>
     880:	88 23       	and	r24, r24
     882:	19 f0       	breq	.+6      	; 0x88a <Beam_Tick+0xe>
     884:	81 30       	cpi	r24, 0x01	; 1
     886:	21 f0       	breq	.+8      	; 0x890 <Beam_Tick+0x14>
     888:	0c c0       	rjmp	.+24     	; 0x8a2 <Beam_Tick+0x26>
     88a:	10 92 9b 07 	sts	0x079B, r1	; 0x80079b <beam_detected>
     88e:	0e c0       	rjmp	.+28     	; 0x8ac <Beam_Tick+0x30>
     890:	00 99       	sbic	0x00, 0	; 0
     892:	04 c0       	rjmp	.+8      	; 0x89c <Beam_Tick+0x20>
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	80 93 9b 07 	sts	0x079B, r24	; 0x80079b <beam_detected>
     89a:	12 c0       	rjmp	.+36     	; 0x8c0 <Beam_Tick+0x44>
     89c:	10 92 9b 07 	sts	0x079B, r1	; 0x80079b <beam_detected>
     8a0:	0f c0       	rjmp	.+30     	; 0x8c0 <Beam_Tick+0x44>
     8a2:	88 23       	and	r24, r24
     8a4:	19 f0       	breq	.+6      	; 0x8ac <Beam_Tick+0x30>
     8a6:	81 30       	cpi	r24, 0x01	; 1
     8a8:	a9 f4       	brne	.+42     	; 0x8d4 <Beam_Tick+0x58>
     8aa:	0a c0       	rjmp	.+20     	; 0x8c0 <Beam_Tick+0x44>
     8ac:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <ARM_DISARM>
     8b0:	81 30       	cpi	r24, 0x01	; 1
     8b2:	19 f4       	brne	.+6      	; 0x8ba <Beam_Tick+0x3e>
     8b4:	80 93 16 08 	sts	0x0816, r24	; 0x800816 <beam_state>
     8b8:	08 95       	ret
     8ba:	10 92 16 08 	sts	0x0816, r1	; 0x800816 <beam_state>
     8be:	08 95       	ret
     8c0:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <ARM_DISARM>
     8c4:	81 30       	cpi	r24, 0x01	; 1
     8c6:	19 f4       	brne	.+6      	; 0x8ce <Beam_Tick+0x52>
     8c8:	80 93 16 08 	sts	0x0816, r24	; 0x800816 <beam_state>
     8cc:	08 95       	ret
     8ce:	10 92 16 08 	sts	0x0816, r1	; 0x800816 <beam_state>
     8d2:	08 95       	ret
     8d4:	10 92 16 08 	sts	0x0816, r1	; 0x800816 <beam_state>
     8d8:	08 95       	ret

000008da <BEAMSecTask>:
     8da:	10 92 16 08 	sts	0x0816, r1	; 0x800816 <beam_state>
     8de:	ce df       	rcall	.-100    	; 0x87c <Beam_Tick>
     8e0:	8a e0       	ldi	r24, 0x0A	; 10
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	aa d6       	rcall	.+3412   	; 0x163a <vTaskDelay>
     8e6:	fb cf       	rjmp	.-10     	; 0x8de <BEAMSecTask+0x4>

000008e8 <StartBeamPulse>:
     8e8:	af 92       	push	r10
     8ea:	bf 92       	push	r11
     8ec:	cf 92       	push	r12
     8ee:	df 92       	push	r13
     8f0:	ef 92       	push	r14
     8f2:	ff 92       	push	r15
     8f4:	0f 93       	push	r16
     8f6:	a1 2c       	mov	r10, r1
     8f8:	b1 2c       	mov	r11, r1
     8fa:	c1 2c       	mov	r12, r1
     8fc:	d1 2c       	mov	r13, r1
     8fe:	e1 2c       	mov	r14, r1
     900:	f1 2c       	mov	r15, r1
     902:	08 2f       	mov	r16, r24
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	45 e5       	ldi	r20, 0x55	; 85
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	6b e7       	ldi	r22, 0x7B	; 123
     90e:	71 e0       	ldi	r23, 0x01	; 1
     910:	8d e6       	ldi	r24, 0x6D	; 109
     912:	94 e0       	ldi	r25, 0x04	; 4
     914:	1a d4       	rcall	.+2100   	; 0x114a <xTaskGenericCreate>
     916:	0f 91       	pop	r16
     918:	ff 90       	pop	r15
     91a:	ef 90       	pop	r14
     91c:	df 90       	pop	r13
     91e:	cf 90       	pop	r12
     920:	bf 90       	pop	r11
     922:	af 90       	pop	r10
     924:	08 95       	ret

00000926 <Motion_Tick>:
     926:	80 91 0d 08 	lds	r24, 0x080D	; 0x80080d <motion_state>
     92a:	88 23       	and	r24, r24
     92c:	19 f0       	breq	.+6      	; 0x934 <Motion_Tick+0xe>
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	59 f0       	breq	.+22     	; 0x948 <Motion_Tick+0x22>
     932:	13 c0       	rjmp	.+38     	; 0x95a <Motion_Tick+0x34>
     934:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <motion_boot_cnt>
     938:	90 91 99 07 	lds	r25, 0x0799	; 0x800799 <motion_boot_cnt+0x1>
     93c:	01 96       	adiw	r24, 0x01	; 1
     93e:	90 93 99 07 	sts	0x0799, r25	; 0x800799 <motion_boot_cnt+0x1>
     942:	80 93 98 07 	sts	0x0798, r24	; 0x800798 <motion_boot_cnt>
     946:	0f c0       	rjmp	.+30     	; 0x966 <Motion_Tick+0x40>
     948:	02 9b       	sbis	0x00, 2	; 0
     94a:	04 c0       	rjmp	.+8      	; 0x954 <Motion_Tick+0x2e>
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <motion_detected>
     952:	25 c0       	rjmp	.+74     	; 0x99e <Motion_Tick+0x78>
     954:	10 92 9a 07 	sts	0x079A, r1	; 0x80079a <motion_detected>
     958:	22 c0       	rjmp	.+68     	; 0x99e <Motion_Tick+0x78>
     95a:	81 30       	cpi	r24, 0x01	; 1
     95c:	b1 f0       	breq	.+44     	; 0x98a <Motion_Tick+0x64>
     95e:	18 f0       	brcs	.+6      	; 0x966 <Motion_Tick+0x40>
     960:	82 30       	cpi	r24, 0x02	; 2
     962:	49 f5       	brne	.+82     	; 0x9b6 <Motion_Tick+0x90>
     964:	1c c0       	rjmp	.+56     	; 0x99e <Motion_Tick+0x78>
     966:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <motion_boot_cnt>
     96a:	90 91 99 07 	lds	r25, 0x0799	; 0x800799 <motion_boot_cnt+0x1>
     96e:	80 32       	cpi	r24, 0x20	; 32
     970:	9e 44       	sbci	r25, 0x4E	; 78
     972:	1c f4       	brge	.+6      	; 0x97a <Motion_Tick+0x54>
     974:	10 92 0d 08 	sts	0x080D, r1	; 0x80080d <motion_state>
     978:	08 95       	ret
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	80 93 0d 08 	sts	0x080D, r24	; 0x80080d <motion_state>
     980:	10 92 99 07 	sts	0x0799, r1	; 0x800799 <motion_boot_cnt+0x1>
     984:	10 92 98 07 	sts	0x0798, r1	; 0x800798 <motion_boot_cnt>
     988:	08 95       	ret
     98a:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <ARM_DISARM>
     98e:	81 30       	cpi	r24, 0x01	; 1
     990:	a9 f4       	brne	.+42     	; 0x9bc <Motion_Tick+0x96>
     992:	10 92 9a 07 	sts	0x079A, r1	; 0x80079a <motion_detected>
     996:	82 e0       	ldi	r24, 0x02	; 2
     998:	80 93 0d 08 	sts	0x080D, r24	; 0x80080d <motion_state>
     99c:	08 95       	ret
     99e:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <ARM_DISARM>
     9a2:	81 30       	cpi	r24, 0x01	; 1
     9a4:	21 f4       	brne	.+8      	; 0x9ae <Motion_Tick+0x88>
     9a6:	82 e0       	ldi	r24, 0x02	; 2
     9a8:	80 93 0d 08 	sts	0x080D, r24	; 0x80080d <motion_state>
     9ac:	08 95       	ret
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	80 93 0d 08 	sts	0x080D, r24	; 0x80080d <motion_state>
     9b4:	08 95       	ret
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	80 93 0d 08 	sts	0x080D, r24	; 0x80080d <motion_state>
     9bc:	08 95       	ret

000009be <MotionSecTask>:
     9be:	10 92 0d 08 	sts	0x080D, r1	; 0x80080d <motion_state>
     9c2:	b1 df       	rcall	.-158    	; 0x926 <Motion_Tick>
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	38 d6       	rcall	.+3184   	; 0x163a <vTaskDelay>
     9ca:	fb cf       	rjmp	.-10     	; 0x9c2 <MotionSecTask+0x4>

000009cc <StartMotionPulse>:
     9cc:	af 92       	push	r10
     9ce:	bf 92       	push	r11
     9d0:	cf 92       	push	r12
     9d2:	df 92       	push	r13
     9d4:	ef 92       	push	r14
     9d6:	ff 92       	push	r15
     9d8:	0f 93       	push	r16
     9da:	a1 2c       	mov	r10, r1
     9dc:	b1 2c       	mov	r11, r1
     9de:	c1 2c       	mov	r12, r1
     9e0:	d1 2c       	mov	r13, r1
     9e2:	e1 2c       	mov	r14, r1
     9e4:	f1 2c       	mov	r15, r1
     9e6:	08 2f       	mov	r16, r24
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	45 e5       	ldi	r20, 0x55	; 85
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	67 e8       	ldi	r22, 0x87	; 135
     9f2:	71 e0       	ldi	r23, 0x01	; 1
     9f4:	8f ed       	ldi	r24, 0xDF	; 223
     9f6:	94 e0       	ldi	r25, 0x04	; 4
     9f8:	a8 d3       	rcall	.+1872   	; 0x114a <xTaskGenericCreate>
     9fa:	0f 91       	pop	r16
     9fc:	ff 90       	pop	r15
     9fe:	ef 90       	pop	r14
     a00:	df 90       	pop	r13
     a02:	cf 90       	pop	r12
     a04:	bf 90       	pop	r11
     a06:	af 90       	pop	r10
     a08:	08 95       	ret

00000a0a <Control_Tick>:
     a0a:	e0 91 0f 08 	lds	r30, 0x080F	; 0x80080f <control_state>
     a0e:	8e 2f       	mov	r24, r30
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	87 30       	cpi	r24, 0x07	; 7
     a14:	91 05       	cpc	r25, r1
     a16:	08 f0       	brcs	.+2      	; 0xa1a <Control_Tick+0x10>
     a18:	7a c0       	rjmp	.+244    	; 0xb0e <Control_Tick+0x104>
     a1a:	fc 01       	movw	r30, r24
     a1c:	ea 5b       	subi	r30, 0xBA	; 186
     a1e:	ff 4f       	sbci	r31, 0xFF	; 255
     a20:	e0 c6       	rjmp	.+3520   	; 0x17e2 <__tablejump2__>
     a22:	85 b1       	in	r24, 0x05	; 5
     a24:	8f 70       	andi	r24, 0x0F	; 15
     a26:	85 b9       	out	0x05, r24	; 5
     a28:	85 b1       	in	r24, 0x05	; 5
     a2a:	80 6f       	ori	r24, 0xF0	; 240
     a2c:	85 b9       	out	0x05, r24	; 5
     a2e:	10 92 af 07 	sts	0x07AF, r1	; 0x8007af <systems_go>
     a32:	6d c0       	rjmp	.+218    	; 0xb0e <Control_Tick+0x104>
     a34:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <random_seed_val>
     a38:	90 91 ad 07 	lds	r25, 0x07AD	; 0x8007ad <random_seed_val+0x1>
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	8f 30       	cpi	r24, 0x0F	; 15
     a40:	27 e2       	ldi	r18, 0x27	; 39
     a42:	92 07       	cpc	r25, r18
     a44:	2c f4       	brge	.+10     	; 0xa50 <Control_Tick+0x46>
     a46:	90 93 ad 07 	sts	0x07AD, r25	; 0x8007ad <random_seed_val+0x1>
     a4a:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <random_seed_val>
     a4e:	04 c0       	rjmp	.+8      	; 0xa58 <Control_Tick+0x4e>
     a50:	10 92 ad 07 	sts	0x07AD, r1	; 0x8007ad <random_seed_val+0x1>
     a54:	10 92 ac 07 	sts	0x07AC, r1	; 0x8007ac <random_seed_val>
     a58:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <delay_timing>
     a5c:	81 11       	cpse	r24, r1
     a5e:	07 c0       	rjmp	.+14     	; 0xa6e <Control_Tick+0x64>
     a60:	85 e0       	ldi	r24, 0x05	; 5
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <delay_sec+0x1>
     a68:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <delay_sec>
     a6c:	0f c0       	rjmp	.+30     	; 0xa8c <Control_Tick+0x82>
     a6e:	81 30       	cpi	r24, 0x01	; 1
     a70:	39 f4       	brne	.+14     	; 0xa80 <Control_Tick+0x76>
     a72:	8a e0       	ldi	r24, 0x0A	; 10
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <delay_sec+0x1>
     a7a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <delay_sec>
     a7e:	06 c0       	rjmp	.+12     	; 0xa8c <Control_Tick+0x82>
     a80:	8f e0       	ldi	r24, 0x0F	; 15
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <delay_sec+0x1>
     a88:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <delay_sec>
     a8c:	85 b1       	in	r24, 0x05	; 5
     a8e:	8f 70       	andi	r24, 0x0F	; 15
     a90:	85 b9       	out	0x05, r24	; 5
     a92:	2c 9a       	sbi	0x05, 4	; 5
     a94:	3c c0       	rjmp	.+120    	; 0xb0e <Control_Tick+0x104>
     a96:	85 b1       	in	r24, 0x05	; 5
     a98:	8f 70       	andi	r24, 0x0F	; 15
     a9a:	85 b9       	out	0x05, r24	; 5
     a9c:	85 b1       	in	r24, 0x05	; 5
     a9e:	80 65       	ori	r24, 0x50	; 80
     aa0:	85 b9       	out	0x05, r24	; 5
     aa2:	35 c0       	rjmp	.+106    	; 0xb0e <Control_Tick+0x104>
     aa4:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <vishal_counter>
     aa8:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <vishal_counter+0x1>
     aac:	01 96       	adiw	r24, 0x01	; 1
     aae:	90 93 95 07 	sts	0x0795, r25	; 0x800795 <vishal_counter+0x1>
     ab2:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <vishal_counter>
     ab6:	90 c0       	rjmp	.+288    	; 0xbd8 <Control_Tick+0x1ce>
     ab8:	85 b1       	in	r24, 0x05	; 5
     aba:	8f 70       	andi	r24, 0x0F	; 15
     abc:	85 b9       	out	0x05, r24	; 5
     abe:	2d 9a       	sbi	0x05, 5	; 5
     ac0:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <controll_counter>
     ac4:	90 91 97 07 	lds	r25, 0x0797	; 0x800797 <controll_counter+0x1>
     ac8:	01 96       	adiw	r24, 0x01	; 1
     aca:	90 93 97 07 	sts	0x0797, r25	; 0x800797 <controll_counter+0x1>
     ace:	80 93 96 07 	sts	0x0796, r24	; 0x800796 <controll_counter>
     ad2:	1d c0       	rjmp	.+58     	; 0xb0e <Control_Tick+0x104>
     ad4:	85 b1       	in	r24, 0x05	; 5
     ad6:	8f 70       	andi	r24, 0x0F	; 15
     ad8:	85 b9       	out	0x05, r24	; 5
     ada:	85 b1       	in	r24, 0x05	; 5
     adc:	80 63       	ori	r24, 0x30	; 48
     ade:	85 b9       	out	0x05, r24	; 5
     ae0:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <controll_counter>
     ae4:	90 91 97 07 	lds	r25, 0x0797	; 0x800797 <controll_counter+0x1>
     ae8:	01 96       	adiw	r24, 0x01	; 1
     aea:	90 93 97 07 	sts	0x0797, r25	; 0x800797 <controll_counter+0x1>
     aee:	80 93 96 07 	sts	0x0796, r24	; 0x800796 <controll_counter>
     af2:	0d c0       	rjmp	.+26     	; 0xb0e <Control_Tick+0x104>
     af4:	85 b1       	in	r24, 0x05	; 5
     af6:	8f 70       	andi	r24, 0x0F	; 15
     af8:	85 b9       	out	0x05, r24	; 5
     afa:	2e 9a       	sbi	0x05, 6	; 5
     afc:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <controll_counter>
     b00:	90 91 97 07 	lds	r25, 0x0797	; 0x800797 <controll_counter+0x1>
     b04:	01 96       	adiw	r24, 0x01	; 1
     b06:	90 93 97 07 	sts	0x0797, r25	; 0x800797 <controll_counter+0x1>
     b0a:	80 93 96 07 	sts	0x0796, r24	; 0x800796 <controll_counter>
     b0e:	e0 91 0f 08 	lds	r30, 0x080F	; 0x80080f <control_state>
     b12:	8e 2f       	mov	r24, r30
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	87 30       	cpi	r24, 0x07	; 7
     b18:	91 05       	cpc	r25, r1
     b1a:	08 f0       	brcs	.+2      	; 0xb1e <Control_Tick+0x114>
     b1c:	d9 c0       	rjmp	.+434    	; 0xcd0 <Control_Tick+0x2c6>
     b1e:	fc 01       	movw	r30, r24
     b20:	e3 5b       	subi	r30, 0xB3	; 179
     b22:	ff 4f       	sbci	r31, 0xFF	; 255
     b24:	5e c6       	rjmp	.+3260   	; 0x17e2 <__tablejump2__>
     b26:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <ARM_DISARM>
     b2a:	81 30       	cpi	r24, 0x01	; 1
     b2c:	09 f0       	breq	.+2      	; 0xb30 <Control_Tick+0x126>
     b2e:	d0 c0       	rjmp	.+416    	; 0xcd0 <Control_Tick+0x2c6>
     b30:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <control_state>
     b34:	10 92 af 07 	sts	0x07AF, r1	; 0x8007af <systems_go>
     b38:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <controll_counter+0x1>
     b3c:	10 92 96 07 	sts	0x0796, r1	; 0x800796 <controll_counter>
     b40:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <vishal_counter+0x1>
     b44:	10 92 94 07 	sts	0x0794, r1	; 0x800794 <vishal_counter>
     b48:	10 92 ad 07 	sts	0x07AD, r1	; 0x8007ad <random_seed_val+0x1>
     b4c:	10 92 ac 07 	sts	0x07AC, r1	; 0x8007ac <random_seed_val>
     b50:	08 95       	ret
     b52:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <ARM_DISARM>
     b56:	81 11       	cpse	r24, r1
     b58:	03 c0       	rjmp	.+6      	; 0xb60 <Control_Tick+0x156>
     b5a:	10 92 0f 08 	sts	0x080F, r1	; 0x80080f <control_state>
     b5e:	08 95       	ret
     b60:	80 b1       	in	r24, 0x00	; 0
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	88 0f       	add	r24, r24
     b66:	89 2f       	mov	r24, r25
     b68:	88 1f       	adc	r24, r24
     b6a:	99 0b       	sbc	r25, r25
     b6c:	91 95       	neg	r25
     b6e:	89 2b       	or	r24, r25
     b70:	61 f0       	breq	.+24     	; 0xb8a <Control_Tick+0x180>
     b72:	80 91 ae 07 	lds	r24, 0x07AE	; 0x8007ae <peripheral_setting>
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	41 f4       	brne	.+16     	; 0xb8a <Control_Tick+0x180>
     b7a:	82 e0       	ldi	r24, 0x02	; 2
     b7c:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <control_state>
     b80:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <vishal_counter+0x1>
     b84:	10 92 94 07 	sts	0x0794, r1	; 0x800794 <vishal_counter>
     b88:	08 95       	ret
     b8a:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <motion_detected>
     b8e:	81 30       	cpi	r24, 0x01	; 1
     b90:	09 f0       	breq	.+2      	; 0xb94 <Control_Tick+0x18a>
     b92:	9e c0       	rjmp	.+316    	; 0xcd0 <Control_Tick+0x2c6>
     b94:	84 e0       	ldi	r24, 0x04	; 4
     b96:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <control_state>
     b9a:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <controll_counter+0x1>
     b9e:	10 92 96 07 	sts	0x0796, r1	; 0x800796 <controll_counter>
     ba2:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <random_seed_val>
     ba6:	90 91 ad 07 	lds	r25, 0x07AD	; 0x8007ad <random_seed_val+0x1>
     baa:	82 c6       	rjmp	.+3332   	; 0x18b0 <srand>
     bac:	08 95       	ret
     bae:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <ARM_DISARM>
     bb2:	81 11       	cpse	r24, r1
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <Control_Tick+0x1b2>
     bb6:	10 92 0f 08 	sts	0x080F, r1	; 0x80080f <control_state>
     bba:	08 95       	ret
     bbc:	80 b1       	in	r24, 0x00	; 0
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	88 0f       	add	r24, r24
     bc2:	89 2f       	mov	r24, r25
     bc4:	88 1f       	adc	r24, r24
     bc6:	99 0b       	sbc	r25, r25
     bc8:	91 95       	neg	r25
     bca:	89 2b       	or	r24, r25
     bcc:	09 f0       	breq	.+2      	; 0xbd0 <Control_Tick+0x1c6>
     bce:	80 c0       	rjmp	.+256    	; 0xcd0 <Control_Tick+0x2c6>
     bd0:	83 e0       	ldi	r24, 0x03	; 3
     bd2:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <control_state>
     bd6:	08 95       	ret
     bd8:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <ARM_DISARM>
     bdc:	81 11       	cpse	r24, r1
     bde:	03 c0       	rjmp	.+6      	; 0xbe6 <Control_Tick+0x1dc>
     be0:	10 92 0f 08 	sts	0x080F, r1	; 0x80080f <control_state>
     be4:	08 95       	ret
     be6:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <vishal_counter>
     bea:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <vishal_counter+0x1>
     bee:	88 38       	cpi	r24, 0x88	; 136
     bf0:	93 41       	sbci	r25, 0x13	; 19
     bf2:	0c f4       	brge	.+2      	; 0xbf6 <Control_Tick+0x1ec>
     bf4:	6d c0       	rjmp	.+218    	; 0xcd0 <Control_Tick+0x2c6>
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <control_state>
     bfc:	08 95       	ret
     bfe:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <ARM_DISARM>
     c02:	81 11       	cpse	r24, r1
     c04:	03 c0       	rjmp	.+6      	; 0xc0c <Control_Tick+0x202>
     c06:	10 92 0f 08 	sts	0x080F, r1	; 0x80080f <control_state>
     c0a:	08 95       	ret
     c0c:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <motion_detected>
     c10:	81 30       	cpi	r24, 0x01	; 1
     c12:	59 f4       	brne	.+22     	; 0xc2a <Control_Tick+0x220>
     c14:	80 91 9b 07 	lds	r24, 0x079B	; 0x80079b <beam_detected>
     c18:	88 23       	and	r24, r24
     c1a:	09 f4       	brne	.+2      	; 0xc1e <Control_Tick+0x214>
     c1c:	59 c0       	rjmp	.+178    	; 0xcd0 <Control_Tick+0x2c6>
     c1e:	81 30       	cpi	r24, 0x01	; 1
     c20:	21 f4       	brne	.+8      	; 0xc2a <Control_Tick+0x220>
     c22:	85 e0       	ldi	r24, 0x05	; 5
     c24:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <control_state>
     c28:	08 95       	ret
     c2a:	10 92 0f 08 	sts	0x080F, r1	; 0x80080f <control_state>
     c2e:	08 95       	ret
     c30:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <ARM_DISARM>
     c34:	81 11       	cpse	r24, r1
     c36:	07 c0       	rjmp	.+14     	; 0xc46 <Control_Tick+0x23c>
     c38:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <controll_counter+0x1>
     c3c:	10 92 96 07 	sts	0x0796, r1	; 0x800796 <controll_counter>
     c40:	10 92 0f 08 	sts	0x080F, r1	; 0x80080f <control_state>
     c44:	08 95       	ret
     c46:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <delay_sec>
     c4a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <delay_sec+0x1>
     c4e:	88 ee       	ldi	r24, 0xE8	; 232
     c50:	93 e0       	ldi	r25, 0x03	; 3
     c52:	48 9f       	mul	r20, r24
     c54:	90 01       	movw	r18, r0
     c56:	49 9f       	mul	r20, r25
     c58:	30 0d       	add	r19, r0
     c5a:	58 9f       	mul	r21, r24
     c5c:	30 0d       	add	r19, r0
     c5e:	11 24       	eor	r1, r1
     c60:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <controll_counter>
     c64:	90 91 97 07 	lds	r25, 0x0797	; 0x800797 <controll_counter+0x1>
     c68:	82 17       	cp	r24, r18
     c6a:	93 07       	cpc	r25, r19
     c6c:	3c f0       	brlt	.+14     	; 0xc7c <Control_Tick+0x272>
     c6e:	86 e0       	ldi	r24, 0x06	; 6
     c70:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <control_state>
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	80 93 af 07 	sts	0x07AF, r24	; 0x8007af <systems_go>
     c7a:	08 95       	ret
     c7c:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <motion_detected>
     c80:	81 30       	cpi	r24, 0x01	; 1
     c82:	31 f1       	breq	.+76     	; 0xcd0 <Control_Tick+0x2c6>
     c84:	80 91 9b 07 	lds	r24, 0x079B	; 0x80079b <beam_detected>
     c88:	81 30       	cpi	r24, 0x01	; 1
     c8a:	11 f1       	breq	.+68     	; 0xcd0 <Control_Tick+0x2c6>
     c8c:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <controll_counter+0x1>
     c90:	10 92 96 07 	sts	0x0796, r1	; 0x800796 <controll_counter>
     c94:	10 92 0f 08 	sts	0x080F, r1	; 0x80080f <control_state>
     c98:	08 95       	ret
     c9a:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <ARM_DISARM>
     c9e:	81 11       	cpse	r24, r1
     ca0:	03 c0       	rjmp	.+6      	; 0xca8 <Control_Tick+0x29e>
     ca2:	10 92 0f 08 	sts	0x080F, r1	; 0x80080f <control_state>
     ca6:	08 95       	ret
     ca8:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <controll_counter>
     cac:	90 91 97 07 	lds	r25, 0x0797	; 0x800797 <controll_counter+0x1>
     cb0:	80 32       	cpi	r24, 0x20	; 32
     cb2:	9e 44       	sbci	r25, 0x4E	; 78
     cb4:	6c f0       	brlt	.+26     	; 0xcd0 <Control_Tick+0x2c6>
     cb6:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <motion_detected>
     cba:	81 11       	cpse	r24, r1
     cbc:	09 c0       	rjmp	.+18     	; 0xcd0 <Control_Tick+0x2c6>
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <control_state>
     cc4:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <controll_counter+0x1>
     cc8:	10 92 96 07 	sts	0x0796, r1	; 0x800796 <controll_counter>
     ccc:	10 92 af 07 	sts	0x07AF, r1	; 0x8007af <systems_go>
     cd0:	08 95       	ret

00000cd2 <ControlSecTask>:
     cd2:	10 92 0f 08 	sts	0x080F, r1	; 0x80080f <control_state>
     cd6:	99 de       	rcall	.-718    	; 0xa0a <Control_Tick>
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	ae d4       	rcall	.+2396   	; 0x163a <vTaskDelay>
     cde:	fb cf       	rjmp	.-10     	; 0xcd6 <ControlSecTask+0x4>

00000ce0 <StartControlPulse>:
     ce0:	af 92       	push	r10
     ce2:	bf 92       	push	r11
     ce4:	cf 92       	push	r12
     ce6:	df 92       	push	r13
     ce8:	ef 92       	push	r14
     cea:	ff 92       	push	r15
     cec:	0f 93       	push	r16
     cee:	a1 2c       	mov	r10, r1
     cf0:	b1 2c       	mov	r11, r1
     cf2:	c1 2c       	mov	r12, r1
     cf4:	d1 2c       	mov	r13, r1
     cf6:	e1 2c       	mov	r14, r1
     cf8:	f1 2c       	mov	r15, r1
     cfa:	08 2f       	mov	r16, r24
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	45 e5       	ldi	r20, 0x55	; 85
     d02:	50 e0       	ldi	r21, 0x00	; 0
     d04:	66 e9       	ldi	r22, 0x96	; 150
     d06:	71 e0       	ldi	r23, 0x01	; 1
     d08:	89 e6       	ldi	r24, 0x69	; 105
     d0a:	96 e0       	ldi	r25, 0x06	; 6
     d0c:	1e d2       	rcall	.+1084   	; 0x114a <xTaskGenericCreate>
     d0e:	0f 91       	pop	r16
     d10:	ff 90       	pop	r15
     d12:	ef 90       	pop	r14
     d14:	df 90       	pop	r13
     d16:	cf 90       	pop	r12
     d18:	bf 90       	pop	r11
     d1a:	af 90       	pop	r10
     d1c:	08 95       	ret

00000d1e <Rec_Tick>:
}

void Rec_Tick(){
	//Actions
	switch(rec_state){
     d1e:	80 91 10 08 	lds	r24, 0x0810	; 0x800810 <rec_state>
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	61 f5       	brne	.+88     	; 0xd7e <Rec_Tick+0x60>
		break;


		case Receive_State:
		//ARM_DISARM = USART_Receive(0); //receive data
		 received_data = USART_Receive(0);
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	de da       	rcall	.-2628   	; 0x2e6 <USART_Receive>
     d2a:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <received_data>
		 //delay_timing 0 = 5 sec, 1 = 10 sec, 2 = 15 sec
		 //bark_setting 0 = minor, 1 = major
		 //Peripheral setting 0 = don't use peripheral, 1 = use peripheral
		 
		 //set arm_disarm
		 if(GetBit(received_data,0)==1){ //system is armed
     d2e:	80 ff       	sbrs	r24, 0
     d30:	04 c0       	rjmp	.+8      	; 0xd3a <Rec_Tick+0x1c>
			 ARM_DISARM = 1;
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	80 93 b2 07 	sts	0x07B2, r24	; 0x8007b2 <ARM_DISARM>
     d38:	20 c0       	rjmp	.+64     	; 0xd7a <Rec_Tick+0x5c>
			 //PORTB = PORTB | 0x40; //set pin B6 high
			 //PORTB = 0xFF;
			 
		 }
		 else{                           //system is disarmed
			 ARM_DISARM = 0;
     d3a:	10 92 b2 07 	sts	0x07B2, r1	; 0x8007b2 <ARM_DISARM>
			 //PORTB = 0x00;
			 //PORTB = PORTB & 0xBF; //set pin B6 low
			 
			 //set delay timing
			 if(GetBit(received_data,1) == 1){ //delay 10 second
     d3e:	81 ff       	sbrs	r24, 1
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <Rec_Tick+0x2c>
				 delay_timing = 1;
     d42:	21 e0       	ldi	r18, 0x01	; 1
     d44:	20 93 b1 07 	sts	0x07B1, r18	; 0x8007b1 <delay_timing>
     d48:	08 c0       	rjmp	.+16     	; 0xd5a <Rec_Tick+0x3c>
			 }
			 else if(GetBit(received_data,2) == 1){//delay 15 second
     d4a:	82 ff       	sbrs	r24, 2
     d4c:	04 c0       	rjmp	.+8      	; 0xd56 <Rec_Tick+0x38>
				 delay_timing = 2;
     d4e:	22 e0       	ldi	r18, 0x02	; 2
     d50:	20 93 b1 07 	sts	0x07B1, r18	; 0x8007b1 <delay_timing>
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <Rec_Tick+0x3c>
			 }
			 else{                           //delay 5 second
				 delay_timing = 0;
     d56:	10 92 b1 07 	sts	0x07B1, r1	; 0x8007b1 <delay_timing>
			 }
			 
			 //set bark settings
			 if(GetBit(received_data,3)==1){ //Major Bark
     d5a:	83 ff       	sbrs	r24, 3
     d5c:	04 c0       	rjmp	.+8      	; 0xd66 <Rec_Tick+0x48>
				 bark_setting = 1;
     d5e:	21 e0       	ldi	r18, 0x01	; 1
     d60:	20 93 b0 07 	sts	0x07B0, r18	; 0x8007b0 <bark_setting>
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <Rec_Tick+0x4c>
			 }
			 else{                           //Minor Bark
				 bark_setting = 0;
     d66:	10 92 b0 07 	sts	0x07B0, r1	; 0x8007b0 <bark_setting>
			 }
			 
			 //set peripheral setting
			 if(GetBit(received_data,4)==1){ //use peripheral
     d6a:	84 ff       	sbrs	r24, 4
     d6c:	04 c0       	rjmp	.+8      	; 0xd76 <Rec_Tick+0x58>
				 peripheral_setting = 1;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	80 93 ae 07 	sts	0x07AE, r24	; 0x8007ae <peripheral_setting>
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <Rec_Tick+0x5c>
			 }
			 else{                           //don't use peripheral
				 peripheral_setting = 0;
     d76:	10 92 ae 07 	sts	0x07AE, r1	; 0x8007ae <peripheral_setting>
			 }
		 }
		 
		  
	
		USART_Flush(0); //flush so flag reset
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	97 da       	rcall	.-2770   	; 0x2ac <USART_Flush>
		
		default:
		break;
	}
	//Transitions
	switch(rec_state){
     d7e:	80 91 10 08 	lds	r24, 0x0810	; 0x800810 <rec_state>
     d82:	88 23       	and	r24, r24
     d84:	19 f0       	breq	.+6      	; 0xd8c <Rec_Tick+0x6e>
			}
		break;


		case Receive_State:
			rec_state = Rec_Wait; //go back 
     d86:	10 92 10 08 	sts	0x0810, r1	; 0x800810 <rec_state>
     d8a:	08 95       	ret
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
     d8c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
		break;
	}
	//Transitions
	switch(rec_state){
		case Rec_Wait:
			if(USART_HasReceived(0)){
     d90:	88 23       	and	r24, r24
     d92:	1c f4       	brge	.+6      	; 0xd9a <Rec_Tick+0x7c>
				rec_state = Receive_State; //if ready go to next state
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	80 93 10 08 	sts	0x0810, r24	; 0x800810 <rec_state>
     d9a:	08 95       	ret

00000d9c <RecSecTask>:
//RECEIVE FSM

enum RECState {Rec_Wait, Receive_State } rec_state;

void REC_Init(){
	rec_state = Rec_Wait;
     d9c:	10 92 10 08 	sts	0x0810, r1	; 0x800810 <rec_state>
void RecSecTask()
{
	REC_Init();
	for(;;)
	{
		Rec_Tick();
     da0:	be df       	rcall	.-132    	; 0xd1e <Rec_Tick>
		vTaskDelay(10);
     da2:	8a e0       	ldi	r24, 0x0A	; 10
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	49 d4       	rcall	.+2194   	; 0x163a <vTaskDelay>
     da8:	fb cf       	rjmp	.-10     	; 0xda0 <RecSecTask+0x4>

00000daa <RecSecPulse>:
	}
}

void RecSecPulse(unsigned portBASE_TYPE Priority)
{
     daa:	af 92       	push	r10
     dac:	bf 92       	push	r11
     dae:	cf 92       	push	r12
     db0:	df 92       	push	r13
     db2:	ef 92       	push	r14
     db4:	ff 92       	push	r15
     db6:	0f 93       	push	r16
	xTaskCreate(RecSecTask, (signed portCHAR *)"RecSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     db8:	a1 2c       	mov	r10, r1
     dba:	b1 2c       	mov	r11, r1
     dbc:	c1 2c       	mov	r12, r1
     dbe:	d1 2c       	mov	r13, r1
     dc0:	e1 2c       	mov	r14, r1
     dc2:	f1 2c       	mov	r15, r1
     dc4:	08 2f       	mov	r16, r24
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	45 e5       	ldi	r20, 0x55	; 85
     dcc:	50 e0       	ldi	r21, 0x00	; 0
     dce:	65 ea       	ldi	r22, 0xA5	; 165
     dd0:	71 e0       	ldi	r23, 0x01	; 1
     dd2:	8e ec       	ldi	r24, 0xCE	; 206
     dd4:	96 e0       	ldi	r25, 0x06	; 6
     dd6:	b9 d1       	rcall	.+882    	; 0x114a <xTaskGenericCreate>
}
     dd8:	0f 91       	pop	r16
     dda:	ff 90       	pop	r15
     ddc:	ef 90       	pop	r14
     dde:	df 90       	pop	r13
     de0:	cf 90       	pop	r12
     de2:	bf 90       	pop	r11
     de4:	af 90       	pop	r10
     de6:	08 95       	ret

00000de8 <main>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 
int main(void) 
{ 
   DDRA = 0x00; PORTA=0xFF; //set to input
     de8:	11 b8       	out	0x01, r1	; 1
     dea:	8f ef       	ldi	r24, 0xFF	; 255
     dec:	82 b9       	out	0x02, r24	; 2
   DDRB = 0xFF; PORTB = 0x00; //set to output
     dee:	84 b9       	out	0x04, r24	; 4
     df0:	15 b8       	out	0x05, r1	; 5
   DDRC = 0xFF; PORTC = 0x00;
     df2:	87 b9       	out	0x07, r24	; 7
     df4:	18 b8       	out	0x08, r1	; 8
   PORTC = 0x0C; //set pins C2,C3 to high so audio wont play
     df6:	8c e0       	ldi	r24, 0x0C	; 12
     df8:	88 b9       	out	0x08, r24	; 8
   //DDRD = 0xFF; PORTD = 0x00; //used by USART 0
   initUSART(0);//Initialize USART 0
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	35 da       	rcall	.-2966   	; 0x268 <initUSART>
   //Start Tasks  
   RecSecPulse(1); 
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	d4 df       	rcall	.-88     	; 0xdaa <RecSecPulse>
   StartBeamPulse(1);
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	71 dd       	rcall	.-1310   	; 0x8e8 <StartBeamPulse>
   StartMotionPulse(1);
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	e1 dd       	rcall	.-1086   	; 0x9cc <StartMotionPulse>
   StartControlPulse(1);
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	69 df       	rcall	.-302    	; 0xce0 <StartControlPulse>
   
   MotorSecPulse(1);
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	0b db       	rcall	.-2538   	; 0x428 <MotorSecPulse>
   Start_stepper_controller_Pulse(1);
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	70 db       	rcall	.-2336   	; 0x4f6 <Start_stepper_controller_Pulse>
   Start_servo_controller_Pulse(1);
     e16:	81 e0       	ldi	r24, 0x01	; 1
   SERVODRIVESecPulse(1);
     e18:	c2 dc       	rcall	.-1660   	; 0x79e <Start_servo_controller_Pulse>
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	c7 db       	rcall	.-2162   	; 0x5ac <SERVODRIVESecPulse>
   SERVOSecPulse(1);
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	39 dc       	rcall	.-1934   	; 0x694 <SERVOSecPulse>
     e22:	81 e0       	ldi	r24, 0x01	; 1
   StartAudioPulse(1);
     e24:	0c dd       	rcall	.-1512   	; 0x83e <StartAudioPulse>
     e26:	92 d2       	rcall	.+1316   	; 0x134c <vTaskStartScheduler>
     e28:	80 e0       	ldi	r24, 0x00	; 0
    //RunSchedular 
   vTaskStartScheduler(); 
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	08 95       	ret

00000e2e <pxPortInitialiseStack>:
 
   return 0; 
}
     e2e:	31 e1       	ldi	r19, 0x11	; 17
     e30:	fc 01       	movw	r30, r24
     e32:	30 83       	st	Z, r19
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     e34:	31 97       	sbiw	r30, 0x01	; 1
     e36:	22 e2       	ldi	r18, 0x22	; 34
     e38:	20 83       	st	Z, r18
     e3a:	31 97       	sbiw	r30, 0x01	; 1
     e3c:	a3 e3       	ldi	r26, 0x33	; 51
     e3e:	a0 83       	st	Z, r26
     e40:	31 97       	sbiw	r30, 0x01	; 1
     e42:	60 83       	st	Z, r22
     e44:	31 97       	sbiw	r30, 0x01	; 1
     e46:	70 83       	st	Z, r23
     e48:	31 97       	sbiw	r30, 0x01	; 1
     e4a:	10 82       	st	Z, r1
     e4c:	31 97       	sbiw	r30, 0x01	; 1
     e4e:	60 e8       	ldi	r22, 0x80	; 128
     e50:	60 83       	st	Z, r22
     e52:	31 97       	sbiw	r30, 0x01	; 1
     e54:	10 82       	st	Z, r1
     e56:	31 97       	sbiw	r30, 0x01	; 1
     e58:	62 e0       	ldi	r22, 0x02	; 2
     e5a:	60 83       	st	Z, r22
     e5c:	31 97       	sbiw	r30, 0x01	; 1
     e5e:	63 e0       	ldi	r22, 0x03	; 3
     e60:	60 83       	st	Z, r22
     e62:	31 97       	sbiw	r30, 0x01	; 1
     e64:	64 e0       	ldi	r22, 0x04	; 4
     e66:	60 83       	st	Z, r22
     e68:	31 97       	sbiw	r30, 0x01	; 1
     e6a:	65 e0       	ldi	r22, 0x05	; 5
     e6c:	60 83       	st	Z, r22
     e6e:	31 97       	sbiw	r30, 0x01	; 1
     e70:	66 e0       	ldi	r22, 0x06	; 6
     e72:	60 83       	st	Z, r22
     e74:	31 97       	sbiw	r30, 0x01	; 1
     e76:	67 e0       	ldi	r22, 0x07	; 7
     e78:	60 83       	st	Z, r22
     e7a:	31 97       	sbiw	r30, 0x01	; 1
     e7c:	68 e0       	ldi	r22, 0x08	; 8
     e7e:	60 83       	st	Z, r22
     e80:	31 97       	sbiw	r30, 0x01	; 1
     e82:	69 e0       	ldi	r22, 0x09	; 9
     e84:	60 83       	st	Z, r22
     e86:	31 97       	sbiw	r30, 0x01	; 1
     e88:	60 e1       	ldi	r22, 0x10	; 16
     e8a:	60 83       	st	Z, r22
     e8c:	31 97       	sbiw	r30, 0x01	; 1
     e8e:	30 83       	st	Z, r19
     e90:	31 97       	sbiw	r30, 0x01	; 1
     e92:	32 e1       	ldi	r19, 0x12	; 18
     e94:	30 83       	st	Z, r19
     e96:	31 97       	sbiw	r30, 0x01	; 1
     e98:	33 e1       	ldi	r19, 0x13	; 19
     e9a:	30 83       	st	Z, r19
     e9c:	31 97       	sbiw	r30, 0x01	; 1
     e9e:	34 e1       	ldi	r19, 0x14	; 20
     ea0:	30 83       	st	Z, r19
     ea2:	31 97       	sbiw	r30, 0x01	; 1
     ea4:	35 e1       	ldi	r19, 0x15	; 21
     ea6:	30 83       	st	Z, r19
     ea8:	31 97       	sbiw	r30, 0x01	; 1
     eaa:	36 e1       	ldi	r19, 0x16	; 22
     eac:	30 83       	st	Z, r19
     eae:	31 97       	sbiw	r30, 0x01	; 1
     eb0:	37 e1       	ldi	r19, 0x17	; 23
     eb2:	30 83       	st	Z, r19
     eb4:	31 97       	sbiw	r30, 0x01	; 1
     eb6:	38 e1       	ldi	r19, 0x18	; 24
     eb8:	30 83       	st	Z, r19
     eba:	31 97       	sbiw	r30, 0x01	; 1
     ebc:	39 e1       	ldi	r19, 0x19	; 25
     ebe:	30 83       	st	Z, r19
     ec0:	31 97       	sbiw	r30, 0x01	; 1
     ec2:	30 e2       	ldi	r19, 0x20	; 32
     ec4:	30 83       	st	Z, r19
     ec6:	31 97       	sbiw	r30, 0x01	; 1
     ec8:	31 e2       	ldi	r19, 0x21	; 33
     eca:	30 83       	st	Z, r19
     ecc:	31 97       	sbiw	r30, 0x01	; 1
     ece:	20 83       	st	Z, r18
     ed0:	31 97       	sbiw	r30, 0x01	; 1
     ed2:	23 e2       	ldi	r18, 0x23	; 35
     ed4:	20 83       	st	Z, r18
     ed6:	31 97       	sbiw	r30, 0x01	; 1
     ed8:	40 83       	st	Z, r20
     eda:	31 97       	sbiw	r30, 0x01	; 1
     edc:	50 83       	st	Z, r21
     ede:	31 97       	sbiw	r30, 0x01	; 1
     ee0:	26 e2       	ldi	r18, 0x26	; 38
     ee2:	20 83       	st	Z, r18
     ee4:	31 97       	sbiw	r30, 0x01	; 1
     ee6:	27 e2       	ldi	r18, 0x27	; 39
     ee8:	20 83       	st	Z, r18
     eea:	31 97       	sbiw	r30, 0x01	; 1
     eec:	28 e2       	ldi	r18, 0x28	; 40
     eee:	20 83       	st	Z, r18
     ef0:	31 97       	sbiw	r30, 0x01	; 1
     ef2:	29 e2       	ldi	r18, 0x29	; 41
     ef4:	20 83       	st	Z, r18
     ef6:	31 97       	sbiw	r30, 0x01	; 1
     ef8:	20 e3       	ldi	r18, 0x30	; 48
     efa:	20 83       	st	Z, r18
     efc:	31 97       	sbiw	r30, 0x01	; 1
     efe:	21 e3       	ldi	r18, 0x31	; 49
     f00:	20 83       	st	Z, r18
     f02:	86 97       	sbiw	r24, 0x26	; 38
     f04:	08 95       	ret

00000f06 <xPortStartScheduler>:
     f06:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     f0a:	8c e7       	ldi	r24, 0x7C	; 124
     f0c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     f10:	8b e0       	ldi	r24, 0x0B	; 11
     f12:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     f16:	ef e6       	ldi	r30, 0x6F	; 111
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	82 60       	ori	r24, 0x02	; 2
     f1e:	80 83       	st	Z, r24
     f20:	a0 91 0b 08 	lds	r26, 0x080B	; 0x80080b <pxCurrentTCB>
     f24:	b0 91 0c 08 	lds	r27, 0x080C	; 0x80080c <pxCurrentTCB+0x1>
     f28:	cd 91       	ld	r28, X+
     f2a:	cd bf       	out	0x3d, r28	; 61
     f2c:	dd 91       	ld	r29, X+
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	ff 91       	pop	r31
     f32:	ef 91       	pop	r30
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	bf 91       	pop	r27
     f3a:	af 91       	pop	r26
     f3c:	9f 91       	pop	r25
     f3e:	8f 91       	pop	r24
     f40:	7f 91       	pop	r23
     f42:	6f 91       	pop	r22
     f44:	5f 91       	pop	r21
     f46:	4f 91       	pop	r20
     f48:	3f 91       	pop	r19
     f4a:	2f 91       	pop	r18
     f4c:	1f 91       	pop	r17
     f4e:	0f 91       	pop	r16
     f50:	ff 90       	pop	r15
     f52:	ef 90       	pop	r14
     f54:	df 90       	pop	r13
     f56:	cf 90       	pop	r12
     f58:	bf 90       	pop	r11
     f5a:	af 90       	pop	r10
     f5c:	9f 90       	pop	r9
     f5e:	8f 90       	pop	r8
     f60:	7f 90       	pop	r7
     f62:	6f 90       	pop	r6
     f64:	5f 90       	pop	r5
     f66:	4f 90       	pop	r4
     f68:	3f 90       	pop	r3
     f6a:	2f 90       	pop	r2
     f6c:	1f 90       	pop	r1
     f6e:	0f 90       	pop	r0
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	0f 90       	pop	r0
     f74:	08 95       	ret
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	08 95       	ret

00000f7a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     f7a:	0f 92       	push	r0
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	0f 92       	push	r0
     f82:	1f 92       	push	r1
     f84:	11 24       	eor	r1, r1
     f86:	2f 92       	push	r2
     f88:	3f 92       	push	r3
     f8a:	4f 92       	push	r4
     f8c:	5f 92       	push	r5
     f8e:	6f 92       	push	r6
     f90:	7f 92       	push	r7
     f92:	8f 92       	push	r8
     f94:	9f 92       	push	r9
     f96:	af 92       	push	r10
     f98:	bf 92       	push	r11
     f9a:	cf 92       	push	r12
     f9c:	df 92       	push	r13
     f9e:	ef 92       	push	r14
     fa0:	ff 92       	push	r15
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	2f 93       	push	r18
     fa8:	3f 93       	push	r19
     faa:	4f 93       	push	r20
     fac:	5f 93       	push	r21
     fae:	6f 93       	push	r22
     fb0:	7f 93       	push	r23
     fb2:	8f 93       	push	r24
     fb4:	9f 93       	push	r25
     fb6:	af 93       	push	r26
     fb8:	bf 93       	push	r27
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	ef 93       	push	r30
     fc0:	ff 93       	push	r31
     fc2:	a0 91 0b 08 	lds	r26, 0x080B	; 0x80080b <pxCurrentTCB>
     fc6:	b0 91 0c 08 	lds	r27, 0x080C	; 0x80080c <pxCurrentTCB+0x1>
     fca:	0d b6       	in	r0, 0x3d	; 61
     fcc:	0d 92       	st	X+, r0
     fce:	0e b6       	in	r0, 0x3e	; 62
     fd0:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     fd2:	88 d3       	rcall	.+1808   	; 0x16e4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     fd4:	a0 91 0b 08 	lds	r26, 0x080B	; 0x80080b <pxCurrentTCB>
     fd8:	b0 91 0c 08 	lds	r27, 0x080C	; 0x80080c <pxCurrentTCB+0x1>
     fdc:	cd 91       	ld	r28, X+
     fde:	cd bf       	out	0x3d, r28	; 61
     fe0:	dd 91       	ld	r29, X+
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	ff 91       	pop	r31
     fe6:	ef 91       	pop	r30
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	bf 91       	pop	r27
     fee:	af 91       	pop	r26
     ff0:	9f 91       	pop	r25
     ff2:	8f 91       	pop	r24
     ff4:	7f 91       	pop	r23
     ff6:	6f 91       	pop	r22
     ff8:	5f 91       	pop	r21
     ffa:	4f 91       	pop	r20
     ffc:	3f 91       	pop	r19
     ffe:	2f 91       	pop	r18
    1000:	1f 91       	pop	r17
    1002:	0f 91       	pop	r16
    1004:	ff 90       	pop	r15
    1006:	ef 90       	pop	r14
    1008:	df 90       	pop	r13
    100a:	cf 90       	pop	r12
    100c:	bf 90       	pop	r11
    100e:	af 90       	pop	r10
    1010:	9f 90       	pop	r9
    1012:	8f 90       	pop	r8
    1014:	7f 90       	pop	r7
    1016:	6f 90       	pop	r6
    1018:	5f 90       	pop	r5
    101a:	4f 90       	pop	r4
    101c:	3f 90       	pop	r3
    101e:	2f 90       	pop	r2
    1020:	1f 90       	pop	r1
    1022:	0f 90       	pop	r0
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1028:	08 95       	ret

0000102a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    102a:	0f 92       	push	r0
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	0f 92       	push	r0
    1032:	1f 92       	push	r1
    1034:	11 24       	eor	r1, r1
    1036:	2f 92       	push	r2
    1038:	3f 92       	push	r3
    103a:	4f 92       	push	r4
    103c:	5f 92       	push	r5
    103e:	6f 92       	push	r6
    1040:	7f 92       	push	r7
    1042:	8f 92       	push	r8
    1044:	9f 92       	push	r9
    1046:	af 92       	push	r10
    1048:	bf 92       	push	r11
    104a:	cf 92       	push	r12
    104c:	df 92       	push	r13
    104e:	ef 92       	push	r14
    1050:	ff 92       	push	r15
    1052:	0f 93       	push	r16
    1054:	1f 93       	push	r17
    1056:	2f 93       	push	r18
    1058:	3f 93       	push	r19
    105a:	4f 93       	push	r20
    105c:	5f 93       	push	r21
    105e:	6f 93       	push	r22
    1060:	7f 93       	push	r23
    1062:	8f 93       	push	r24
    1064:	9f 93       	push	r25
    1066:	af 93       	push	r26
    1068:	bf 93       	push	r27
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	ef 93       	push	r30
    1070:	ff 93       	push	r31
    1072:	a0 91 0b 08 	lds	r26, 0x080B	; 0x80080b <pxCurrentTCB>
    1076:	b0 91 0c 08 	lds	r27, 0x080C	; 0x80080c <pxCurrentTCB+0x1>
    107a:	0d b6       	in	r0, 0x3d	; 61
    107c:	0d 92       	st	X+, r0
    107e:	0e b6       	in	r0, 0x3e	; 62
    1080:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    1082:	93 d1       	rcall	.+806    	; 0x13aa <vTaskIncrementTick>
	vTaskSwitchContext();
    1084:	2f d3       	rcall	.+1630   	; 0x16e4 <vTaskSwitchContext>
    1086:	a0 91 0b 08 	lds	r26, 0x080B	; 0x80080b <pxCurrentTCB>
	portRESTORE_CONTEXT();
    108a:	b0 91 0c 08 	lds	r27, 0x080C	; 0x80080c <pxCurrentTCB+0x1>
    108e:	cd 91       	ld	r28, X+
    1090:	cd bf       	out	0x3d, r28	; 61
    1092:	dd 91       	ld	r29, X+
    1094:	de bf       	out	0x3e, r29	; 62
    1096:	ff 91       	pop	r31
    1098:	ef 91       	pop	r30
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	bf 91       	pop	r27
    10a0:	af 91       	pop	r26
    10a2:	9f 91       	pop	r25
    10a4:	8f 91       	pop	r24
    10a6:	7f 91       	pop	r23
    10a8:	6f 91       	pop	r22
    10aa:	5f 91       	pop	r21
    10ac:	4f 91       	pop	r20
    10ae:	3f 91       	pop	r19
    10b0:	2f 91       	pop	r18
    10b2:	1f 91       	pop	r17
    10b4:	0f 91       	pop	r16
    10b6:	ff 90       	pop	r15
    10b8:	ef 90       	pop	r14
    10ba:	df 90       	pop	r13
    10bc:	cf 90       	pop	r12
    10be:	bf 90       	pop	r11
    10c0:	af 90       	pop	r10
    10c2:	9f 90       	pop	r9
    10c4:	8f 90       	pop	r8
    10c6:	7f 90       	pop	r7
    10c8:	6f 90       	pop	r6
    10ca:	5f 90       	pop	r5
    10cc:	4f 90       	pop	r4
    10ce:	3f 90       	pop	r3
    10d0:	2f 90       	pop	r2
    10d2:	1f 90       	pop	r1
    10d4:	0f 90       	pop	r0
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	0f 90       	pop	r0
    10da:	08 95       	ret

000010dc <__vector_13>:

	asm volatile ( "ret" );
    10dc:	a6 df       	rcall	.-180    	; 0x102a <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
    10de:	18 95       	reti

000010e0 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	ec 01       	movw	r28, r24
    10e6:	e0 91 0b 08 	lds	r30, 0x080B	; 0x80080b <pxCurrentTCB>
    10ea:	f0 91 0c 08 	lds	r31, 0x080C	; 0x80080c <pxCurrentTCB+0x1>
    10ee:	93 83       	std	Z+3, r25	; 0x03
    10f0:	82 83       	std	Z+2, r24	; 0x02
    10f2:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <xTickCount>
    10f6:	90 91 bc 07 	lds	r25, 0x07BC	; 0x8007bc <xTickCount+0x1>
    10fa:	c8 17       	cp	r28, r24
    10fc:	d9 07       	cpc	r29, r25
    10fe:	60 f4       	brcc	.+24     	; 0x1118 <prvAddCurrentTaskToDelayedList+0x38>
    1100:	60 91 0b 08 	lds	r22, 0x080B	; 0x80080b <pxCurrentTCB>
    1104:	70 91 0c 08 	lds	r23, 0x080C	; 0x80080c <pxCurrentTCB+0x1>
    1108:	80 91 d1 07 	lds	r24, 0x07D1	; 0x8007d1 <pxOverflowDelayedTaskList>
    110c:	90 91 d2 07 	lds	r25, 0x07D2	; 0x8007d2 <pxOverflowDelayedTaskList+0x1>
    1110:	6e 5f       	subi	r22, 0xFE	; 254
    1112:	7f 4f       	sbci	r23, 0xFF	; 255
    1114:	48 d8       	rcall	.-3952   	; 0x1a6 <vListInsert>
    1116:	16 c0       	rjmp	.+44     	; 0x1144 <prvAddCurrentTaskToDelayedList+0x64>
    1118:	60 91 0b 08 	lds	r22, 0x080B	; 0x80080b <pxCurrentTCB>
    111c:	70 91 0c 08 	lds	r23, 0x080C	; 0x80080c <pxCurrentTCB+0x1>
    1120:	80 91 d3 07 	lds	r24, 0x07D3	; 0x8007d3 <pxDelayedTaskList>
    1124:	90 91 d4 07 	lds	r25, 0x07D4	; 0x8007d4 <pxDelayedTaskList+0x1>
    1128:	6e 5f       	subi	r22, 0xFE	; 254
    112a:	7f 4f       	sbci	r23, 0xFF	; 255
    112c:	3c d8       	rcall	.-3976   	; 0x1a6 <vListInsert>
    112e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <xNextTaskUnblockTime>
    1132:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <xNextTaskUnblockTime+0x1>
    1136:	c8 17       	cp	r28, r24
    1138:	d9 07       	cpc	r29, r25
    113a:	20 f4       	brcc	.+8      	; 0x1144 <prvAddCurrentTaskToDelayedList+0x64>
    113c:	d0 93 0f 01 	sts	0x010F, r29	; 0x80010f <xNextTaskUnblockTime+0x1>
    1140:	c0 93 0e 01 	sts	0x010E, r28	; 0x80010e <xNextTaskUnblockTime>
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	08 95       	ret

0000114a <xTaskGenericCreate>:
    114a:	4f 92       	push	r4
    114c:	5f 92       	push	r5
    114e:	6f 92       	push	r6
    1150:	7f 92       	push	r7
    1152:	8f 92       	push	r8
    1154:	9f 92       	push	r9
    1156:	af 92       	push	r10
    1158:	bf 92       	push	r11
    115a:	cf 92       	push	r12
    115c:	df 92       	push	r13
    115e:	ef 92       	push	r14
    1160:	ff 92       	push	r15
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	5c 01       	movw	r10, r24
    116c:	4b 01       	movw	r8, r22
    116e:	3a 01       	movw	r6, r20
    1170:	29 01       	movw	r4, r18
    1172:	81 e2       	ldi	r24, 0x21	; 33
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	0e 94 73 00 	call	0xe6	; 0xe6 <pvPortMalloc>
    117a:	ec 01       	movw	r28, r24
    117c:	89 2b       	or	r24, r25
    117e:	09 f4       	brne	.+2      	; 0x1182 <xTaskGenericCreate+0x38>
    1180:	d3 c0       	rjmp	.+422    	; 0x1328 <xTaskGenericCreate+0x1de>
    1182:	c1 14       	cp	r12, r1
    1184:	d1 04       	cpc	r13, r1
    1186:	09 f0       	breq	.+2      	; 0x118a <xTaskGenericCreate+0x40>
    1188:	cb c0       	rjmp	.+406    	; 0x1320 <xTaskGenericCreate+0x1d6>
    118a:	c3 01       	movw	r24, r6
    118c:	0e 94 73 00 	call	0xe6	; 0xe6 <pvPortMalloc>
    1190:	98 8f       	std	Y+24, r25	; 0x18
    1192:	8f 8b       	std	Y+23, r24	; 0x17
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	21 f4       	brne	.+8      	; 0x11a0 <xTaskGenericCreate+0x56>
    1198:	ce 01       	movw	r24, r28
    119a:	0e 94 99 00 	call	0x132	; 0x132 <vPortFree>
    119e:	c4 c0       	rjmp	.+392    	; 0x1328 <xTaskGenericCreate+0x1de>
    11a0:	a3 01       	movw	r20, r6
    11a2:	65 ea       	ldi	r22, 0xA5	; 165
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	8f d3       	rcall	.+1822   	; 0x18c6 <memset>
    11a8:	93 01       	movw	r18, r6
    11aa:	21 50       	subi	r18, 0x01	; 1
    11ac:	31 09       	sbc	r19, r1
    11ae:	8f 89       	ldd	r24, Y+23	; 0x17
    11b0:	98 8d       	ldd	r25, Y+24	; 0x18
    11b2:	3c 01       	movw	r6, r24
    11b4:	62 0e       	add	r6, r18
    11b6:	73 1e       	adc	r7, r19
    11b8:	48 e0       	ldi	r20, 0x08	; 8
    11ba:	50 e0       	ldi	r21, 0x00	; 0
    11bc:	b4 01       	movw	r22, r8
    11be:	ce 01       	movw	r24, r28
    11c0:	49 96       	adiw	r24, 0x19	; 25
    11c2:	88 d3       	rcall	.+1808   	; 0x18d4 <strncpy>
    11c4:	18 a2       	std	Y+32, r1	; 0x20
    11c6:	10 2f       	mov	r17, r16
    11c8:	04 30       	cpi	r16, 0x04	; 4
    11ca:	08 f0       	brcs	.+2      	; 0x11ce <xTaskGenericCreate+0x84>
    11cc:	13 e0       	ldi	r17, 0x03	; 3
    11ce:	1e 8b       	std	Y+22, r17	; 0x16
    11d0:	6e 01       	movw	r12, r28
    11d2:	82 e0       	ldi	r24, 0x02	; 2
    11d4:	c8 0e       	add	r12, r24
    11d6:	d1 1c       	adc	r13, r1
    11d8:	c6 01       	movw	r24, r12
    11da:	0e 94 a8 00 	call	0x150	; 0x150 <vListInitialiseItem>
    11de:	ce 01       	movw	r24, r28
    11e0:	0c 96       	adiw	r24, 0x0c	; 12
    11e2:	0e 94 a8 00 	call	0x150	; 0x150 <vListInitialiseItem>
    11e6:	d9 87       	std	Y+9, r29	; 0x09
    11e8:	c8 87       	std	Y+8, r28	; 0x08
    11ea:	84 e0       	ldi	r24, 0x04	; 4
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	81 1b       	sub	r24, r17
    11f0:	91 09       	sbc	r25, r1
    11f2:	9d 87       	std	Y+13, r25	; 0x0d
    11f4:	8c 87       	std	Y+12, r24	; 0x0c
    11f6:	db 8b       	std	Y+19, r29	; 0x13
    11f8:	ca 8b       	std	Y+18, r28	; 0x12
    11fa:	a2 01       	movw	r20, r4
    11fc:	b5 01       	movw	r22, r10
    11fe:	c3 01       	movw	r24, r6
    1200:	16 de       	rcall	.-980    	; 0xe2e <pxPortInitialiseStack>
    1202:	99 83       	std	Y+1, r25	; 0x01
    1204:	88 83       	st	Y, r24
    1206:	e1 14       	cp	r14, r1
    1208:	f1 04       	cpc	r15, r1
    120a:	19 f0       	breq	.+6      	; 0x1212 <xTaskGenericCreate+0xc8>
    120c:	f7 01       	movw	r30, r14
    120e:	d1 83       	std	Z+1, r29	; 0x01
    1210:	c0 83       	st	Z, r28
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	0f 92       	push	r0
    1218:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <uxCurrentNumberOfTasks>
    121c:	8f 5f       	subi	r24, 0xFF	; 255
    121e:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <uxCurrentNumberOfTasks>
    1222:	80 91 0b 08 	lds	r24, 0x080B	; 0x80080b <pxCurrentTCB>
    1226:	90 91 0c 08 	lds	r25, 0x080C	; 0x80080c <pxCurrentTCB+0x1>
    122a:	89 2b       	or	r24, r25
    122c:	a9 f5       	brne	.+106    	; 0x1298 <xTaskGenericCreate+0x14e>
    122e:	d0 93 0c 08 	sts	0x080C, r29	; 0x80080c <pxCurrentTCB+0x1>
    1232:	c0 93 0b 08 	sts	0x080B, r28	; 0x80080b <pxCurrentTCB>
    1236:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <uxCurrentNumberOfTasks>
    123a:	81 30       	cpi	r24, 0x01	; 1
    123c:	e1 f5       	brne	.+120    	; 0x12b6 <xTaskGenericCreate+0x16c>
    123e:	87 ee       	ldi	r24, 0xE7	; 231
    1240:	97 e0       	ldi	r25, 0x07	; 7
    1242:	0e 94 9a 00 	call	0x134	; 0x134 <vListInitialise>
    1246:	80 ef       	ldi	r24, 0xF0	; 240
    1248:	97 e0       	ldi	r25, 0x07	; 7
    124a:	0e 94 9a 00 	call	0x134	; 0x134 <vListInitialise>
    124e:	89 ef       	ldi	r24, 0xF9	; 249
    1250:	97 e0       	ldi	r25, 0x07	; 7
    1252:	0e 94 9a 00 	call	0x134	; 0x134 <vListInitialise>
    1256:	82 e0       	ldi	r24, 0x02	; 2
    1258:	98 e0       	ldi	r25, 0x08	; 8
    125a:	0e 94 9a 00 	call	0x134	; 0x134 <vListInitialise>
    125e:	8e ed       	ldi	r24, 0xDE	; 222
    1260:	97 e0       	ldi	r25, 0x07	; 7
    1262:	0e 94 9a 00 	call	0x134	; 0x134 <vListInitialise>
    1266:	85 ed       	ldi	r24, 0xD5	; 213
    1268:	97 e0       	ldi	r25, 0x07	; 7
    126a:	0e 94 9a 00 	call	0x134	; 0x134 <vListInitialise>
    126e:	88 ec       	ldi	r24, 0xC8	; 200
    1270:	97 e0       	ldi	r25, 0x07	; 7
    1272:	0e 94 9a 00 	call	0x134	; 0x134 <vListInitialise>
    1276:	8f eb       	ldi	r24, 0xBF	; 191
    1278:	97 e0       	ldi	r25, 0x07	; 7
    127a:	0e 94 9a 00 	call	0x134	; 0x134 <vListInitialise>
    127e:	8e ed       	ldi	r24, 0xDE	; 222
    1280:	97 e0       	ldi	r25, 0x07	; 7
    1282:	90 93 d4 07 	sts	0x07D4, r25	; 0x8007d4 <pxDelayedTaskList+0x1>
    1286:	80 93 d3 07 	sts	0x07D3, r24	; 0x8007d3 <pxDelayedTaskList>
    128a:	85 ed       	ldi	r24, 0xD5	; 213
    128c:	97 e0       	ldi	r25, 0x07	; 7
    128e:	90 93 d2 07 	sts	0x07D2, r25	; 0x8007d2 <pxOverflowDelayedTaskList+0x1>
    1292:	80 93 d1 07 	sts	0x07D1, r24	; 0x8007d1 <pxOverflowDelayedTaskList>
    1296:	0f c0       	rjmp	.+30     	; 0x12b6 <xTaskGenericCreate+0x16c>
    1298:	80 91 b8 07 	lds	r24, 0x07B8	; 0x8007b8 <xSchedulerRunning>
    129c:	81 11       	cpse	r24, r1
    129e:	0b c0       	rjmp	.+22     	; 0x12b6 <xTaskGenericCreate+0x16c>
    12a0:	e0 91 0b 08 	lds	r30, 0x080B	; 0x80080b <pxCurrentTCB>
    12a4:	f0 91 0c 08 	lds	r31, 0x080C	; 0x80080c <pxCurrentTCB+0x1>
    12a8:	86 89       	ldd	r24, Z+22	; 0x16
    12aa:	08 17       	cp	r16, r24
    12ac:	20 f0       	brcs	.+8      	; 0x12b6 <xTaskGenericCreate+0x16c>
    12ae:	d0 93 0c 08 	sts	0x080C, r29	; 0x80080c <pxCurrentTCB+0x1>
    12b2:	c0 93 0b 08 	sts	0x080B, r28	; 0x80080b <pxCurrentTCB>
    12b6:	8e 89       	ldd	r24, Y+22	; 0x16
    12b8:	90 91 ba 07 	lds	r25, 0x07BA	; 0x8007ba <uxTopUsedPriority>
    12bc:	98 17       	cp	r25, r24
    12be:	10 f4       	brcc	.+4      	; 0x12c4 <xTaskGenericCreate+0x17a>
    12c0:	80 93 ba 07 	sts	0x07BA, r24	; 0x8007ba <uxTopUsedPriority>
    12c4:	90 91 b3 07 	lds	r25, 0x07B3	; 0x8007b3 <uxTaskNumber>
    12c8:	9f 5f       	subi	r25, 0xFF	; 255
    12ca:	90 93 b3 07 	sts	0x07B3, r25	; 0x8007b3 <uxTaskNumber>
    12ce:	90 91 b9 07 	lds	r25, 0x07B9	; 0x8007b9 <uxTopReadyPriority>
    12d2:	98 17       	cp	r25, r24
    12d4:	10 f4       	brcc	.+4      	; 0x12da <xTaskGenericCreate+0x190>
    12d6:	80 93 b9 07 	sts	0x07B9, r24	; 0x8007b9 <uxTopReadyPriority>
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	9c 01       	movw	r18, r24
    12de:	22 0f       	add	r18, r18
    12e0:	33 1f       	adc	r19, r19
    12e2:	22 0f       	add	r18, r18
    12e4:	33 1f       	adc	r19, r19
    12e6:	22 0f       	add	r18, r18
    12e8:	33 1f       	adc	r19, r19
    12ea:	82 0f       	add	r24, r18
    12ec:	93 1f       	adc	r25, r19
    12ee:	b6 01       	movw	r22, r12
    12f0:	89 51       	subi	r24, 0x19	; 25
    12f2:	98 4f       	sbci	r25, 0xF8	; 248
    12f4:	0e 94 ac 00 	call	0x158	; 0x158 <vListInsertEnd>
    12f8:	0f 90       	pop	r0
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	80 91 b8 07 	lds	r24, 0x07B8	; 0x8007b8 <xSchedulerRunning>
    1300:	88 23       	and	r24, r24
    1302:	51 f0       	breq	.+20     	; 0x1318 <xTaskGenericCreate+0x1ce>
    1304:	e0 91 0b 08 	lds	r30, 0x080B	; 0x80080b <pxCurrentTCB>
    1308:	f0 91 0c 08 	lds	r31, 0x080C	; 0x80080c <pxCurrentTCB+0x1>
    130c:	86 89       	ldd	r24, Z+22	; 0x16
    130e:	80 17       	cp	r24, r16
    1310:	28 f4       	brcc	.+10     	; 0x131c <xTaskGenericCreate+0x1d2>
    1312:	33 de       	rcall	.-922    	; 0xf7a <vPortYield>
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	09 c0       	rjmp	.+18     	; 0x132a <xTaskGenericCreate+0x1e0>
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	07 c0       	rjmp	.+14     	; 0x132a <xTaskGenericCreate+0x1e0>
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	05 c0       	rjmp	.+10     	; 0x132a <xTaskGenericCreate+0x1e0>
    1320:	d8 8e       	std	Y+24, r13	; 0x18
    1322:	cf 8a       	std	Y+23, r12	; 0x17
    1324:	c6 01       	movw	r24, r12
    1326:	3c cf       	rjmp	.-392    	; 0x11a0 <xTaskGenericCreate+0x56>
    1328:	8f ef       	ldi	r24, 0xFF	; 255
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	ff 90       	pop	r15
    1334:	ef 90       	pop	r14
    1336:	df 90       	pop	r13
    1338:	cf 90       	pop	r12
    133a:	bf 90       	pop	r11
    133c:	af 90       	pop	r10
    133e:	9f 90       	pop	r9
    1340:	8f 90       	pop	r8
    1342:	7f 90       	pop	r7
    1344:	6f 90       	pop	r6
    1346:	5f 90       	pop	r5
    1348:	4f 90       	pop	r4
    134a:	08 95       	ret

0000134c <vTaskStartScheduler>:
    134c:	af 92       	push	r10
    134e:	bf 92       	push	r11
    1350:	cf 92       	push	r12
    1352:	df 92       	push	r13
    1354:	ef 92       	push	r14
    1356:	ff 92       	push	r15
    1358:	0f 93       	push	r16
    135a:	a1 2c       	mov	r10, r1
    135c:	b1 2c       	mov	r11, r1
    135e:	c1 2c       	mov	r12, r1
    1360:	d1 2c       	mov	r13, r1
    1362:	e1 2c       	mov	r14, r1
    1364:	f1 2c       	mov	r15, r1
    1366:	00 e0       	ldi	r16, 0x00	; 0
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	45 e5       	ldi	r20, 0x55	; 85
    136e:	50 e0       	ldi	r21, 0x00	; 0
    1370:	60 eb       	ldi	r22, 0xB0	; 176
    1372:	71 e0       	ldi	r23, 0x01	; 1
    1374:	89 e3       	ldi	r24, 0x39	; 57
    1376:	9b e0       	ldi	r25, 0x0B	; 11
    1378:	e8 de       	rcall	.-560    	; 0x114a <xTaskGenericCreate>
    137a:	81 30       	cpi	r24, 0x01	; 1
    137c:	41 f4       	brne	.+16     	; 0x138e <vTaskStartScheduler+0x42>
    137e:	f8 94       	cli
    1380:	80 93 b8 07 	sts	0x07B8, r24	; 0x8007b8 <xSchedulerRunning>
    1384:	10 92 bc 07 	sts	0x07BC, r1	; 0x8007bc <xTickCount+0x1>
    1388:	10 92 bb 07 	sts	0x07BB, r1	; 0x8007bb <xTickCount>
    138c:	bc dd       	rcall	.-1160   	; 0xf06 <xPortStartScheduler>
    138e:	0f 91       	pop	r16
    1390:	ff 90       	pop	r15
    1392:	ef 90       	pop	r14
    1394:	df 90       	pop	r13
    1396:	cf 90       	pop	r12
    1398:	bf 90       	pop	r11
    139a:	af 90       	pop	r10
    139c:	08 95       	ret

0000139e <vTaskSuspendAll>:
    139e:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <uxSchedulerSuspended>
    13a2:	8f 5f       	subi	r24, 0xFF	; 255
    13a4:	80 93 b7 07 	sts	0x07B7, r24	; 0x8007b7 <uxSchedulerSuspended>
    13a8:	08 95       	ret

000013aa <vTaskIncrementTick>:
    13aa:	0f 93       	push	r16
    13ac:	1f 93       	push	r17
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <uxSchedulerSuspended>
    13b6:	81 11       	cpse	r24, r1
    13b8:	b2 c0       	rjmp	.+356    	; 0x151e <vTaskIncrementTick+0x174>
    13ba:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <xTickCount>
    13be:	90 91 bc 07 	lds	r25, 0x07BC	; 0x8007bc <xTickCount+0x1>
    13c2:	01 96       	adiw	r24, 0x01	; 1
    13c4:	90 93 bc 07 	sts	0x07BC, r25	; 0x8007bc <xTickCount+0x1>
    13c8:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <xTickCount>
    13cc:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <xTickCount>
    13d0:	90 91 bc 07 	lds	r25, 0x07BC	; 0x8007bc <xTickCount+0x1>
    13d4:	89 2b       	or	r24, r25
    13d6:	99 f5       	brne	.+102    	; 0x143e <vTaskIncrementTick+0x94>
    13d8:	80 91 d3 07 	lds	r24, 0x07D3	; 0x8007d3 <pxDelayedTaskList>
    13dc:	90 91 d4 07 	lds	r25, 0x07D4	; 0x8007d4 <pxDelayedTaskList+0x1>
    13e0:	20 91 d1 07 	lds	r18, 0x07D1	; 0x8007d1 <pxOverflowDelayedTaskList>
    13e4:	30 91 d2 07 	lds	r19, 0x07D2	; 0x8007d2 <pxOverflowDelayedTaskList+0x1>
    13e8:	30 93 d4 07 	sts	0x07D4, r19	; 0x8007d4 <pxDelayedTaskList+0x1>
    13ec:	20 93 d3 07 	sts	0x07D3, r18	; 0x8007d3 <pxDelayedTaskList>
    13f0:	90 93 d2 07 	sts	0x07D2, r25	; 0x8007d2 <pxOverflowDelayedTaskList+0x1>
    13f4:	80 93 d1 07 	sts	0x07D1, r24	; 0x8007d1 <pxOverflowDelayedTaskList>
    13f8:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <xNumOfOverflows>
    13fc:	8f 5f       	subi	r24, 0xFF	; 255
    13fe:	80 93 b4 07 	sts	0x07B4, r24	; 0x8007b4 <xNumOfOverflows>
    1402:	e0 91 d3 07 	lds	r30, 0x07D3	; 0x8007d3 <pxDelayedTaskList>
    1406:	f0 91 d4 07 	lds	r31, 0x07D4	; 0x8007d4 <pxDelayedTaskList+0x1>
    140a:	80 81       	ld	r24, Z
    140c:	81 11       	cpse	r24, r1
    140e:	07 c0       	rjmp	.+14     	; 0x141e <vTaskIncrementTick+0x74>
    1410:	8f ef       	ldi	r24, 0xFF	; 255
    1412:	9f ef       	ldi	r25, 0xFF	; 255
    1414:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <xNextTaskUnblockTime+0x1>
    1418:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <xNextTaskUnblockTime>
    141c:	10 c0       	rjmp	.+32     	; 0x143e <vTaskIncrementTick+0x94>
    141e:	e0 91 d3 07 	lds	r30, 0x07D3	; 0x8007d3 <pxDelayedTaskList>
    1422:	f0 91 d4 07 	lds	r31, 0x07D4	; 0x8007d4 <pxDelayedTaskList+0x1>
    1426:	05 80       	ldd	r0, Z+5	; 0x05
    1428:	f6 81       	ldd	r31, Z+6	; 0x06
    142a:	e0 2d       	mov	r30, r0
    142c:	06 80       	ldd	r0, Z+6	; 0x06
    142e:	f7 81       	ldd	r31, Z+7	; 0x07
    1430:	e0 2d       	mov	r30, r0
    1432:	82 81       	ldd	r24, Z+2	; 0x02
    1434:	93 81       	ldd	r25, Z+3	; 0x03
    1436:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <xNextTaskUnblockTime+0x1>
    143a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <xNextTaskUnblockTime>
    143e:	20 91 bb 07 	lds	r18, 0x07BB	; 0x8007bb <xTickCount>
    1442:	30 91 bc 07 	lds	r19, 0x07BC	; 0x8007bc <xTickCount+0x1>
    1446:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <xNextTaskUnblockTime>
    144a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <xNextTaskUnblockTime+0x1>
    144e:	28 17       	cp	r18, r24
    1450:	39 07       	cpc	r19, r25
    1452:	08 f4       	brcc	.+2      	; 0x1456 <vTaskIncrementTick+0xac>
    1454:	69 c0       	rjmp	.+210    	; 0x1528 <vTaskIncrementTick+0x17e>
    1456:	e0 91 d3 07 	lds	r30, 0x07D3	; 0x8007d3 <pxDelayedTaskList>
    145a:	f0 91 d4 07 	lds	r31, 0x07D4	; 0x8007d4 <pxDelayedTaskList+0x1>
    145e:	80 81       	ld	r24, Z
    1460:	88 23       	and	r24, r24
    1462:	99 f0       	breq	.+38     	; 0x148a <vTaskIncrementTick+0xe0>
    1464:	e0 91 d3 07 	lds	r30, 0x07D3	; 0x8007d3 <pxDelayedTaskList>
    1468:	f0 91 d4 07 	lds	r31, 0x07D4	; 0x8007d4 <pxDelayedTaskList+0x1>
    146c:	05 80       	ldd	r0, Z+5	; 0x05
    146e:	f6 81       	ldd	r31, Z+6	; 0x06
    1470:	e0 2d       	mov	r30, r0
    1472:	c6 81       	ldd	r28, Z+6	; 0x06
    1474:	d7 81       	ldd	r29, Z+7	; 0x07
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	9b 81       	ldd	r25, Y+3	; 0x03
    147a:	20 91 bb 07 	lds	r18, 0x07BB	; 0x8007bb <xTickCount>
    147e:	30 91 bc 07 	lds	r19, 0x07BC	; 0x8007bc <xTickCount+0x1>
    1482:	28 17       	cp	r18, r24
    1484:	39 07       	cpc	r19, r25
    1486:	f8 f4       	brcc	.+62     	; 0x14c6 <vTaskIncrementTick+0x11c>
    1488:	19 c0       	rjmp	.+50     	; 0x14bc <vTaskIncrementTick+0x112>
    148a:	8f ef       	ldi	r24, 0xFF	; 255
    148c:	9f ef       	ldi	r25, 0xFF	; 255
    148e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <xNextTaskUnblockTime+0x1>
    1492:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <xNextTaskUnblockTime>
    1496:	48 c0       	rjmp	.+144    	; 0x1528 <vTaskIncrementTick+0x17e>
    1498:	e0 91 d3 07 	lds	r30, 0x07D3	; 0x8007d3 <pxDelayedTaskList>
    149c:	f0 91 d4 07 	lds	r31, 0x07D4	; 0x8007d4 <pxDelayedTaskList+0x1>
    14a0:	05 80       	ldd	r0, Z+5	; 0x05
    14a2:	f6 81       	ldd	r31, Z+6	; 0x06
    14a4:	e0 2d       	mov	r30, r0
    14a6:	c6 81       	ldd	r28, Z+6	; 0x06
    14a8:	d7 81       	ldd	r29, Z+7	; 0x07
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	9b 81       	ldd	r25, Y+3	; 0x03
    14ae:	20 91 bb 07 	lds	r18, 0x07BB	; 0x8007bb <xTickCount>
    14b2:	30 91 bc 07 	lds	r19, 0x07BC	; 0x8007bc <xTickCount+0x1>
    14b6:	28 17       	cp	r18, r24
    14b8:	39 07       	cpc	r19, r25
    14ba:	28 f4       	brcc	.+10     	; 0x14c6 <vTaskIncrementTick+0x11c>
    14bc:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <xNextTaskUnblockTime+0x1>
    14c0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <xNextTaskUnblockTime>
    14c4:	31 c0       	rjmp	.+98     	; 0x1528 <vTaskIncrementTick+0x17e>
    14c6:	8e 01       	movw	r16, r28
    14c8:	0e 5f       	subi	r16, 0xFE	; 254
    14ca:	1f 4f       	sbci	r17, 0xFF	; 255
    14cc:	c8 01       	movw	r24, r16
    14ce:	0e 94 0e 01 	call	0x21c	; 0x21c <vListRemove>
    14d2:	8c 89       	ldd	r24, Y+20	; 0x14
    14d4:	9d 89       	ldd	r25, Y+21	; 0x15
    14d6:	89 2b       	or	r24, r25
    14d8:	21 f0       	breq	.+8      	; 0x14e2 <vTaskIncrementTick+0x138>
    14da:	ce 01       	movw	r24, r28
    14dc:	0c 96       	adiw	r24, 0x0c	; 12
    14de:	0e 94 0e 01 	call	0x21c	; 0x21c <vListRemove>
    14e2:	8e 89       	ldd	r24, Y+22	; 0x16
    14e4:	90 91 b9 07 	lds	r25, 0x07B9	; 0x8007b9 <uxTopReadyPriority>
    14e8:	98 17       	cp	r25, r24
    14ea:	10 f4       	brcc	.+4      	; 0x14f0 <vTaskIncrementTick+0x146>
    14ec:	80 93 b9 07 	sts	0x07B9, r24	; 0x8007b9 <uxTopReadyPriority>
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	9c 01       	movw	r18, r24
    14f4:	22 0f       	add	r18, r18
    14f6:	33 1f       	adc	r19, r19
    14f8:	22 0f       	add	r18, r18
    14fa:	33 1f       	adc	r19, r19
    14fc:	22 0f       	add	r18, r18
    14fe:	33 1f       	adc	r19, r19
    1500:	82 0f       	add	r24, r18
    1502:	93 1f       	adc	r25, r19
    1504:	b8 01       	movw	r22, r16
    1506:	89 51       	subi	r24, 0x19	; 25
    1508:	98 4f       	sbci	r25, 0xF8	; 248
    150a:	0e 94 ac 00 	call	0x158	; 0x158 <vListInsertEnd>
    150e:	e0 91 d3 07 	lds	r30, 0x07D3	; 0x8007d3 <pxDelayedTaskList>
    1512:	f0 91 d4 07 	lds	r31, 0x07D4	; 0x8007d4 <pxDelayedTaskList+0x1>
    1516:	80 81       	ld	r24, Z
    1518:	81 11       	cpse	r24, r1
    151a:	be cf       	rjmp	.-132    	; 0x1498 <vTaskIncrementTick+0xee>
    151c:	b6 cf       	rjmp	.-148    	; 0x148a <vTaskIncrementTick+0xe0>
    151e:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <uxMissedTicks>
    1522:	8f 5f       	subi	r24, 0xFF	; 255
    1524:	80 93 b6 07 	sts	0x07B6, r24	; 0x8007b6 <uxMissedTicks>
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	1f 91       	pop	r17
    152e:	0f 91       	pop	r16
    1530:	08 95       	ret

00001532 <xTaskResumeAll>:
    1532:	cf 92       	push	r12
    1534:	df 92       	push	r13
    1536:	ef 92       	push	r14
    1538:	ff 92       	push	r15
    153a:	0f 93       	push	r16
    153c:	1f 93       	push	r17
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	0f 92       	push	r0
    1548:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <uxSchedulerSuspended>
    154c:	81 50       	subi	r24, 0x01	; 1
    154e:	80 93 b7 07 	sts	0x07B7, r24	; 0x8007b7 <uxSchedulerSuspended>
    1552:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <uxSchedulerSuspended>
    1556:	81 11       	cpse	r24, r1
    1558:	62 c0       	rjmp	.+196    	; 0x161e <xTaskResumeAll+0xec>
    155a:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <uxCurrentNumberOfTasks>
    155e:	81 11       	cpse	r24, r1
    1560:	32 c0       	rjmp	.+100    	; 0x15c6 <xTaskResumeAll+0x94>
    1562:	60 c0       	rjmp	.+192    	; 0x1624 <xTaskResumeAll+0xf2>
    1564:	d7 01       	movw	r26, r14
    1566:	15 96       	adiw	r26, 0x05	; 5
    1568:	ed 91       	ld	r30, X+
    156a:	fc 91       	ld	r31, X
    156c:	16 97       	sbiw	r26, 0x06	; 6
    156e:	c6 81       	ldd	r28, Z+6	; 0x06
    1570:	d7 81       	ldd	r29, Z+7	; 0x07
    1572:	ce 01       	movw	r24, r28
    1574:	0c 96       	adiw	r24, 0x0c	; 12
    1576:	0e 94 0e 01 	call	0x21c	; 0x21c <vListRemove>
    157a:	8e 01       	movw	r16, r28
    157c:	0e 5f       	subi	r16, 0xFE	; 254
    157e:	1f 4f       	sbci	r17, 0xFF	; 255
    1580:	c8 01       	movw	r24, r16
    1582:	0e 94 0e 01 	call	0x21c	; 0x21c <vListRemove>
    1586:	8e 89       	ldd	r24, Y+22	; 0x16
    1588:	90 91 b9 07 	lds	r25, 0x07B9	; 0x8007b9 <uxTopReadyPriority>
    158c:	98 17       	cp	r25, r24
    158e:	10 f4       	brcc	.+4      	; 0x1594 <xTaskResumeAll+0x62>
    1590:	80 93 b9 07 	sts	0x07B9, r24	; 0x8007b9 <uxTopReadyPriority>
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	9c 01       	movw	r18, r24
    1598:	22 0f       	add	r18, r18
    159a:	33 1f       	adc	r19, r19
    159c:	22 0f       	add	r18, r18
    159e:	33 1f       	adc	r19, r19
    15a0:	22 0f       	add	r18, r18
    15a2:	33 1f       	adc	r19, r19
    15a4:	82 0f       	add	r24, r18
    15a6:	93 1f       	adc	r25, r19
    15a8:	b8 01       	movw	r22, r16
    15aa:	89 51       	subi	r24, 0x19	; 25
    15ac:	98 4f       	sbci	r25, 0xF8	; 248
    15ae:	0e 94 ac 00 	call	0x158	; 0x158 <vListInsertEnd>
    15b2:	e0 91 0b 08 	lds	r30, 0x080B	; 0x80080b <pxCurrentTCB>
    15b6:	f0 91 0c 08 	lds	r31, 0x080C	; 0x80080c <pxCurrentTCB+0x1>
    15ba:	9e 89       	ldd	r25, Y+22	; 0x16
    15bc:	86 89       	ldd	r24, Z+22	; 0x16
    15be:	98 17       	cp	r25, r24
    15c0:	58 f0       	brcs	.+22     	; 0x15d8 <xTaskResumeAll+0xa6>
    15c2:	dc 2c       	mov	r13, r12
    15c4:	09 c0       	rjmp	.+18     	; 0x15d8 <xTaskResumeAll+0xa6>
    15c6:	d1 2c       	mov	r13, r1
    15c8:	0f 2e       	mov	r0, r31
    15ca:	f8 ec       	ldi	r31, 0xC8	; 200
    15cc:	ef 2e       	mov	r14, r31
    15ce:	f7 e0       	ldi	r31, 0x07	; 7
    15d0:	ff 2e       	mov	r15, r31
    15d2:	f0 2d       	mov	r31, r0
    15d4:	cc 24       	eor	r12, r12
    15d6:	c3 94       	inc	r12
    15d8:	f7 01       	movw	r30, r14
    15da:	80 81       	ld	r24, Z
    15dc:	81 11       	cpse	r24, r1
    15de:	c2 cf       	rjmp	.-124    	; 0x1564 <xTaskResumeAll+0x32>
    15e0:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <uxMissedTicks>
    15e4:	88 23       	and	r24, r24
    15e6:	79 f0       	breq	.+30     	; 0x1606 <xTaskResumeAll+0xd4>
    15e8:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <uxMissedTicks>
    15ec:	88 23       	and	r24, r24
    15ee:	91 f0       	breq	.+36     	; 0x1614 <xTaskResumeAll+0xe2>
    15f0:	dc de       	rcall	.-584    	; 0x13aa <vTaskIncrementTick>
    15f2:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <uxMissedTicks>
    15f6:	81 50       	subi	r24, 0x01	; 1
    15f8:	80 93 b6 07 	sts	0x07B6, r24	; 0x8007b6 <uxMissedTicks>
    15fc:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <uxMissedTicks>
    1600:	81 11       	cpse	r24, r1
    1602:	f6 cf       	rjmp	.-20     	; 0x15f0 <xTaskResumeAll+0xbe>
    1604:	07 c0       	rjmp	.+14     	; 0x1614 <xTaskResumeAll+0xe2>
    1606:	f1 e0       	ldi	r31, 0x01	; 1
    1608:	df 16       	cp	r13, r31
    160a:	21 f0       	breq	.+8      	; 0x1614 <xTaskResumeAll+0xe2>
    160c:	80 91 b5 07 	lds	r24, 0x07B5	; 0x8007b5 <xMissedYield>
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	39 f4       	brne	.+14     	; 0x1622 <xTaskResumeAll+0xf0>
    1614:	10 92 b5 07 	sts	0x07B5, r1	; 0x8007b5 <xMissedYield>
    1618:	b0 dc       	rcall	.-1696   	; 0xf7a <vPortYield>
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	03 c0       	rjmp	.+6      	; 0x1624 <xTaskResumeAll+0xf2>
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	01 c0       	rjmp	.+2      	; 0x1624 <xTaskResumeAll+0xf2>
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	0f 90       	pop	r0
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	1f 91       	pop	r17
    162e:	0f 91       	pop	r16
    1630:	ff 90       	pop	r15
    1632:	ef 90       	pop	r14
    1634:	df 90       	pop	r13
    1636:	cf 90       	pop	r12
    1638:	08 95       	ret

0000163a <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    163a:	cf 93       	push	r28
    163c:	df 93       	push	r29
    163e:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    1640:	89 2b       	or	r24, r25
    1642:	99 f0       	breq	.+38     	; 0x166a <vTaskDelay+0x30>
		{
			vTaskSuspendAll();
    1644:	ac de       	rcall	.-680    	; 0x139e <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1646:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <xTickCount>
    164a:	90 91 bc 07 	lds	r25, 0x07BC	; 0x8007bc <xTickCount+0x1>
    164e:	c8 0f       	add	r28, r24
    1650:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1652:	80 91 0b 08 	lds	r24, 0x080B	; 0x80080b <pxCurrentTCB>
    1656:	90 91 0c 08 	lds	r25, 0x080C	; 0x80080c <pxCurrentTCB+0x1>
    165a:	02 96       	adiw	r24, 0x02	; 2
    165c:	0e 94 0e 01 	call	0x21c	; 0x21c <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1660:	ce 01       	movw	r24, r28
			}
			xAlreadyYielded = xTaskResumeAll();
    1662:	3e dd       	rcall	.-1412   	; 0x10e0 <prvAddCurrentTaskToDelayedList>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1664:	66 df       	rcall	.-308    	; 0x1532 <xTaskResumeAll>
    1666:	81 11       	cpse	r24, r1
		{
			portYIELD_WITHIN_API();
    1668:	01 c0       	rjmp	.+2      	; 0x166c <vTaskDelay+0x32>
    166a:	87 dc       	rcall	.-1778   	; 0xf7a <vPortYield>
		}
	}
    166c:	df 91       	pop	r29
    166e:	cf 91       	pop	r28
    1670:	08 95       	ret

00001672 <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1672:	0f 2e       	mov	r0, r31
    1674:	ff eb       	ldi	r31, 0xBF	; 191
    1676:	ef 2e       	mov	r14, r31
    1678:	f7 e0       	ldi	r31, 0x07	; 7
    167a:	ff 2e       	mov	r15, r31
    167c:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    167e:	c7 ee       	ldi	r28, 0xE7	; 231
    1680:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    1682:	80 91 be 07 	lds	r24, 0x07BE	; 0x8007be <uxTasksDeleted>
    1686:	88 23       	and	r24, r24
    1688:	41 f1       	breq	.+80     	; 0x16da <prvIdleTask+0x68>
		{
			vTaskSuspendAll();
    168a:	89 de       	rcall	.-750    	; 0x139e <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    168c:	d7 01       	movw	r26, r14
			xTaskResumeAll();
    168e:	1c 91       	ld	r17, X
    1690:	50 df       	rcall	.-352    	; 0x1532 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    1692:	11 23       	and	r17, r17
    1694:	11 f1       	breq	.+68     	; 0x16da <prvIdleTask+0x68>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    169c:	d7 01       	movw	r26, r14
    169e:	15 96       	adiw	r26, 0x05	; 5
    16a0:	ed 91       	ld	r30, X+
    16a2:	fc 91       	ld	r31, X
    16a4:	16 97       	sbiw	r26, 0x06	; 6
    16a6:	06 81       	ldd	r16, Z+6	; 0x06
    16a8:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
    16aa:	c8 01       	movw	r24, r16
    16ac:	02 96       	adiw	r24, 0x02	; 2
    16ae:	0e 94 0e 01 	call	0x21c	; 0x21c <vListRemove>
					--uxCurrentNumberOfTasks;
    16b2:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <uxCurrentNumberOfTasks>
    16b6:	81 50       	subi	r24, 0x01	; 1
    16b8:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
    16bc:	80 91 be 07 	lds	r24, 0x07BE	; 0x8007be <uxTasksDeleted>
    16c0:	81 50       	subi	r24, 0x01	; 1
    16c2:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
    16c6:	0f 90       	pop	r0
    16c8:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    16ca:	f8 01       	movw	r30, r16
    16cc:	87 89       	ldd	r24, Z+23	; 0x17
    16ce:	90 8d       	ldd	r25, Z+24	; 0x18
    16d0:	0e 94 99 00 	call	0x132	; 0x132 <vPortFree>
		vPortFree( pxTCB );
    16d4:	c8 01       	movw	r24, r16
    16d6:	0e 94 99 00 	call	0x132	; 0x132 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    16da:	88 81       	ld	r24, Y
    16dc:	82 30       	cpi	r24, 0x02	; 2
			{
				taskYIELD();
    16de:	88 f2       	brcs	.-94     	; 0x1682 <prvIdleTask+0x10>
    16e0:	4c dc       	rcall	.-1896   	; 0xf7a <vPortYield>
    16e2:	cf cf       	rjmp	.-98     	; 0x1682 <prvIdleTask+0x10>

000016e4 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    16e4:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <uxSchedulerSuspended>
    16e8:	81 11       	cpse	r24, r1
    16ea:	13 c0       	rjmp	.+38     	; 0x1712 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    16ec:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <uxTopReadyPriority>
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	fc 01       	movw	r30, r24
    16f4:	ee 0f       	add	r30, r30
    16f6:	ff 1f       	adc	r31, r31
    16f8:	ee 0f       	add	r30, r30
    16fa:	ff 1f       	adc	r31, r31
    16fc:	ee 0f       	add	r30, r30
    16fe:	ff 1f       	adc	r31, r31
    1700:	8e 0f       	add	r24, r30
    1702:	9f 1f       	adc	r25, r31
    1704:	fc 01       	movw	r30, r24
    1706:	e9 51       	subi	r30, 0x19	; 25
    1708:	f8 4f       	sbci	r31, 0xF8	; 248
    170a:	80 81       	ld	r24, Z
    170c:	88 23       	and	r24, r24
    170e:	29 f0       	breq	.+10     	; 0x171a <vTaskSwitchContext+0x36>
    1710:	1b c0       	rjmp	.+54     	; 0x1748 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	80 93 b5 07 	sts	0x07B5, r24	; 0x8007b5 <xMissedYield>
    1718:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    171a:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <uxTopReadyPriority>
    171e:	81 50       	subi	r24, 0x01	; 1
    1720:	80 93 b9 07 	sts	0x07B9, r24	; 0x8007b9 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1724:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <uxTopReadyPriority>
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	fc 01       	movw	r30, r24
    172c:	ee 0f       	add	r30, r30
    172e:	ff 1f       	adc	r31, r31
    1730:	ee 0f       	add	r30, r30
    1732:	ff 1f       	adc	r31, r31
    1734:	ee 0f       	add	r30, r30
    1736:	ff 1f       	adc	r31, r31
    1738:	8e 0f       	add	r24, r30
    173a:	9f 1f       	adc	r25, r31
    173c:	fc 01       	movw	r30, r24
    173e:	e9 51       	subi	r30, 0x19	; 25
    1740:	f8 4f       	sbci	r31, 0xF8	; 248
    1742:	80 81       	ld	r24, Z
    1744:	88 23       	and	r24, r24
    1746:	49 f3       	breq	.-46     	; 0x171a <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    1748:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <uxTopReadyPriority>
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	9c 01       	movw	r18, r24
    1750:	22 0f       	add	r18, r18
    1752:	33 1f       	adc	r19, r19
    1754:	22 0f       	add	r18, r18
    1756:	33 1f       	adc	r19, r19
    1758:	22 0f       	add	r18, r18
    175a:	33 1f       	adc	r19, r19
    175c:	28 0f       	add	r18, r24
    175e:	39 1f       	adc	r19, r25
    1760:	d9 01       	movw	r26, r18
    1762:	a9 51       	subi	r26, 0x19	; 25
    1764:	b8 4f       	sbci	r27, 0xF8	; 248
    1766:	11 96       	adiw	r26, 0x01	; 1
    1768:	ed 91       	ld	r30, X+
    176a:	fc 91       	ld	r31, X
    176c:	12 97       	sbiw	r26, 0x02	; 2
    176e:	02 80       	ldd	r0, Z+2	; 0x02
    1770:	f3 81       	ldd	r31, Z+3	; 0x03
    1772:	e0 2d       	mov	r30, r0
    1774:	12 96       	adiw	r26, 0x02	; 2
    1776:	fc 93       	st	X, r31
    1778:	ee 93       	st	-X, r30
    177a:	11 97       	sbiw	r26, 0x01	; 1
    177c:	26 51       	subi	r18, 0x16	; 22
    177e:	38 4f       	sbci	r19, 0xF8	; 248
    1780:	e2 17       	cp	r30, r18
    1782:	f3 07       	cpc	r31, r19
    1784:	29 f4       	brne	.+10     	; 0x1790 <vTaskSwitchContext+0xac>
    1786:	22 81       	ldd	r18, Z+2	; 0x02
    1788:	33 81       	ldd	r19, Z+3	; 0x03
    178a:	fd 01       	movw	r30, r26
    178c:	32 83       	std	Z+2, r19	; 0x02
    178e:	21 83       	std	Z+1, r18	; 0x01
    1790:	fc 01       	movw	r30, r24
    1792:	ee 0f       	add	r30, r30
    1794:	ff 1f       	adc	r31, r31
    1796:	ee 0f       	add	r30, r30
    1798:	ff 1f       	adc	r31, r31
    179a:	ee 0f       	add	r30, r30
    179c:	ff 1f       	adc	r31, r31
    179e:	8e 0f       	add	r24, r30
    17a0:	9f 1f       	adc	r25, r31
    17a2:	fc 01       	movw	r30, r24
    17a4:	e9 51       	subi	r30, 0x19	; 25
    17a6:	f8 4f       	sbci	r31, 0xF8	; 248
    17a8:	01 80       	ldd	r0, Z+1	; 0x01
    17aa:	f2 81       	ldd	r31, Z+2	; 0x02
    17ac:	e0 2d       	mov	r30, r0
    17ae:	86 81       	ldd	r24, Z+6	; 0x06
    17b0:	97 81       	ldd	r25, Z+7	; 0x07
    17b2:	90 93 0c 08 	sts	0x080C, r25	; 0x80080c <pxCurrentTCB+0x1>
    17b6:	80 93 0b 08 	sts	0x080B, r24	; 0x80080b <pxCurrentTCB>
    17ba:	08 95       	ret

000017bc <__divmodhi4>:
    17bc:	97 fb       	bst	r25, 7
    17be:	07 2e       	mov	r0, r23
    17c0:	16 f4       	brtc	.+4      	; 0x17c6 <__divmodhi4+0xa>
    17c2:	00 94       	com	r0
    17c4:	06 d0       	rcall	.+12     	; 0x17d2 <__divmodhi4_neg1>
    17c6:	77 fd       	sbrc	r23, 7
    17c8:	08 d0       	rcall	.+16     	; 0x17da <__divmodhi4_neg2>
    17ca:	14 d0       	rcall	.+40     	; 0x17f4 <__udivmodhi4>
    17cc:	07 fc       	sbrc	r0, 7
    17ce:	05 d0       	rcall	.+10     	; 0x17da <__divmodhi4_neg2>
    17d0:	3e f4       	brtc	.+14     	; 0x17e0 <__divmodhi4_exit>

000017d2 <__divmodhi4_neg1>:
    17d2:	90 95       	com	r25
    17d4:	81 95       	neg	r24
    17d6:	9f 4f       	sbci	r25, 0xFF	; 255
    17d8:	08 95       	ret

000017da <__divmodhi4_neg2>:
    17da:	70 95       	com	r23
    17dc:	61 95       	neg	r22
    17de:	7f 4f       	sbci	r23, 0xFF	; 255

000017e0 <__divmodhi4_exit>:
    17e0:	08 95       	ret

000017e2 <__tablejump2__>:
    17e2:	ee 0f       	add	r30, r30
    17e4:	ff 1f       	adc	r31, r31
    17e6:	00 24       	eor	r0, r0
    17e8:	00 1c       	adc	r0, r0
    17ea:	0b be       	out	0x3b, r0	; 59
    17ec:	07 90       	elpm	r0, Z+
    17ee:	f6 91       	elpm	r31, Z
    17f0:	e0 2d       	mov	r30, r0
    17f2:	09 94       	ijmp

000017f4 <__udivmodhi4>:
    17f4:	aa 1b       	sub	r26, r26
    17f6:	bb 1b       	sub	r27, r27
    17f8:	51 e1       	ldi	r21, 0x11	; 17
    17fa:	07 c0       	rjmp	.+14     	; 0x180a <__udivmodhi4_ep>

000017fc <__udivmodhi4_loop>:
    17fc:	aa 1f       	adc	r26, r26
    17fe:	bb 1f       	adc	r27, r27
    1800:	a6 17       	cp	r26, r22
    1802:	b7 07       	cpc	r27, r23
    1804:	10 f0       	brcs	.+4      	; 0x180a <__udivmodhi4_ep>
    1806:	a6 1b       	sub	r26, r22
    1808:	b7 0b       	sbc	r27, r23

0000180a <__udivmodhi4_ep>:
    180a:	88 1f       	adc	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	5a 95       	dec	r21
    1810:	a9 f7       	brne	.-22     	; 0x17fc <__udivmodhi4_loop>
    1812:	80 95       	com	r24
    1814:	90 95       	com	r25
    1816:	bc 01       	movw	r22, r24
    1818:	cd 01       	movw	r24, r26
    181a:	08 95       	ret

0000181c <do_rand>:
    181c:	8f 92       	push	r8
    181e:	9f 92       	push	r9
    1820:	af 92       	push	r10
    1822:	bf 92       	push	r11
    1824:	cf 92       	push	r12
    1826:	df 92       	push	r13
    1828:	ef 92       	push	r14
    182a:	ff 92       	push	r15
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	ec 01       	movw	r28, r24
    1832:	68 81       	ld	r22, Y
    1834:	79 81       	ldd	r23, Y+1	; 0x01
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	9b 81       	ldd	r25, Y+3	; 0x03
    183a:	61 15       	cp	r22, r1
    183c:	71 05       	cpc	r23, r1
    183e:	81 05       	cpc	r24, r1
    1840:	91 05       	cpc	r25, r1
    1842:	21 f4       	brne	.+8      	; 0x184c <do_rand+0x30>
    1844:	64 e2       	ldi	r22, 0x24	; 36
    1846:	79 ed       	ldi	r23, 0xD9	; 217
    1848:	8b e5       	ldi	r24, 0x5B	; 91
    184a:	97 e0       	ldi	r25, 0x07	; 7
    184c:	2d e1       	ldi	r18, 0x1D	; 29
    184e:	33 ef       	ldi	r19, 0xF3	; 243
    1850:	41 e0       	ldi	r20, 0x01	; 1
    1852:	50 e0       	ldi	r21, 0x00	; 0
    1854:	4e d0       	rcall	.+156    	; 0x18f2 <__divmodsi4>
    1856:	49 01       	movw	r8, r18
    1858:	5a 01       	movw	r10, r20
    185a:	9b 01       	movw	r18, r22
    185c:	ac 01       	movw	r20, r24
    185e:	a7 ea       	ldi	r26, 0xA7	; 167
    1860:	b1 e4       	ldi	r27, 0x41	; 65
    1862:	63 d0       	rcall	.+198    	; 0x192a <__muluhisi3>
    1864:	6b 01       	movw	r12, r22
    1866:	7c 01       	movw	r14, r24
    1868:	ac ee       	ldi	r26, 0xEC	; 236
    186a:	b4 ef       	ldi	r27, 0xF4	; 244
    186c:	a5 01       	movw	r20, r10
    186e:	94 01       	movw	r18, r8
    1870:	68 d0       	rcall	.+208    	; 0x1942 <__mulohisi3>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	8c 0d       	add	r24, r12
    1878:	9d 1d       	adc	r25, r13
    187a:	ae 1d       	adc	r26, r14
    187c:	bf 1d       	adc	r27, r15
    187e:	b7 ff       	sbrs	r27, 7
    1880:	03 c0       	rjmp	.+6      	; 0x1888 <do_rand+0x6c>
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	a1 09       	sbc	r26, r1
    1886:	b0 48       	sbci	r27, 0x80	; 128
    1888:	88 83       	st	Y, r24
    188a:	99 83       	std	Y+1, r25	; 0x01
    188c:	aa 83       	std	Y+2, r26	; 0x02
    188e:	bb 83       	std	Y+3, r27	; 0x03
    1890:	9f 77       	andi	r25, 0x7F	; 127
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	ff 90       	pop	r15
    1898:	ef 90       	pop	r14
    189a:	df 90       	pop	r13
    189c:	cf 90       	pop	r12
    189e:	bf 90       	pop	r11
    18a0:	af 90       	pop	r10
    18a2:	9f 90       	pop	r9
    18a4:	8f 90       	pop	r8
    18a6:	08 95       	ret

000018a8 <rand_r>:
    18a8:	b9 cf       	rjmp	.-142    	; 0x181c <do_rand>

000018aa <rand>:
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	91 e0       	ldi	r25, 0x01	; 1
    18ae:	b6 cf       	rjmp	.-148    	; 0x181c <do_rand>

000018b0 <srand>:
    18b0:	a0 e0       	ldi	r26, 0x00	; 0
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    18b8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    18bc:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    18c0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    18c4:	08 95       	ret

000018c6 <memset>:
    18c6:	dc 01       	movw	r26, r24
    18c8:	01 c0       	rjmp	.+2      	; 0x18cc <memset+0x6>
    18ca:	6d 93       	st	X+, r22
    18cc:	41 50       	subi	r20, 0x01	; 1
    18ce:	50 40       	sbci	r21, 0x00	; 0
    18d0:	e0 f7       	brcc	.-8      	; 0x18ca <memset+0x4>
    18d2:	08 95       	ret

000018d4 <strncpy>:
    18d4:	fb 01       	movw	r30, r22
    18d6:	dc 01       	movw	r26, r24
    18d8:	41 50       	subi	r20, 0x01	; 1
    18da:	50 40       	sbci	r21, 0x00	; 0
    18dc:	48 f0       	brcs	.+18     	; 0x18f0 <strncpy+0x1c>
    18de:	01 90       	ld	r0, Z+
    18e0:	0d 92       	st	X+, r0
    18e2:	00 20       	and	r0, r0
    18e4:	c9 f7       	brne	.-14     	; 0x18d8 <strncpy+0x4>
    18e6:	01 c0       	rjmp	.+2      	; 0x18ea <strncpy+0x16>
    18e8:	1d 92       	st	X+, r1
    18ea:	41 50       	subi	r20, 0x01	; 1
    18ec:	50 40       	sbci	r21, 0x00	; 0
    18ee:	e0 f7       	brcc	.-8      	; 0x18e8 <strncpy+0x14>
    18f0:	08 95       	ret

000018f2 <__divmodsi4>:
    18f2:	05 2e       	mov	r0, r21
    18f4:	97 fb       	bst	r25, 7
    18f6:	16 f4       	brtc	.+4      	; 0x18fc <__divmodsi4+0xa>
    18f8:	00 94       	com	r0
    18fa:	0f d0       	rcall	.+30     	; 0x191a <__negsi2>
    18fc:	57 fd       	sbrc	r21, 7
    18fe:	05 d0       	rcall	.+10     	; 0x190a <__divmodsi4_neg2>
    1900:	24 d0       	rcall	.+72     	; 0x194a <__udivmodsi4>
    1902:	07 fc       	sbrc	r0, 7
    1904:	02 d0       	rcall	.+4      	; 0x190a <__divmodsi4_neg2>
    1906:	46 f4       	brtc	.+16     	; 0x1918 <__divmodsi4_exit>
    1908:	08 c0       	rjmp	.+16     	; 0x191a <__negsi2>

0000190a <__divmodsi4_neg2>:
    190a:	50 95       	com	r21
    190c:	40 95       	com	r20
    190e:	30 95       	com	r19
    1910:	21 95       	neg	r18
    1912:	3f 4f       	sbci	r19, 0xFF	; 255
    1914:	4f 4f       	sbci	r20, 0xFF	; 255
    1916:	5f 4f       	sbci	r21, 0xFF	; 255

00001918 <__divmodsi4_exit>:
    1918:	08 95       	ret

0000191a <__negsi2>:
    191a:	90 95       	com	r25
    191c:	80 95       	com	r24
    191e:	70 95       	com	r23
    1920:	61 95       	neg	r22
    1922:	7f 4f       	sbci	r23, 0xFF	; 255
    1924:	8f 4f       	sbci	r24, 0xFF	; 255
    1926:	9f 4f       	sbci	r25, 0xFF	; 255
    1928:	08 95       	ret

0000192a <__muluhisi3>:
    192a:	31 d0       	rcall	.+98     	; 0x198e <__umulhisi3>
    192c:	a5 9f       	mul	r26, r21
    192e:	90 0d       	add	r25, r0
    1930:	b4 9f       	mul	r27, r20
    1932:	90 0d       	add	r25, r0
    1934:	a4 9f       	mul	r26, r20
    1936:	80 0d       	add	r24, r0
    1938:	91 1d       	adc	r25, r1
    193a:	11 24       	eor	r1, r1
    193c:	08 95       	ret

0000193e <__mulshisi3>:
    193e:	b7 ff       	sbrs	r27, 7
    1940:	f4 cf       	rjmp	.-24     	; 0x192a <__muluhisi3>

00001942 <__mulohisi3>:
    1942:	f3 df       	rcall	.-26     	; 0x192a <__muluhisi3>
    1944:	82 1b       	sub	r24, r18
    1946:	93 0b       	sbc	r25, r19
    1948:	08 95       	ret

0000194a <__udivmodsi4>:
    194a:	a1 e2       	ldi	r26, 0x21	; 33
    194c:	1a 2e       	mov	r1, r26
    194e:	aa 1b       	sub	r26, r26
    1950:	bb 1b       	sub	r27, r27
    1952:	fd 01       	movw	r30, r26
    1954:	0d c0       	rjmp	.+26     	; 0x1970 <__udivmodsi4_ep>

00001956 <__udivmodsi4_loop>:
    1956:	aa 1f       	adc	r26, r26
    1958:	bb 1f       	adc	r27, r27
    195a:	ee 1f       	adc	r30, r30
    195c:	ff 1f       	adc	r31, r31
    195e:	a2 17       	cp	r26, r18
    1960:	b3 07       	cpc	r27, r19
    1962:	e4 07       	cpc	r30, r20
    1964:	f5 07       	cpc	r31, r21
    1966:	20 f0       	brcs	.+8      	; 0x1970 <__udivmodsi4_ep>
    1968:	a2 1b       	sub	r26, r18
    196a:	b3 0b       	sbc	r27, r19
    196c:	e4 0b       	sbc	r30, r20
    196e:	f5 0b       	sbc	r31, r21

00001970 <__udivmodsi4_ep>:
    1970:	66 1f       	adc	r22, r22
    1972:	77 1f       	adc	r23, r23
    1974:	88 1f       	adc	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	1a 94       	dec	r1
    197a:	69 f7       	brne	.-38     	; 0x1956 <__udivmodsi4_loop>
    197c:	60 95       	com	r22
    197e:	70 95       	com	r23
    1980:	80 95       	com	r24
    1982:	90 95       	com	r25
    1984:	9b 01       	movw	r18, r22
    1986:	ac 01       	movw	r20, r24
    1988:	bd 01       	movw	r22, r26
    198a:	cf 01       	movw	r24, r30
    198c:	08 95       	ret

0000198e <__umulhisi3>:
    198e:	a2 9f       	mul	r26, r18
    1990:	b0 01       	movw	r22, r0
    1992:	b3 9f       	mul	r27, r19
    1994:	c0 01       	movw	r24, r0
    1996:	a3 9f       	mul	r26, r19
    1998:	70 0d       	add	r23, r0
    199a:	81 1d       	adc	r24, r1
    199c:	11 24       	eor	r1, r1
    199e:	91 1d       	adc	r25, r1
    19a0:	b2 9f       	mul	r27, r18
    19a2:	70 0d       	add	r23, r0
    19a4:	81 1d       	adc	r24, r1
    19a6:	11 24       	eor	r1, r1
    19a8:	91 1d       	adc	r25, r1
    19aa:	08 95       	ret

000019ac <_exit>:
    19ac:	f8 94       	cli

000019ae <__stop_program>:
    19ae:	ff cf       	rjmp	.-2      	; 0x19ae <__stop_program>
