
CHIP_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  000018b6  0000194a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000065f  008001aa  008001aa  000019f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  00001a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003135  00000000  00000000  00001d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001084  00000000  00000000  00004ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ee8  00000000  00000000  00005f25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000808  00000000  00000000  00007e10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000130c  00000000  00000000  00008618  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001884  00000000  00000000  00009924  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000300  00000000  00000000  0000b1a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	e4 c7       	rjmp	.+4040   	; 0xffe <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 eb       	ldi	r30, 0xB6	; 182
      a0:	f8 e1       	ldi	r31, 0x18	; 24
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 3a       	cpi	r26, 0xAA	; 170
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	28 e0       	ldi	r18, 0x08	; 8
      b4:	aa ea       	ldi	r26, 0xAA	; 170
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a9 30       	cpi	r26, 0x09	; 9
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	25 d6       	rcall	.+3146   	; 0xd0e <main>
      c4:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      d0:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      d4:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <__data_end>
      d8:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <__data_end+0x1>
      dc:	c9 01       	movw	r24, r18
      de:	8c 0f       	add	r24, r28
      e0:	9d 1f       	adc	r25, r29
      e2:	8c 3d       	cpi	r24, 0xDC	; 220
      e4:	45 e0       	ldi	r20, 0x05	; 5
      e6:	94 07       	cpc	r25, r20
      e8:	58 f4       	brcc	.+22     	; 0x100 <pvPortMalloc+0x36>
      ea:	28 17       	cp	r18, r24
      ec:	39 07       	cpc	r19, r25
      ee:	58 f4       	brcc	.+22     	; 0x106 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
      f0:	e9 01       	movw	r28, r18
      f2:	c4 55       	subi	r28, 0x54	; 84
      f4:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
      f6:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <__data_end+0x1>
      fa:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <__data_end>
      fe:	05 c0       	rjmp	.+10     	; 0x10a <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     100:	c0 e0       	ldi	r28, 0x00	; 0
     102:	d0 e0       	ldi	r29, 0x00	; 0
     104:	02 c0       	rjmp	.+4      	; 0x10a <pvPortMalloc+0x40>
     106:	c0 e0       	ldi	r28, 0x00	; 0
     108:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     10a:	0e 94 25 0a 	call	0x144a	; 0x144a <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     10e:	ce 01       	movw	r24, r28
     110:	df 91       	pop	r29
     112:	cf 91       	pop	r28
     114:	08 95       	ret

00000116 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     116:	08 95       	ret

00000118 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     118:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     11a:	03 96       	adiw	r24, 0x03	; 3
     11c:	92 83       	std	Z+2, r25	; 0x02
     11e:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     120:	2f ef       	ldi	r18, 0xFF	; 255
     122:	3f ef       	ldi	r19, 0xFF	; 255
     124:	34 83       	std	Z+4, r19	; 0x04
     126:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     128:	96 83       	std	Z+6, r25	; 0x06
     12a:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     12c:	90 87       	std	Z+8, r25	; 0x08
     12e:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     130:	10 82       	st	Z, r1
     132:	08 95       	ret

00000134 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     134:	fc 01       	movw	r30, r24
     136:	11 86       	std	Z+9, r1	; 0x09
     138:	10 86       	std	Z+8, r1	; 0x08
     13a:	08 95       	ret

0000013c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	fc 01       	movw	r30, r24
     142:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     144:	21 81       	ldd	r18, Z+1	; 0x01
     146:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     148:	e9 01       	movw	r28, r18
     14a:	8a 81       	ldd	r24, Y+2	; 0x02
     14c:	9b 81       	ldd	r25, Y+3	; 0x03
     14e:	13 96       	adiw	r26, 0x03	; 3
     150:	9c 93       	st	X, r25
     152:	8e 93       	st	-X, r24
     154:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     156:	81 81       	ldd	r24, Z+1	; 0x01
     158:	92 81       	ldd	r25, Z+2	; 0x02
     15a:	15 96       	adiw	r26, 0x05	; 5
     15c:	9c 93       	st	X, r25
     15e:	8e 93       	st	-X, r24
     160:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     162:	8a 81       	ldd	r24, Y+2	; 0x02
     164:	9b 81       	ldd	r25, Y+3	; 0x03
     166:	ec 01       	movw	r28, r24
     168:	7d 83       	std	Y+5, r23	; 0x05
     16a:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     16c:	e9 01       	movw	r28, r18
     16e:	7b 83       	std	Y+3, r23	; 0x03
     170:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     172:	72 83       	std	Z+2, r23	; 0x02
     174:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     176:	19 96       	adiw	r26, 0x09	; 9
     178:	fc 93       	st	X, r31
     17a:	ee 93       	st	-X, r30
     17c:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     17e:	80 81       	ld	r24, Z
     180:	8f 5f       	subi	r24, 0xFF	; 255
     182:	80 83       	st	Z, r24
}
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	08 95       	ret

0000018a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     190:	48 81       	ld	r20, Y
     192:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     194:	4f 3f       	cpi	r20, 0xFF	; 255
     196:	2f ef       	ldi	r18, 0xFF	; 255
     198:	52 07       	cpc	r21, r18
     19a:	31 f4       	brne	.+12     	; 0x1a8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     19c:	dc 01       	movw	r26, r24
     19e:	17 96       	adiw	r26, 0x07	; 7
     1a0:	ed 91       	ld	r30, X+
     1a2:	fc 91       	ld	r31, X
     1a4:	18 97       	sbiw	r26, 0x08	; 8
     1a6:	17 c0       	rjmp	.+46     	; 0x1d6 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     1a8:	fc 01       	movw	r30, r24
     1aa:	33 96       	adiw	r30, 0x03	; 3
     1ac:	dc 01       	movw	r26, r24
     1ae:	15 96       	adiw	r26, 0x05	; 5
     1b0:	2d 91       	ld	r18, X+
     1b2:	3c 91       	ld	r19, X
     1b4:	16 97       	sbiw	r26, 0x06	; 6
     1b6:	d9 01       	movw	r26, r18
     1b8:	2d 91       	ld	r18, X+
     1ba:	3c 91       	ld	r19, X
     1bc:	42 17       	cp	r20, r18
     1be:	53 07       	cpc	r21, r19
     1c0:	50 f0       	brcs	.+20     	; 0x1d6 <vListInsert+0x4c>
     1c2:	02 80       	ldd	r0, Z+2	; 0x02
     1c4:	f3 81       	ldd	r31, Z+3	; 0x03
     1c6:	e0 2d       	mov	r30, r0
     1c8:	a2 81       	ldd	r26, Z+2	; 0x02
     1ca:	b3 81       	ldd	r27, Z+3	; 0x03
     1cc:	2d 91       	ld	r18, X+
     1ce:	3c 91       	ld	r19, X
     1d0:	42 17       	cp	r20, r18
     1d2:	53 07       	cpc	r21, r19
     1d4:	b0 f7       	brcc	.-20     	; 0x1c2 <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     1d6:	a2 81       	ldd	r26, Z+2	; 0x02
     1d8:	b3 81       	ldd	r27, Z+3	; 0x03
     1da:	bb 83       	std	Y+3, r27	; 0x03
     1dc:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     1de:	15 96       	adiw	r26, 0x05	; 5
     1e0:	dc 93       	st	X, r29
     1e2:	ce 93       	st	-X, r28
     1e4:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     1e6:	fd 83       	std	Y+5, r31	; 0x05
     1e8:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     1ea:	d3 83       	std	Z+3, r29	; 0x03
     1ec:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     1ee:	99 87       	std	Y+9, r25	; 0x09
     1f0:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     1f2:	fc 01       	movw	r30, r24
     1f4:	20 81       	ld	r18, Z
     1f6:	2f 5f       	subi	r18, 0xFF	; 255
     1f8:	20 83       	st	Z, r18
}
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     200:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     202:	a2 81       	ldd	r26, Z+2	; 0x02
     204:	b3 81       	ldd	r27, Z+3	; 0x03
     206:	84 81       	ldd	r24, Z+4	; 0x04
     208:	95 81       	ldd	r25, Z+5	; 0x05
     20a:	15 96       	adiw	r26, 0x05	; 5
     20c:	9c 93       	st	X, r25
     20e:	8e 93       	st	-X, r24
     210:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     212:	a4 81       	ldd	r26, Z+4	; 0x04
     214:	b5 81       	ldd	r27, Z+5	; 0x05
     216:	82 81       	ldd	r24, Z+2	; 0x02
     218:	93 81       	ldd	r25, Z+3	; 0x03
     21a:	13 96       	adiw	r26, 0x03	; 3
     21c:	9c 93       	st	X, r25
     21e:	8e 93       	st	-X, r24
     220:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     222:	a0 85       	ldd	r26, Z+8	; 0x08
     224:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     226:	11 96       	adiw	r26, 0x01	; 1
     228:	8d 91       	ld	r24, X+
     22a:	9c 91       	ld	r25, X
     22c:	12 97       	sbiw	r26, 0x02	; 2
     22e:	e8 17       	cp	r30, r24
     230:	f9 07       	cpc	r31, r25
     232:	31 f4       	brne	.+12     	; 0x240 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     234:	84 81       	ldd	r24, Z+4	; 0x04
     236:	95 81       	ldd	r25, Z+5	; 0x05
     238:	12 96       	adiw	r26, 0x02	; 2
     23a:	9c 93       	st	X, r25
     23c:	8e 93       	st	-X, r24
     23e:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     240:	11 86       	std	Z+9, r1	; 0x09
     242:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     244:	8c 91       	ld	r24, X
     246:	81 50       	subi	r24, 0x01	; 1
     248:	8c 93       	st	X, r24
     24a:	08 95       	ret

0000024c <initUSART>:
//RECEIVE FSM

enum RECState {Rec_Wait, Receive_State } rec_state;

void REC_Init(){
	rec_state = Rec_Wait;
     24c:	81 30       	cpi	r24, 0x01	; 1
     24e:	81 f0       	breq	.+32     	; 0x270 <initUSART+0x24>
     250:	e1 ec       	ldi	r30, 0xC1	; 193
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	80 81       	ld	r24, Z
     256:	88 61       	ori	r24, 0x18	; 24
     258:	80 83       	st	Z, r24
     25a:	e2 ec       	ldi	r30, 0xC2	; 194
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	86 60       	ori	r24, 0x06	; 6
     262:	80 83       	st	Z, r24
     264:	83 e3       	ldi	r24, 0x33	; 51
     266:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     26a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     26e:	08 95       	ret
     270:	e9 ec       	ldi	r30, 0xC9	; 201
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	80 81       	ld	r24, Z
     276:	88 61       	ori	r24, 0x18	; 24
     278:	80 83       	st	Z, r24
     27a:	ea ec       	ldi	r30, 0xCA	; 202
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	80 81       	ld	r24, Z
     280:	86 60       	ori	r24, 0x06	; 6
     282:	80 83       	st	Z, r24
     284:	83 e3       	ldi	r24, 0x33	; 51
     286:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     28a:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     28e:	08 95       	ret

00000290 <USART_Flush>:
     290:	81 30       	cpi	r24, 0x01	; 1
     292:	29 f4       	brne	.+10     	; 0x29e <USART_Flush+0xe>
     294:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     298:	88 23       	and	r24, r24
     29a:	74 f0       	brlt	.+28     	; 0x2b8 <USART_Flush+0x28>
     29c:	08 95       	ret
     29e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     2a2:	88 23       	and	r24, r24
     2a4:	8c f4       	brge	.+34     	; 0x2c8 <USART_Flush+0x38>
     2a6:	a6 ec       	ldi	r26, 0xC6	; 198
     2a8:	b0 e0       	ldi	r27, 0x00	; 0
     2aa:	e0 ec       	ldi	r30, 0xC0	; 192
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	8c 91       	ld	r24, X
     2b0:	80 81       	ld	r24, Z
     2b2:	88 23       	and	r24, r24
     2b4:	e4 f3       	brlt	.-8      	; 0x2ae <USART_Flush+0x1e>
     2b6:	08 95       	ret
     2b8:	ae ec       	ldi	r26, 0xCE	; 206
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	e8 ec       	ldi	r30, 0xC8	; 200
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	8c 91       	ld	r24, X
     2c2:	80 81       	ld	r24, Z
     2c4:	88 23       	and	r24, r24
     2c6:	e4 f3       	brlt	.-8      	; 0x2c0 <USART_Flush+0x30>
     2c8:	08 95       	ret

000002ca <USART_Receive>:
     2ca:	81 30       	cpi	r24, 0x01	; 1
     2cc:	41 f0       	breq	.+16     	; 0x2de <USART_Receive+0x14>
     2ce:	e0 ec       	ldi	r30, 0xC0	; 192
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	80 81       	ld	r24, Z
     2d4:	88 23       	and	r24, r24
     2d6:	ec f7       	brge	.-6      	; 0x2d2 <USART_Receive+0x8>
     2d8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     2dc:	08 95       	ret
     2de:	e8 ec       	ldi	r30, 0xC8	; 200
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	80 81       	ld	r24, Z
     2e4:	88 23       	and	r24, r24
     2e6:	ec f7       	brge	.-6      	; 0x2e2 <USART_Receive+0x18>
     2e8:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     2ec:	08 95       	ret

000002ee <generate_random_num>:
     2ee:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <rand>
     2f2:	6a e0       	ldi	r22, 0x0A	; 10
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <__divmodhi4>
     2fa:	08 95       	ret

000002fc <Motor_Tick>:
     2fc:	80 91 06 08 	lds	r24, 0x0806	; 0x800806 <motor_state>
     300:	81 30       	cpi	r24, 0x01	; 1
     302:	19 f0       	breq	.+6      	; 0x30a <Motor_Tick+0xe>
     304:	82 30       	cpi	r24, 0x02	; 2
     306:	99 f0       	breq	.+38     	; 0x32e <Motor_Tick+0x32>
     308:	24 c0       	rjmp	.+72     	; 0x352 <Motor_Tick+0x56>
     30a:	e0 91 9d 07 	lds	r30, 0x079D	; 0x80079d <p_index>
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	e7 5f       	subi	r30, 0xF7	; 247
     312:	fe 4f       	sbci	r31, 0xFE	; 254
     314:	80 81       	ld	r24, Z
     316:	85 b9       	out	0x05, r24	; 5
     318:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <p_index>
     31c:	83 30       	cpi	r24, 0x03	; 3
     31e:	19 f4       	brne	.+6      	; 0x326 <Motor_Tick+0x2a>
     320:	10 92 9d 07 	sts	0x079D, r1	; 0x80079d <p_index>
     324:	16 c0       	rjmp	.+44     	; 0x352 <Motor_Tick+0x56>
     326:	8f 5f       	subi	r24, 0xFF	; 255
     328:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <p_index>
     32c:	12 c0       	rjmp	.+36     	; 0x352 <Motor_Tick+0x56>
     32e:	e0 91 9d 07 	lds	r30, 0x079D	; 0x80079d <p_index>
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	e7 5f       	subi	r30, 0xF7	; 247
     336:	fe 4f       	sbci	r31, 0xFE	; 254
     338:	80 81       	ld	r24, Z
     33a:	85 b9       	out	0x05, r24	; 5
     33c:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <p_index>
     340:	81 11       	cpse	r24, r1
     342:	04 c0       	rjmp	.+8      	; 0x34c <Motor_Tick+0x50>
     344:	83 e0       	ldi	r24, 0x03	; 3
     346:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <p_index>
     34a:	03 c0       	rjmp	.+6      	; 0x352 <Motor_Tick+0x56>
     34c:	81 50       	subi	r24, 0x01	; 1
     34e:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <p_index>
     352:	80 91 06 08 	lds	r24, 0x0806	; 0x800806 <motor_state>
     356:	81 30       	cpi	r24, 0x01	; 1
     358:	99 f0       	breq	.+38     	; 0x380 <Motor_Tick+0x84>
     35a:	18 f0       	brcs	.+6      	; 0x362 <Motor_Tick+0x66>
     35c:	82 30       	cpi	r24, 0x02	; 2
     35e:	79 f1       	breq	.+94     	; 0x3be <Motor_Tick+0xc2>
     360:	4a c0       	rjmp	.+148    	; 0x3f6 <Motor_Tick+0xfa>
     362:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <STEPPER_GO>
     366:	88 23       	and	r24, r24
     368:	09 f4       	brne	.+2      	; 0x36c <Motor_Tick+0x70>
     36a:	47 c0       	rjmp	.+142    	; 0x3fa <Motor_Tick+0xfe>
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <motor_state>
     372:	10 92 9d 07 	sts	0x079D, r1	; 0x80079d <p_index>
     376:	10 92 9c 07 	sts	0x079C, r1	; 0x80079c <numCounter+0x1>
     37a:	10 92 9b 07 	sts	0x079B, r1	; 0x80079b <numCounter>
     37e:	08 95       	ret
     380:	80 91 9b 07 	lds	r24, 0x079B	; 0x80079b <numCounter>
     384:	90 91 9c 07 	lds	r25, 0x079C	; 0x80079c <numCounter+0x1>
     388:	01 96       	adiw	r24, 0x01	; 1
     38a:	90 93 9c 07 	sts	0x079C, r25	; 0x80079c <numCounter+0x1>
     38e:	80 93 9b 07 	sts	0x079B, r24	; 0x80079b <numCounter>
     392:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <numPhases>
     396:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <numPhases+0x1>
     39a:	82 17       	cp	r24, r18
     39c:	93 07       	cpc	r25, r19
     39e:	24 f4       	brge	.+8      	; 0x3a8 <Motor_Tick+0xac>
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <motor_state>
     3a6:	08 95       	ret
     3a8:	82 e0       	ldi	r24, 0x02	; 2
     3aa:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <motor_state>
     3ae:	83 e0       	ldi	r24, 0x03	; 3
     3b0:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <p_index>
     3b4:	10 92 9c 07 	sts	0x079C, r1	; 0x80079c <numCounter+0x1>
     3b8:	10 92 9b 07 	sts	0x079B, r1	; 0x80079b <numCounter>
     3bc:	08 95       	ret
     3be:	80 91 9b 07 	lds	r24, 0x079B	; 0x80079b <numCounter>
     3c2:	90 91 9c 07 	lds	r25, 0x079C	; 0x80079c <numCounter+0x1>
     3c6:	01 96       	adiw	r24, 0x01	; 1
     3c8:	90 93 9c 07 	sts	0x079C, r25	; 0x80079c <numCounter+0x1>
     3cc:	80 93 9b 07 	sts	0x079B, r24	; 0x80079b <numCounter>
     3d0:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <numPhases>
     3d4:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <numPhases+0x1>
     3d8:	82 17       	cp	r24, r18
     3da:	93 07       	cpc	r25, r19
     3dc:	24 f4       	brge	.+8      	; 0x3e6 <Motor_Tick+0xea>
     3de:	82 e0       	ldi	r24, 0x02	; 2
     3e0:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <motor_state>
     3e4:	08 95       	ret
     3e6:	10 92 06 08 	sts	0x0806, r1	; 0x800806 <motor_state>
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <STEPPER_DONE>
     3f0:	10 92 98 07 	sts	0x0798, r1	; 0x800798 <STEPPER_GO>
     3f4:	08 95       	ret
     3f6:	10 92 06 08 	sts	0x0806, r1	; 0x800806 <motor_state>
     3fa:	08 95       	ret

000003fc <MotorSecTask>:
     3fc:	10 92 06 08 	sts	0x0806, r1	; 0x800806 <motor_state>
     400:	7d df       	rcall	.-262    	; 0x2fc <Motor_Tick>
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	0e 94 a9 0a 	call	0x1552	; 0x1552 <vTaskDelay>
     40a:	fa cf       	rjmp	.-12     	; 0x400 <__LOCK_REGION_LENGTH__>

0000040c <MotorSecPulse>:
     40c:	af 92       	push	r10
     40e:	bf 92       	push	r11
     410:	cf 92       	push	r12
     412:	df 92       	push	r13
     414:	ef 92       	push	r14
     416:	ff 92       	push	r15
     418:	0f 93       	push	r16
     41a:	a1 2c       	mov	r10, r1
     41c:	b1 2c       	mov	r11, r1
     41e:	c1 2c       	mov	r12, r1
     420:	d1 2c       	mov	r13, r1
     422:	e1 2c       	mov	r14, r1
     424:	f1 2c       	mov	r15, r1
     426:	08 2f       	mov	r16, r24
     428:	20 e0       	ldi	r18, 0x00	; 0
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	45 e5       	ldi	r20, 0x55	; 85
     42e:	50 e0       	ldi	r21, 0x00	; 0
     430:	60 e1       	ldi	r22, 0x10	; 16
     432:	71 e0       	ldi	r23, 0x01	; 1
     434:	8e ef       	ldi	r24, 0xFE	; 254
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	19 d6       	rcall	.+3122   	; 0x106c <xTaskGenericCreate>
     43a:	0f 91       	pop	r16
     43c:	ff 90       	pop	r15
     43e:	ef 90       	pop	r14
     440:	df 90       	pop	r13
     442:	cf 90       	pop	r12
     444:	bf 90       	pop	r11
     446:	af 90       	pop	r10
     448:	08 95       	ret

0000044a <stepper_controller_Tick>:
     44a:	80 91 07 08 	lds	r24, 0x0807	; 0x800807 <stepper_controller_state>
     44e:	81 30       	cpi	r24, 0x01	; 1
     450:	61 f0       	breq	.+24     	; 0x46a <stepper_controller_Tick+0x20>
     452:	18 f0       	brcs	.+6      	; 0x45a <stepper_controller_Tick+0x10>
     454:	82 30       	cpi	r24, 0x02	; 2
     456:	11 f1       	breq	.+68     	; 0x49c <stepper_controller_Tick+0x52>
     458:	35 c0       	rjmp	.+106    	; 0x4c4 <stepper_controller_Tick+0x7a>
     45a:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <systems_go>
     45e:	88 23       	and	r24, r24
     460:	99 f1       	breq	.+102    	; 0x4c8 <stepper_controller_Tick+0x7e>
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <stepper_controller_state>
     468:	08 95       	ret
     46a:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <systems_go>
     46e:	81 11       	cpse	r24, r1
     470:	03 c0       	rjmp	.+6      	; 0x478 <stepper_controller_Tick+0x2e>
     472:	10 92 07 08 	sts	0x0807, r1	; 0x800807 <stepper_controller_state>
     476:	08 95       	ret
     478:	3a df       	rcall	.-396    	; 0x2ee <generate_random_num>
     47a:	90 93 9a 07 	sts	0x079A, r25	; 0x80079a <temp_random+0x1>
     47e:	80 93 99 07 	sts	0x0799, r24	; 0x800799 <temp_random>
     482:	02 97       	sbiw	r24, 0x02	; 2
     484:	3c f0       	brlt	.+14     	; 0x494 <stepper_controller_Tick+0x4a>
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	80 93 98 07 	sts	0x0798, r24	; 0x800798 <STEPPER_GO>
     48c:	82 e0       	ldi	r24, 0x02	; 2
     48e:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <stepper_controller_state>
     492:	08 95       	ret
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <stepper_controller_state>
     49a:	08 95       	ret
     49c:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <STEPPER_DONE>
     4a0:	81 30       	cpi	r24, 0x01	; 1
     4a2:	91 f4       	brne	.+36     	; 0x4c8 <stepper_controller_Tick+0x7e>
     4a4:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <systems_go>
     4a8:	81 30       	cpi	r24, 0x01	; 1
     4aa:	29 f4       	brne	.+10     	; 0x4b6 <stepper_controller_Tick+0x6c>
     4ac:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <STEPPER_DONE>
     4b0:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <stepper_controller_state>
     4b4:	08 95       	ret
     4b6:	81 11       	cpse	r24, r1
     4b8:	07 c0       	rjmp	.+14     	; 0x4c8 <stepper_controller_Tick+0x7e>
     4ba:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <STEPPER_DONE>
     4be:	10 92 07 08 	sts	0x0807, r1	; 0x800807 <stepper_controller_state>
     4c2:	08 95       	ret
     4c4:	10 92 07 08 	sts	0x0807, r1	; 0x800807 <stepper_controller_state>
     4c8:	08 95       	ret

000004ca <stepper_controllerSecTask>:
     4ca:	10 92 07 08 	sts	0x0807, r1	; 0x800807 <stepper_controller_state>
     4ce:	bd df       	rcall	.-134    	; 0x44a <stepper_controller_Tick>
     4d0:	84 ef       	ldi	r24, 0xF4	; 244
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	0e 94 a9 0a 	call	0x1552	; 0x1552 <vTaskDelay>
     4d8:	fa cf       	rjmp	.-12     	; 0x4ce <stepper_controllerSecTask+0x4>

000004da <Start_stepper_controller_Pulse>:
     4da:	af 92       	push	r10
     4dc:	bf 92       	push	r11
     4de:	cf 92       	push	r12
     4e0:	df 92       	push	r13
     4e2:	ef 92       	push	r14
     4e4:	ff 92       	push	r15
     4e6:	0f 93       	push	r16
     4e8:	a1 2c       	mov	r10, r1
     4ea:	b1 2c       	mov	r11, r1
     4ec:	c1 2c       	mov	r12, r1
     4ee:	d1 2c       	mov	r13, r1
     4f0:	e1 2c       	mov	r14, r1
     4f2:	f1 2c       	mov	r15, r1
     4f4:	08 2f       	mov	r16, r24
     4f6:	20 e0       	ldi	r18, 0x00	; 0
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	45 e5       	ldi	r20, 0x55	; 85
     4fc:	50 e0       	ldi	r21, 0x00	; 0
     4fe:	6d e1       	ldi	r22, 0x1D	; 29
     500:	71 e0       	ldi	r23, 0x01	; 1
     502:	85 e6       	ldi	r24, 0x65	; 101
     504:	92 e0       	ldi	r25, 0x02	; 2
     506:	b2 d5       	rcall	.+2916   	; 0x106c <xTaskGenericCreate>
     508:	0f 91       	pop	r16
     50a:	ff 90       	pop	r15
     50c:	ef 90       	pop	r14
     50e:	df 90       	pop	r13
     510:	cf 90       	pop	r12
     512:	bf 90       	pop	r11
     514:	af 90       	pop	r10
     516:	08 95       	ret

00000518 <SERVO_DRIVE_Tick>:
     518:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <servo_driver_state>
     51c:	81 11       	cpse	r24, r1
     51e:	28 c0       	rjmp	.+80     	; 0x570 <SERVO_DRIVE_Tick+0x58>
     520:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <servo_direction>
     524:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <servo_direction+0x1>
     528:	81 30       	cpi	r24, 0x01	; 1
     52a:	91 05       	cpc	r25, r1
     52c:	51 f4       	brne	.+20     	; 0x542 <SERVO_DRIVE_Tick+0x2a>
     52e:	10 92 96 07 	sts	0x0796, r1	; 0x800796 <right>
     532:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <center>
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	80 93 95 07 	sts	0x0795, r24	; 0x800795 <left>
     53c:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <max_servo>
     540:	19 c0       	rjmp	.+50     	; 0x574 <SERVO_DRIVE_Tick+0x5c>
     542:	02 97       	sbiw	r24, 0x02	; 2
     544:	59 f4       	brne	.+22     	; 0x55c <SERVO_DRIVE_Tick+0x44>
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	80 93 96 07 	sts	0x0796, r24	; 0x800796 <right>
     54c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <center>
     550:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <left>
     554:	82 e0       	ldi	r24, 0x02	; 2
     556:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <max_servo>
     55a:	0c c0       	rjmp	.+24     	; 0x574 <SERVO_DRIVE_Tick+0x5c>
     55c:	10 92 96 07 	sts	0x0796, r1	; 0x800796 <right>
     560:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <left>
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <center>
     56a:	10 92 94 07 	sts	0x0794, r1	; 0x800794 <max_servo>
     56e:	02 c0       	rjmp	.+4      	; 0x574 <SERVO_DRIVE_Tick+0x5c>
     570:	81 11       	cpse	r24, r1
     572:	03 c0       	rjmp	.+6      	; 0x57a <SERVO_DRIVE_Tick+0x62>
     574:	10 92 01 08 	sts	0x0801, r1	; 0x800801 <servo_driver_state>
     578:	08 95       	ret
     57a:	10 92 01 08 	sts	0x0801, r1	; 0x800801 <servo_driver_state>
     57e:	08 95       	ret

00000580 <SERVODRIVESecTask>:
     580:	10 92 01 08 	sts	0x0801, r1	; 0x800801 <servo_driver_state>
     584:	c9 df       	rcall	.-110    	; 0x518 <SERVO_DRIVE_Tick>
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	e3 d7       	rcall	.+4038   	; 0x1552 <vTaskDelay>
     58c:	fb cf       	rjmp	.-10     	; 0x584 <SERVODRIVESecTask+0x4>

0000058e <SERVODRIVESecPulse>:
     58e:	af 92       	push	r10
     590:	bf 92       	push	r11
     592:	cf 92       	push	r12
     594:	df 92       	push	r13
     596:	ef 92       	push	r14
     598:	ff 92       	push	r15
     59a:	0f 93       	push	r16
     59c:	a1 2c       	mov	r10, r1
     59e:	b1 2c       	mov	r11, r1
     5a0:	c1 2c       	mov	r12, r1
     5a2:	d1 2c       	mov	r13, r1
     5a4:	e1 2c       	mov	r14, r1
     5a6:	f1 2c       	mov	r15, r1
     5a8:	08 2f       	mov	r16, r24
     5aa:	20 e0       	ldi	r18, 0x00	; 0
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	45 e5       	ldi	r20, 0x55	; 85
     5b0:	50 e0       	ldi	r21, 0x00	; 0
     5b2:	67 e3       	ldi	r22, 0x37	; 55
     5b4:	71 e0       	ldi	r23, 0x01	; 1
     5b6:	80 ec       	ldi	r24, 0xC0	; 192
     5b8:	92 e0       	ldi	r25, 0x02	; 2
     5ba:	58 d5       	rcall	.+2736   	; 0x106c <xTaskGenericCreate>
     5bc:	0f 91       	pop	r16
     5be:	ff 90       	pop	r15
     5c0:	ef 90       	pop	r14
     5c2:	df 90       	pop	r13
     5c4:	cf 90       	pop	r12
     5c6:	bf 90       	pop	r11
     5c8:	af 90       	pop	r10
     5ca:	08 95       	ret

000005cc <SERVO_Tick>:
     5cc:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <servo_state>
     5d0:	88 23       	and	r24, r24
     5d2:	19 f0       	breq	.+6      	; 0x5da <SERVO_Tick+0xe>
     5d4:	81 30       	cpi	r24, 0x01	; 1
     5d6:	a1 f0       	breq	.+40     	; 0x600 <SERVO_Tick+0x34>
     5d8:	32 c0       	rjmp	.+100    	; 0x63e <SERVO_Tick+0x72>
     5da:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <left>
     5de:	81 11       	cpse	r24, r1
     5e0:	04 c0       	rjmp	.+8      	; 0x5ea <SERVO_Tick+0x1e>
     5e2:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <right>
     5e6:	88 23       	and	r24, r24
     5e8:	39 f0       	breq	.+14     	; 0x5f8 <SERVO_Tick+0x2c>
     5ea:	10 92 93 07 	sts	0x0793, r1	; 0x800793 <servo_counter>
     5ee:	40 9a       	sbi	0x08, 0	; 8
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <servo_state>
     5f6:	30 c0       	rjmp	.+96     	; 0x658 <SERVO_Tick+0x8c>
     5f8:	40 98       	cbi	0x08, 0	; 8
     5fa:	10 92 04 08 	sts	0x0804, r1	; 0x800804 <servo_state>
     5fe:	08 95       	ret
     600:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <servo_counter>
     604:	90 91 94 07 	lds	r25, 0x0794	; 0x800794 <max_servo>
     608:	89 17       	cp	r24, r25
     60a:	78 f4       	brcc	.+30     	; 0x62a <SERVO_Tick+0x5e>
     60c:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <left>
     610:	91 11       	cpse	r25, r1
     612:	04 c0       	rjmp	.+8      	; 0x61c <SERVO_Tick+0x50>
     614:	90 91 96 07 	lds	r25, 0x0796	; 0x800796 <right>
     618:	99 23       	and	r25, r25
     61a:	39 f0       	breq	.+14     	; 0x62a <SERVO_Tick+0x5e>
     61c:	8f 5f       	subi	r24, 0xFF	; 255
     61e:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <servo_counter>
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <servo_state>
     628:	17 c0       	rjmp	.+46     	; 0x658 <SERVO_Tick+0x8c>
     62a:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <left>
     62e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <center>
     632:	10 92 96 07 	sts	0x0796, r1	; 0x800796 <right>
     636:	40 98       	cbi	0x08, 0	; 8
     638:	10 92 04 08 	sts	0x0804, r1	; 0x800804 <servo_state>
     63c:	08 95       	ret
     63e:	10 92 04 08 	sts	0x0804, r1	; 0x800804 <servo_state>
     642:	08 95       	ret
     644:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <left>
     648:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <center>
     64c:	10 92 96 07 	sts	0x0796, r1	; 0x800796 <right>
     650:	40 98       	cbi	0x08, 0	; 8
     652:	10 92 04 08 	sts	0x0804, r1	; 0x800804 <servo_state>
     656:	08 95       	ret
     658:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <center>
     65c:	81 11       	cpse	r24, r1
     65e:	f2 cf       	rjmp	.-28     	; 0x644 <SERVO_Tick+0x78>
     660:	08 95       	ret

00000662 <SERVOSecTask>:
     662:	10 92 04 08 	sts	0x0804, r1	; 0x800804 <servo_state>
     666:	b2 df       	rcall	.-156    	; 0x5cc <SERVO_Tick>
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	72 d7       	rcall	.+3812   	; 0x1552 <vTaskDelay>
     66e:	fb cf       	rjmp	.-10     	; 0x666 <SERVOSecTask+0x4>

00000670 <SERVOSecPulse>:
     670:	af 92       	push	r10
     672:	bf 92       	push	r11
     674:	cf 92       	push	r12
     676:	df 92       	push	r13
     678:	ef 92       	push	r14
     67a:	ff 92       	push	r15
     67c:	0f 93       	push	r16
     67e:	a1 2c       	mov	r10, r1
     680:	b1 2c       	mov	r11, r1
     682:	c1 2c       	mov	r12, r1
     684:	d1 2c       	mov	r13, r1
     686:	e1 2c       	mov	r14, r1
     688:	f1 2c       	mov	r15, r1
     68a:	08 2f       	mov	r16, r24
     68c:	20 e0       	ldi	r18, 0x00	; 0
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	45 e5       	ldi	r20, 0x55	; 85
     692:	50 e0       	ldi	r21, 0x00	; 0
     694:	69 e4       	ldi	r22, 0x49	; 73
     696:	71 e0       	ldi	r23, 0x01	; 1
     698:	81 e3       	ldi	r24, 0x31	; 49
     69a:	93 e0       	ldi	r25, 0x03	; 3
     69c:	e7 d4       	rcall	.+2510   	; 0x106c <xTaskGenericCreate>
     69e:	0f 91       	pop	r16
     6a0:	ff 90       	pop	r15
     6a2:	ef 90       	pop	r14
     6a4:	df 90       	pop	r13
     6a6:	cf 90       	pop	r12
     6a8:	bf 90       	pop	r11
     6aa:	af 90       	pop	r10
     6ac:	08 95       	ret

000006ae <servo_controller_Tick>:
     6ae:	80 91 08 08 	lds	r24, 0x0808	; 0x800808 <servo_controller_state>
     6b2:	81 30       	cpi	r24, 0x01	; 1
     6b4:	69 f0       	breq	.+26     	; 0x6d0 <servo_controller_Tick+0x22>
     6b6:	18 f0       	brcs	.+6      	; 0x6be <servo_controller_Tick+0x10>
     6b8:	82 30       	cpi	r24, 0x02	; 2
     6ba:	89 f1       	breq	.+98     	; 0x71e <servo_controller_Tick+0x70>
     6bc:	54 c0       	rjmp	.+168    	; 0x766 <servo_controller_Tick+0xb8>
     6be:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <systems_go>
     6c2:	88 23       	and	r24, r24
     6c4:	09 f4       	brne	.+2      	; 0x6c8 <servo_controller_Tick+0x1a>
     6c6:	51 c0       	rjmp	.+162    	; 0x76a <servo_controller_Tick+0xbc>
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <servo_controller_state>
     6ce:	08 95       	ret
     6d0:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <systems_go>
     6d4:	81 11       	cpse	r24, r1
     6d6:	03 c0       	rjmp	.+6      	; 0x6de <servo_controller_Tick+0x30>
     6d8:	10 92 08 08 	sts	0x0808, r1	; 0x800808 <servo_controller_state>
     6dc:	08 95       	ret
     6de:	07 de       	rcall	.-1010   	; 0x2ee <generate_random_num>
     6e0:	90 93 90 07 	sts	0x0790, r25	; 0x800790 <temp_random2+0x1>
     6e4:	80 93 8f 07 	sts	0x078F, r24	; 0x80078f <temp_random2>
     6e8:	08 97       	sbiw	r24, 0x08	; 8
     6ea:	ac f0       	brlt	.+42     	; 0x716 <servo_controller_Tick+0x68>
     6ec:	82 e0       	ldi	r24, 0x02	; 2
     6ee:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <servo_controller_state>
     6f2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <head_movement>
     6f6:	81 30       	cpi	r24, 0x01	; 1
     6f8:	39 f4       	brne	.+14     	; 0x708 <servo_controller_Tick+0x5a>
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	90 93 92 07 	sts	0x0792, r25	; 0x800792 <servo_direction+0x1>
     702:	80 93 91 07 	sts	0x0791, r24	; 0x800791 <servo_direction>
     706:	08 95       	ret
     708:	82 e0       	ldi	r24, 0x02	; 2
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	90 93 92 07 	sts	0x0792, r25	; 0x800792 <servo_direction+0x1>
     710:	80 93 91 07 	sts	0x0791, r24	; 0x800791 <servo_direction>
     714:	08 95       	ret
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <servo_controller_state>
     71c:	08 95       	ret
     71e:	e7 dd       	rcall	.-1074   	; 0x2ee <generate_random_num>
     720:	90 93 90 07 	sts	0x0790, r25	; 0x800790 <temp_random2+0x1>
     724:	80 93 8f 07 	sts	0x078F, r24	; 0x80078f <temp_random2>
     728:	03 97       	sbiw	r24, 0x03	; 3
     72a:	24 f4       	brge	.+8      	; 0x734 <servo_controller_Tick+0x86>
     72c:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <systems_go>
     730:	81 11       	cpse	r24, r1
     732:	15 c0       	rjmp	.+42     	; 0x75e <servo_controller_Tick+0xb0>
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <servo_controller_state>
     73a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <head_movement>
     73e:	81 30       	cpi	r24, 0x01	; 1
     740:	39 f4       	brne	.+14     	; 0x750 <servo_controller_Tick+0xa2>
     742:	82 e0       	ldi	r24, 0x02	; 2
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	90 93 92 07 	sts	0x0792, r25	; 0x800792 <servo_direction+0x1>
     74a:	80 93 91 07 	sts	0x0791, r24	; 0x800791 <servo_direction>
     74e:	08 95       	ret
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	90 93 92 07 	sts	0x0792, r25	; 0x800792 <servo_direction+0x1>
     758:	80 93 91 07 	sts	0x0791, r24	; 0x800791 <servo_direction>
     75c:	08 95       	ret
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <servo_controller_state>
     764:	08 95       	ret
     766:	10 92 08 08 	sts	0x0808, r1	; 0x800808 <servo_controller_state>
     76a:	08 95       	ret

0000076c <servo_controllerSecTask>:
     76c:	10 92 08 08 	sts	0x0808, r1	; 0x800808 <servo_controller_state>
     770:	9e df       	rcall	.-196    	; 0x6ae <servo_controller_Tick>
     772:	84 ef       	ldi	r24, 0xF4	; 244
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	ed d6       	rcall	.+3546   	; 0x1552 <vTaskDelay>
     778:	fb cf       	rjmp	.-10     	; 0x770 <servo_controllerSecTask+0x4>

0000077a <Start_servo_controller_Pulse>:
     77a:	af 92       	push	r10
     77c:	bf 92       	push	r11
     77e:	cf 92       	push	r12
     780:	df 92       	push	r13
     782:	ef 92       	push	r14
     784:	ff 92       	push	r15
     786:	0f 93       	push	r16
     788:	a1 2c       	mov	r10, r1
     78a:	b1 2c       	mov	r11, r1
     78c:	c1 2c       	mov	r12, r1
     78e:	d1 2c       	mov	r13, r1
     790:	e1 2c       	mov	r14, r1
     792:	f1 2c       	mov	r15, r1
     794:	08 2f       	mov	r16, r24
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	45 e5       	ldi	r20, 0x55	; 85
     79c:	50 e0       	ldi	r21, 0x00	; 0
     79e:	66 e5       	ldi	r22, 0x56	; 86
     7a0:	71 e0       	ldi	r23, 0x01	; 1
     7a2:	86 eb       	ldi	r24, 0xB6	; 182
     7a4:	93 e0       	ldi	r25, 0x03	; 3
     7a6:	62 d4       	rcall	.+2244   	; 0x106c <xTaskGenericCreate>
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	cf 90       	pop	r12
     7b2:	bf 90       	pop	r11
     7b4:	af 90       	pop	r10
     7b6:	08 95       	ret

000007b8 <Audio_Tick>:
     7b8:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <audio_state>
     7bc:	88 23       	and	r24, r24
     7be:	19 f0       	breq	.+6      	; 0x7c6 <Audio_Tick+0xe>
     7c0:	81 30       	cpi	r24, 0x01	; 1
     7c2:	29 f0       	breq	.+10     	; 0x7ce <Audio_Tick+0x16>
     7c4:	0b c0       	rjmp	.+22     	; 0x7dc <Audio_Tick+0x24>
     7c6:	88 b1       	in	r24, 0x08	; 8
     7c8:	8c 60       	ori	r24, 0x0C	; 12
     7ca:	88 b9       	out	0x08, r24	; 8
     7cc:	07 c0       	rjmp	.+14     	; 0x7dc <Audio_Tick+0x24>
     7ce:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <bark_setting>
     7d2:	81 30       	cpi	r24, 0x01	; 1
     7d4:	11 f4       	brne	.+4      	; 0x7da <Audio_Tick+0x22>
     7d6:	43 98       	cbi	0x08, 3	; 8
     7d8:	01 c0       	rjmp	.+2      	; 0x7dc <Audio_Tick+0x24>
     7da:	42 98       	cbi	0x08, 2	; 8
     7dc:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <audio_state>
     7e0:	88 23       	and	r24, r24
     7e2:	19 f0       	breq	.+6      	; 0x7ea <Audio_Tick+0x32>
     7e4:	81 30       	cpi	r24, 0x01	; 1
     7e6:	41 f0       	breq	.+16     	; 0x7f8 <Audio_Tick+0x40>
     7e8:	0e c0       	rjmp	.+28     	; 0x806 <Audio_Tick+0x4e>
     7ea:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <systems_go>
     7ee:	81 30       	cpi	r24, 0x01	; 1
     7f0:	61 f4       	brne	.+24     	; 0x80a <Audio_Tick+0x52>
     7f2:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <audio_state>
     7f6:	08 95       	ret
     7f8:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <systems_go>
     7fc:	81 30       	cpi	r24, 0x01	; 1
     7fe:	29 f0       	breq	.+10     	; 0x80a <Audio_Tick+0x52>
     800:	10 92 05 08 	sts	0x0805, r1	; 0x800805 <audio_state>
     804:	08 95       	ret
     806:	10 92 05 08 	sts	0x0805, r1	; 0x800805 <audio_state>
     80a:	08 95       	ret

0000080c <AudioSecTask>:
     80c:	10 92 05 08 	sts	0x0805, r1	; 0x800805 <audio_state>
     810:	d3 df       	rcall	.-90     	; 0x7b8 <Audio_Tick>
     812:	8a e0       	ldi	r24, 0x0A	; 10
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	9d d6       	rcall	.+3386   	; 0x1552 <vTaskDelay>
     818:	fb cf       	rjmp	.-10     	; 0x810 <AudioSecTask+0x4>

0000081a <StartAudioPulse>:
     81a:	af 92       	push	r10
     81c:	bf 92       	push	r11
     81e:	cf 92       	push	r12
     820:	df 92       	push	r13
     822:	ef 92       	push	r14
     824:	ff 92       	push	r15
     826:	0f 93       	push	r16
     828:	a1 2c       	mov	r10, r1
     82a:	b1 2c       	mov	r11, r1
     82c:	c1 2c       	mov	r12, r1
     82e:	d1 2c       	mov	r13, r1
     830:	e1 2c       	mov	r14, r1
     832:	f1 2c       	mov	r15, r1
     834:	08 2f       	mov	r16, r24
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	45 e5       	ldi	r20, 0x55	; 85
     83c:	50 e0       	ldi	r21, 0x00	; 0
     83e:	6e e6       	ldi	r22, 0x6E	; 110
     840:	71 e0       	ldi	r23, 0x01	; 1
     842:	86 e0       	ldi	r24, 0x06	; 6
     844:	94 e0       	ldi	r25, 0x04	; 4
     846:	12 d4       	rcall	.+2084   	; 0x106c <xTaskGenericCreate>
     848:	0f 91       	pop	r16
     84a:	ff 90       	pop	r15
     84c:	ef 90       	pop	r14
     84e:	df 90       	pop	r13
     850:	cf 90       	pop	r12
     852:	bf 90       	pop	r11
     854:	af 90       	pop	r10
     856:	08 95       	ret

00000858 <Motion_Tick>:
     858:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <motion_state>
     85c:	88 23       	and	r24, r24
     85e:	19 f0       	breq	.+6      	; 0x866 <Motion_Tick+0xe>
     860:	82 30       	cpi	r24, 0x02	; 2
     862:	59 f0       	breq	.+22     	; 0x87a <Motion_Tick+0x22>
     864:	13 c0       	rjmp	.+38     	; 0x88c <Motion_Tick+0x34>
     866:	80 91 8c 07 	lds	r24, 0x078C	; 0x80078c <motion_boot_cnt>
     86a:	90 91 8d 07 	lds	r25, 0x078D	; 0x80078d <motion_boot_cnt+0x1>
     86e:	01 96       	adiw	r24, 0x01	; 1
     870:	90 93 8d 07 	sts	0x078D, r25	; 0x80078d <motion_boot_cnt+0x1>
     874:	80 93 8c 07 	sts	0x078C, r24	; 0x80078c <motion_boot_cnt>
     878:	0f c0       	rjmp	.+30     	; 0x898 <Motion_Tick+0x40>
     87a:	02 9b       	sbis	0x00, 2	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <Motion_Tick+0x2e>
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <motion_detected>
     884:	25 c0       	rjmp	.+74     	; 0x8d0 <Motion_Tick+0x78>
     886:	10 92 8e 07 	sts	0x078E, r1	; 0x80078e <motion_detected>
     88a:	22 c0       	rjmp	.+68     	; 0x8d0 <Motion_Tick+0x78>
     88c:	81 30       	cpi	r24, 0x01	; 1
     88e:	b1 f0       	breq	.+44     	; 0x8bc <Motion_Tick+0x64>
     890:	18 f0       	brcs	.+6      	; 0x898 <Motion_Tick+0x40>
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	49 f5       	brne	.+82     	; 0x8e8 <Motion_Tick+0x90>
     896:	1c c0       	rjmp	.+56     	; 0x8d0 <Motion_Tick+0x78>
     898:	80 91 8c 07 	lds	r24, 0x078C	; 0x80078c <motion_boot_cnt>
     89c:	90 91 8d 07 	lds	r25, 0x078D	; 0x80078d <motion_boot_cnt+0x1>
     8a0:	80 32       	cpi	r24, 0x20	; 32
     8a2:	9e 44       	sbci	r25, 0x4E	; 78
     8a4:	1c f4       	brge	.+6      	; 0x8ac <Motion_Tick+0x54>
     8a6:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <motion_state>
     8aa:	08 95       	ret
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <motion_state>
     8b2:	10 92 8d 07 	sts	0x078D, r1	; 0x80078d <motion_boot_cnt+0x1>
     8b6:	10 92 8c 07 	sts	0x078C, r1	; 0x80078c <motion_boot_cnt>
     8ba:	08 95       	ret
     8bc:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <ARM_DISARM>
     8c0:	81 30       	cpi	r24, 0x01	; 1
     8c2:	a9 f4       	brne	.+42     	; 0x8ee <Motion_Tick+0x96>
     8c4:	10 92 8e 07 	sts	0x078E, r1	; 0x80078e <motion_detected>
     8c8:	82 e0       	ldi	r24, 0x02	; 2
     8ca:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <motion_state>
     8ce:	08 95       	ret
     8d0:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <ARM_DISARM>
     8d4:	81 30       	cpi	r24, 0x01	; 1
     8d6:	21 f4       	brne	.+8      	; 0x8e0 <Motion_Tick+0x88>
     8d8:	82 e0       	ldi	r24, 0x02	; 2
     8da:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <motion_state>
     8de:	08 95       	ret
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <motion_state>
     8e6:	08 95       	ret
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <motion_state>
     8ee:	08 95       	ret

000008f0 <MotionSecTask>:
     8f0:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <motion_state>
     8f4:	b1 df       	rcall	.-158    	; 0x858 <Motion_Tick>
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	2b d6       	rcall	.+3158   	; 0x1552 <vTaskDelay>
     8fc:	fb cf       	rjmp	.-10     	; 0x8f4 <MotionSecTask+0x4>

000008fe <StartMotionPulse>:
     8fe:	af 92       	push	r10
     900:	bf 92       	push	r11
     902:	cf 92       	push	r12
     904:	df 92       	push	r13
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	0f 93       	push	r16
     90c:	a1 2c       	mov	r10, r1
     90e:	b1 2c       	mov	r11, r1
     910:	c1 2c       	mov	r12, r1
     912:	d1 2c       	mov	r13, r1
     914:	e1 2c       	mov	r14, r1
     916:	f1 2c       	mov	r15, r1
     918:	08 2f       	mov	r16, r24
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	45 e5       	ldi	r20, 0x55	; 85
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	6b e7       	ldi	r22, 0x7B	; 123
     924:	71 e0       	ldi	r23, 0x01	; 1
     926:	88 e7       	ldi	r24, 0x78	; 120
     928:	94 e0       	ldi	r25, 0x04	; 4
     92a:	a0 d3       	rcall	.+1856   	; 0x106c <xTaskGenericCreate>
     92c:	0f 91       	pop	r16
     92e:	ff 90       	pop	r15
     930:	ef 90       	pop	r14
     932:	df 90       	pop	r13
     934:	cf 90       	pop	r12
     936:	bf 90       	pop	r11
     938:	af 90       	pop	r10
     93a:	08 95       	ret

0000093c <Control_Tick>:
     93c:	80 91 02 08 	lds	r24, 0x0802	; 0x800802 <control_state>
     940:	82 30       	cpi	r24, 0x02	; 2
     942:	09 f4       	brne	.+2      	; 0x946 <Control_Tick+0xa>
     944:	49 c0       	rjmp	.+146    	; 0x9d8 <Control_Tick+0x9c>
     946:	28 f4       	brcc	.+10     	; 0x952 <Control_Tick+0x16>
     948:	88 23       	and	r24, r24
     94a:	61 f0       	breq	.+24     	; 0x964 <Control_Tick+0x28>
     94c:	81 30       	cpi	r24, 0x01	; 1
     94e:	99 f0       	breq	.+38     	; 0x976 <Control_Tick+0x3a>
     950:	71 c0       	rjmp	.+226    	; 0xa34 <Control_Tick+0xf8>
     952:	84 30       	cpi	r24, 0x04	; 4
     954:	09 f4       	brne	.+2      	; 0x958 <Control_Tick+0x1c>
     956:	51 c0       	rjmp	.+162    	; 0x9fa <Control_Tick+0xbe>
     958:	08 f4       	brcc	.+2      	; 0x95c <Control_Tick+0x20>
     95a:	45 c0       	rjmp	.+138    	; 0x9e6 <Control_Tick+0xaa>
     95c:	85 30       	cpi	r24, 0x05	; 5
     95e:	09 f4       	brne	.+2      	; 0x962 <Control_Tick+0x26>
     960:	5c c0       	rjmp	.+184    	; 0xa1a <Control_Tick+0xde>
     962:	68 c0       	rjmp	.+208    	; 0xa34 <Control_Tick+0xf8>
     964:	85 b1       	in	r24, 0x05	; 5
     966:	8f 70       	andi	r24, 0x0F	; 15
     968:	85 b9       	out	0x05, r24	; 5
     96a:	85 b1       	in	r24, 0x05	; 5
     96c:	80 6f       	ori	r24, 0xF0	; 240
     96e:	85 b9       	out	0x05, r24	; 5
     970:	10 92 a2 07 	sts	0x07A2, r1	; 0x8007a2 <systems_go>
     974:	5f c0       	rjmp	.+190    	; 0xa34 <Control_Tick+0xf8>
     976:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <random_seed_val>
     97a:	90 91 a0 07 	lds	r25, 0x07A0	; 0x8007a0 <random_seed_val+0x1>
     97e:	01 96       	adiw	r24, 0x01	; 1
     980:	8f 30       	cpi	r24, 0x0F	; 15
     982:	27 e2       	ldi	r18, 0x27	; 39
     984:	92 07       	cpc	r25, r18
     986:	2c f4       	brge	.+10     	; 0x992 <Control_Tick+0x56>
     988:	90 93 a0 07 	sts	0x07A0, r25	; 0x8007a0 <random_seed_val+0x1>
     98c:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <random_seed_val>
     990:	04 c0       	rjmp	.+8      	; 0x99a <Control_Tick+0x5e>
     992:	10 92 a0 07 	sts	0x07A0, r1	; 0x8007a0 <random_seed_val+0x1>
     996:	10 92 9f 07 	sts	0x079F, r1	; 0x80079f <random_seed_val>
     99a:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <delay_timing>
     99e:	81 11       	cpse	r24, r1
     9a0:	07 c0       	rjmp	.+14     	; 0x9b0 <Control_Tick+0x74>
     9a2:	85 e0       	ldi	r24, 0x05	; 5
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <delay_sec+0x1>
     9aa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <delay_sec>
     9ae:	0f c0       	rjmp	.+30     	; 0x9ce <Control_Tick+0x92>
     9b0:	81 30       	cpi	r24, 0x01	; 1
     9b2:	39 f4       	brne	.+14     	; 0x9c2 <Control_Tick+0x86>
     9b4:	8a e0       	ldi	r24, 0x0A	; 10
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <delay_sec+0x1>
     9bc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <delay_sec>
     9c0:	06 c0       	rjmp	.+12     	; 0x9ce <Control_Tick+0x92>
     9c2:	8f e0       	ldi	r24, 0x0F	; 15
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <delay_sec+0x1>
     9ca:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <delay_sec>
     9ce:	85 b1       	in	r24, 0x05	; 5
     9d0:	8f 70       	andi	r24, 0x0F	; 15
     9d2:	85 b9       	out	0x05, r24	; 5
     9d4:	2c 9a       	sbi	0x05, 4	; 5
     9d6:	2e c0       	rjmp	.+92     	; 0xa34 <Control_Tick+0xf8>
     9d8:	85 b1       	in	r24, 0x05	; 5
     9da:	8f 70       	andi	r24, 0x0F	; 15
     9dc:	85 b9       	out	0x05, r24	; 5
     9de:	85 b1       	in	r24, 0x05	; 5
     9e0:	80 65       	ori	r24, 0x50	; 80
     9e2:	85 b9       	out	0x05, r24	; 5
     9e4:	27 c0       	rjmp	.+78     	; 0xa34 <Control_Tick+0xf8>
     9e6:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <vishal_counter>
     9ea:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <vishal_counter+0x1>
     9ee:	01 96       	adiw	r24, 0x01	; 1
     9f0:	90 93 89 07 	sts	0x0789, r25	; 0x800789 <vishal_counter+0x1>
     9f4:	80 93 88 07 	sts	0x0788, r24	; 0x800788 <vishal_counter>
     9f8:	8a c0       	rjmp	.+276    	; 0xb0e <Control_Tick+0x1d2>
     9fa:	85 b1       	in	r24, 0x05	; 5
     9fc:	8f 70       	andi	r24, 0x0F	; 15
     9fe:	85 b9       	out	0x05, r24	; 5
     a00:	85 b1       	in	r24, 0x05	; 5
     a02:	80 63       	ori	r24, 0x30	; 48
     a04:	85 b9       	out	0x05, r24	; 5
     a06:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <controll_counter>
     a0a:	90 91 8b 07 	lds	r25, 0x078B	; 0x80078b <controll_counter+0x1>
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	90 93 8b 07 	sts	0x078B, r25	; 0x80078b <controll_counter+0x1>
     a14:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <controll_counter>
     a18:	0d c0       	rjmp	.+26     	; 0xa34 <Control_Tick+0xf8>
     a1a:	85 b1       	in	r24, 0x05	; 5
     a1c:	8f 70       	andi	r24, 0x0F	; 15
     a1e:	85 b9       	out	0x05, r24	; 5
     a20:	2e 9a       	sbi	0x05, 6	; 5
     a22:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <controll_counter>
     a26:	90 91 8b 07 	lds	r25, 0x078B	; 0x80078b <controll_counter+0x1>
     a2a:	01 96       	adiw	r24, 0x01	; 1
     a2c:	90 93 8b 07 	sts	0x078B, r25	; 0x80078b <controll_counter+0x1>
     a30:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <controll_counter>
     a34:	80 91 02 08 	lds	r24, 0x0802	; 0x800802 <control_state>
     a38:	82 30       	cpi	r24, 0x02	; 2
     a3a:	09 f4       	brne	.+2      	; 0xa3e <Control_Tick+0x102>
     a3c:	53 c0       	rjmp	.+166    	; 0xae4 <Control_Tick+0x1a8>
     a3e:	28 f4       	brcc	.+10     	; 0xa4a <Control_Tick+0x10e>
     a40:	88 23       	and	r24, r24
     a42:	61 f0       	breq	.+24     	; 0xa5c <Control_Tick+0x120>
     a44:	81 30       	cpi	r24, 0x01	; 1
     a46:	01 f1       	breq	.+64     	; 0xa88 <Control_Tick+0x14c>
     a48:	08 95       	ret
     a4a:	84 30       	cpi	r24, 0x04	; 4
     a4c:	09 f4       	brne	.+2      	; 0xa50 <Control_Tick+0x114>
     a4e:	72 c0       	rjmp	.+228    	; 0xb34 <Control_Tick+0x1f8>
     a50:	08 f4       	brcc	.+2      	; 0xa54 <Control_Tick+0x118>
     a52:	5d c0       	rjmp	.+186    	; 0xb0e <Control_Tick+0x1d2>
     a54:	85 30       	cpi	r24, 0x05	; 5
     a56:	09 f4       	brne	.+2      	; 0xa5a <Control_Tick+0x11e>
     a58:	b3 c0       	rjmp	.+358    	; 0xbc0 <Control_Tick+0x284>
     a5a:	08 95       	ret
     a5c:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <ARM_DISARM>
     a60:	81 30       	cpi	r24, 0x01	; 1
     a62:	09 f0       	breq	.+2      	; 0xa66 <Control_Tick+0x12a>
     a64:	c8 c0       	rjmp	.+400    	; 0xbf6 <Control_Tick+0x2ba>
     a66:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <control_state>
     a6a:	10 92 a2 07 	sts	0x07A2, r1	; 0x8007a2 <systems_go>
     a6e:	10 92 8b 07 	sts	0x078B, r1	; 0x80078b <controll_counter+0x1>
     a72:	10 92 8a 07 	sts	0x078A, r1	; 0x80078a <controll_counter>
     a76:	10 92 89 07 	sts	0x0789, r1	; 0x800789 <vishal_counter+0x1>
     a7a:	10 92 88 07 	sts	0x0788, r1	; 0x800788 <vishal_counter>
     a7e:	10 92 a0 07 	sts	0x07A0, r1	; 0x8007a0 <random_seed_val+0x1>
     a82:	10 92 9f 07 	sts	0x079F, r1	; 0x80079f <random_seed_val>
     a86:	08 95       	ret
     a88:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <ARM_DISARM>
     a8c:	81 11       	cpse	r24, r1
     a8e:	03 c0       	rjmp	.+6      	; 0xa96 <Control_Tick+0x15a>
     a90:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <control_state>
     a94:	08 95       	ret
     a96:	80 b1       	in	r24, 0x00	; 0
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	88 0f       	add	r24, r24
     a9c:	89 2f       	mov	r24, r25
     a9e:	88 1f       	adc	r24, r24
     aa0:	99 0b       	sbc	r25, r25
     aa2:	91 95       	neg	r25
     aa4:	89 2b       	or	r24, r25
     aa6:	61 f0       	breq	.+24     	; 0xac0 <Control_Tick+0x184>
     aa8:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <peripheral_setting>
     aac:	81 30       	cpi	r24, 0x01	; 1
     aae:	41 f4       	brne	.+16     	; 0xac0 <Control_Tick+0x184>
     ab0:	82 e0       	ldi	r24, 0x02	; 2
     ab2:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <control_state>
     ab6:	10 92 89 07 	sts	0x0789, r1	; 0x800789 <vishal_counter+0x1>
     aba:	10 92 88 07 	sts	0x0788, r1	; 0x800788 <vishal_counter>
     abe:	08 95       	ret
     ac0:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <motion_detected>
     ac4:	81 30       	cpi	r24, 0x01	; 1
     ac6:	09 f0       	breq	.+2      	; 0xaca <Control_Tick+0x18e>
     ac8:	96 c0       	rjmp	.+300    	; 0xbf6 <Control_Tick+0x2ba>
     aca:	84 e0       	ldi	r24, 0x04	; 4
     acc:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <control_state>
     ad0:	10 92 8b 07 	sts	0x078B, r1	; 0x80078b <controll_counter+0x1>
     ad4:	10 92 8a 07 	sts	0x078A, r1	; 0x80078a <controll_counter>
     ad8:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <random_seed_val>
     adc:	90 91 a0 07 	lds	r25, 0x07A0	; 0x8007a0 <random_seed_val+0x1>
     ae0:	6a c6       	rjmp	.+3284   	; 0x17b6 <srand>
     ae2:	08 95       	ret
     ae4:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <ARM_DISARM>
     ae8:	81 11       	cpse	r24, r1
     aea:	03 c0       	rjmp	.+6      	; 0xaf2 <Control_Tick+0x1b6>
     aec:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <control_state>
     af0:	08 95       	ret
     af2:	80 b1       	in	r24, 0x00	; 0
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	88 0f       	add	r24, r24
     af8:	89 2f       	mov	r24, r25
     afa:	88 1f       	adc	r24, r24
     afc:	99 0b       	sbc	r25, r25
     afe:	91 95       	neg	r25
     b00:	89 2b       	or	r24, r25
     b02:	09 f0       	breq	.+2      	; 0xb06 <Control_Tick+0x1ca>
     b04:	78 c0       	rjmp	.+240    	; 0xbf6 <Control_Tick+0x2ba>
     b06:	83 e0       	ldi	r24, 0x03	; 3
     b08:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <control_state>
     b0c:	08 95       	ret
     b0e:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <ARM_DISARM>
     b12:	81 11       	cpse	r24, r1
     b14:	03 c0       	rjmp	.+6      	; 0xb1c <Control_Tick+0x1e0>
     b16:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <control_state>
     b1a:	08 95       	ret
     b1c:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <vishal_counter>
     b20:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <vishal_counter+0x1>
     b24:	88 38       	cpi	r24, 0x88	; 136
     b26:	93 41       	sbci	r25, 0x13	; 19
     b28:	0c f4       	brge	.+2      	; 0xb2c <Control_Tick+0x1f0>
     b2a:	65 c0       	rjmp	.+202    	; 0xbf6 <Control_Tick+0x2ba>
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <control_state>
     b32:	08 95       	ret
     b34:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <ARM_DISARM>
     b38:	81 11       	cpse	r24, r1
     b3a:	07 c0       	rjmp	.+14     	; 0xb4a <Control_Tick+0x20e>
     b3c:	10 92 8b 07 	sts	0x078B, r1	; 0x80078b <controll_counter+0x1>
     b40:	10 92 8a 07 	sts	0x078A, r1	; 0x80078a <controll_counter>
     b44:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <control_state>
     b48:	08 95       	ret
     b4a:	80 b1       	in	r24, 0x00	; 0
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	88 0f       	add	r24, r24
     b50:	89 2f       	mov	r24, r25
     b52:	88 1f       	adc	r24, r24
     b54:	99 0b       	sbc	r25, r25
     b56:	91 95       	neg	r25
     b58:	89 2b       	or	r24, r25
     b5a:	61 f0       	breq	.+24     	; 0xb74 <Control_Tick+0x238>
     b5c:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <peripheral_setting>
     b60:	81 30       	cpi	r24, 0x01	; 1
     b62:	41 f4       	brne	.+16     	; 0xb74 <Control_Tick+0x238>
     b64:	82 e0       	ldi	r24, 0x02	; 2
     b66:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <control_state>
     b6a:	10 92 89 07 	sts	0x0789, r1	; 0x800789 <vishal_counter+0x1>
     b6e:	10 92 88 07 	sts	0x0788, r1	; 0x800788 <vishal_counter>
     b72:	08 95       	ret
     b74:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <delay_sec>
     b78:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <delay_sec+0x1>
     b7c:	88 ee       	ldi	r24, 0xE8	; 232
     b7e:	93 e0       	ldi	r25, 0x03	; 3
     b80:	48 9f       	mul	r20, r24
     b82:	90 01       	movw	r18, r0
     b84:	49 9f       	mul	r20, r25
     b86:	30 0d       	add	r19, r0
     b88:	58 9f       	mul	r21, r24
     b8a:	30 0d       	add	r19, r0
     b8c:	11 24       	eor	r1, r1
     b8e:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <controll_counter>
     b92:	90 91 8b 07 	lds	r25, 0x078B	; 0x80078b <controll_counter+0x1>
     b96:	82 17       	cp	r24, r18
     b98:	93 07       	cpc	r25, r19
     b9a:	3c f0       	brlt	.+14     	; 0xbaa <Control_Tick+0x26e>
     b9c:	85 e0       	ldi	r24, 0x05	; 5
     b9e:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <control_state>
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <systems_go>
     ba8:	08 95       	ret
     baa:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <motion_detected>
     bae:	81 30       	cpi	r24, 0x01	; 1
     bb0:	11 f1       	breq	.+68     	; 0xbf6 <Control_Tick+0x2ba>
     bb2:	10 92 8b 07 	sts	0x078B, r1	; 0x80078b <controll_counter+0x1>
     bb6:	10 92 8a 07 	sts	0x078A, r1	; 0x80078a <controll_counter>
     bba:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <control_state>
     bbe:	08 95       	ret
     bc0:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <ARM_DISARM>
     bc4:	81 11       	cpse	r24, r1
     bc6:	03 c0       	rjmp	.+6      	; 0xbce <Control_Tick+0x292>
     bc8:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <control_state>
     bcc:	08 95       	ret
     bce:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <controll_counter>
     bd2:	90 91 8b 07 	lds	r25, 0x078B	; 0x80078b <controll_counter+0x1>
     bd6:	80 33       	cpi	r24, 0x30	; 48
     bd8:	95 47       	sbci	r25, 0x75	; 117
     bda:	6c f0       	brlt	.+26     	; 0xbf6 <Control_Tick+0x2ba>
     bdc:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <motion_detected>
     be0:	81 11       	cpse	r24, r1
     be2:	09 c0       	rjmp	.+18     	; 0xbf6 <Control_Tick+0x2ba>
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <control_state>
     bea:	10 92 8b 07 	sts	0x078B, r1	; 0x80078b <controll_counter+0x1>
     bee:	10 92 8a 07 	sts	0x078A, r1	; 0x80078a <controll_counter>
     bf2:	10 92 a2 07 	sts	0x07A2, r1	; 0x8007a2 <systems_go>
     bf6:	08 95       	ret

00000bf8 <ControlSecTask>:
     bf8:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <control_state>
     bfc:	9f de       	rcall	.-706    	; 0x93c <Control_Tick>
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	a7 d4       	rcall	.+2382   	; 0x1552 <vTaskDelay>
     c04:	fb cf       	rjmp	.-10     	; 0xbfc <ControlSecTask+0x4>

00000c06 <StartControlPulse>:
     c06:	af 92       	push	r10
     c08:	bf 92       	push	r11
     c0a:	cf 92       	push	r12
     c0c:	df 92       	push	r13
     c0e:	ef 92       	push	r14
     c10:	ff 92       	push	r15
     c12:	0f 93       	push	r16
     c14:	a1 2c       	mov	r10, r1
     c16:	b1 2c       	mov	r11, r1
     c18:	c1 2c       	mov	r12, r1
     c1a:	d1 2c       	mov	r13, r1
     c1c:	e1 2c       	mov	r14, r1
     c1e:	f1 2c       	mov	r15, r1
     c20:	08 2f       	mov	r16, r24
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	45 e5       	ldi	r20, 0x55	; 85
     c28:	50 e0       	ldi	r21, 0x00	; 0
     c2a:	6a e8       	ldi	r22, 0x8A	; 138
     c2c:	71 e0       	ldi	r23, 0x01	; 1
     c2e:	8c ef       	ldi	r24, 0xFC	; 252
     c30:	95 e0       	ldi	r25, 0x05	; 5
     c32:	1c d2       	rcall	.+1080   	; 0x106c <xTaskGenericCreate>
     c34:	0f 91       	pop	r16
     c36:	ff 90       	pop	r15
     c38:	ef 90       	pop	r14
     c3a:	df 90       	pop	r13
     c3c:	cf 90       	pop	r12
     c3e:	bf 90       	pop	r11
     c40:	af 90       	pop	r10
     c42:	08 95       	ret

00000c44 <Rec_Tick>:
}

void Rec_Tick(){
	//Actions
	switch(rec_state){
     c44:	80 91 03 08 	lds	r24, 0x0803	; 0x800803 <rec_state>
     c48:	81 30       	cpi	r24, 0x01	; 1
     c4a:	61 f5       	brne	.+88     	; 0xca4 <Rec_Tick+0x60>
		break;


		case Receive_State:
		//ARM_DISARM = USART_Receive(0); //receive data
		 received_data = USART_Receive(0);
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	3d db       	rcall	.-2438   	; 0x2ca <USART_Receive>
     c50:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <received_data>
		 //delay_timing 0 = 5 sec, 1 = 10 sec, 2 = 15 sec
		 //bark_setting 0 = minor, 1 = major
		 //Peripheral setting 0 = don't use peripheral, 1 = use peripheral
		 
		 //set arm_disarm
		 if(GetBit(received_data,0)==1){ //system is armed
     c54:	80 ff       	sbrs	r24, 0
     c56:	04 c0       	rjmp	.+8      	; 0xc60 <Rec_Tick+0x1c>
			 ARM_DISARM = 1;
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <ARM_DISARM>
     c5e:	20 c0       	rjmp	.+64     	; 0xca0 <Rec_Tick+0x5c>
			 //PORTB = PORTB | 0x40; //set pin B6 high
			 //PORTB = 0xFF;
			 
		 }
		 else{                           //system is disarmed
			 ARM_DISARM = 0;
     c60:	10 92 a5 07 	sts	0x07A5, r1	; 0x8007a5 <ARM_DISARM>
			 //PORTB = 0x00;
			 //PORTB = PORTB & 0xBF; //set pin B6 low
			 
			 //set delay timing
			 if(GetBit(received_data,1) == 1){ //delay 10 second
     c64:	81 ff       	sbrs	r24, 1
     c66:	04 c0       	rjmp	.+8      	; 0xc70 <Rec_Tick+0x2c>
				 delay_timing = 1;
     c68:	21 e0       	ldi	r18, 0x01	; 1
     c6a:	20 93 a4 07 	sts	0x07A4, r18	; 0x8007a4 <delay_timing>
     c6e:	08 c0       	rjmp	.+16     	; 0xc80 <Rec_Tick+0x3c>
			 }
			 else if(GetBit(received_data,2) == 1){//delay 15 second
     c70:	82 ff       	sbrs	r24, 2
     c72:	04 c0       	rjmp	.+8      	; 0xc7c <Rec_Tick+0x38>
				 delay_timing = 2;
     c74:	22 e0       	ldi	r18, 0x02	; 2
     c76:	20 93 a4 07 	sts	0x07A4, r18	; 0x8007a4 <delay_timing>
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <Rec_Tick+0x3c>
			 }
			 else{                           //delay 5 second
				 delay_timing = 0;
     c7c:	10 92 a4 07 	sts	0x07A4, r1	; 0x8007a4 <delay_timing>
			 }
			 
			 //set bark settings
			 if(GetBit(received_data,3)==1){ //Major Bark
     c80:	83 ff       	sbrs	r24, 3
     c82:	04 c0       	rjmp	.+8      	; 0xc8c <Rec_Tick+0x48>
				 bark_setting = 1;
     c84:	21 e0       	ldi	r18, 0x01	; 1
     c86:	20 93 a3 07 	sts	0x07A3, r18	; 0x8007a3 <bark_setting>
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <Rec_Tick+0x4c>
			 }
			 else{                           //Minor Bark
				 bark_setting = 0;
     c8c:	10 92 a3 07 	sts	0x07A3, r1	; 0x8007a3 <bark_setting>
			 }
			 
			 //set peripheral setting
			 if(GetBit(received_data,4)==1){ //use peripheral
     c90:	84 ff       	sbrs	r24, 4
     c92:	04 c0       	rjmp	.+8      	; 0xc9c <Rec_Tick+0x58>
				 peripheral_setting = 1;
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <peripheral_setting>
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <Rec_Tick+0x5c>
			 }
			 else{                           //don't use peripheral
				 peripheral_setting = 0;
     c9c:	10 92 a1 07 	sts	0x07A1, r1	; 0x8007a1 <peripheral_setting>
			 }
		 }
		 
		  
	
		USART_Flush(0); //flush so flag reset
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	f6 da       	rcall	.-2580   	; 0x290 <USART_Flush>
		
		default:
		break;
	}
	//Transitions
	switch(rec_state){
     ca4:	80 91 03 08 	lds	r24, 0x0803	; 0x800803 <rec_state>
     ca8:	88 23       	and	r24, r24
     caa:	19 f0       	breq	.+6      	; 0xcb2 <Rec_Tick+0x6e>
			}
		break;


		case Receive_State:
			rec_state = Rec_Wait; //go back 
     cac:	10 92 03 08 	sts	0x0803, r1	; 0x800803 <rec_state>
     cb0:	08 95       	ret
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
     cb2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
		break;
	}
	//Transitions
	switch(rec_state){
		case Rec_Wait:
			if(USART_HasReceived(0)){
     cb6:	88 23       	and	r24, r24
     cb8:	1c f4       	brge	.+6      	; 0xcc0 <Rec_Tick+0x7c>
				rec_state = Receive_State; //if ready go to next state
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	80 93 03 08 	sts	0x0803, r24	; 0x800803 <rec_state>
     cc0:	08 95       	ret

00000cc2 <RecSecTask>:
//RECEIVE FSM

enum RECState {Rec_Wait, Receive_State } rec_state;

void REC_Init(){
	rec_state = Rec_Wait;
     cc2:	10 92 03 08 	sts	0x0803, r1	; 0x800803 <rec_state>
void RecSecTask()
{
	REC_Init();
	for(;;)
	{
		Rec_Tick();
     cc6:	be df       	rcall	.-132    	; 0xc44 <Rec_Tick>
		vTaskDelay(10);
     cc8:	8a e0       	ldi	r24, 0x0A	; 10
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	42 d4       	rcall	.+2180   	; 0x1552 <vTaskDelay>
     cce:	fb cf       	rjmp	.-10     	; 0xcc6 <RecSecTask+0x4>

00000cd0 <RecSecPulse>:
	}
}

void RecSecPulse(unsigned portBASE_TYPE Priority)
{
     cd0:	af 92       	push	r10
     cd2:	bf 92       	push	r11
     cd4:	cf 92       	push	r12
     cd6:	df 92       	push	r13
     cd8:	ef 92       	push	r14
     cda:	ff 92       	push	r15
     cdc:	0f 93       	push	r16
	xTaskCreate(RecSecTask, (signed portCHAR *)"RecSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     cde:	a1 2c       	mov	r10, r1
     ce0:	b1 2c       	mov	r11, r1
     ce2:	c1 2c       	mov	r12, r1
     ce4:	d1 2c       	mov	r13, r1
     ce6:	e1 2c       	mov	r14, r1
     ce8:	f1 2c       	mov	r15, r1
     cea:	08 2f       	mov	r16, r24
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	45 e5       	ldi	r20, 0x55	; 85
     cf2:	50 e0       	ldi	r21, 0x00	; 0
     cf4:	69 e9       	ldi	r22, 0x99	; 153
     cf6:	71 e0       	ldi	r23, 0x01	; 1
     cf8:	81 e6       	ldi	r24, 0x61	; 97
     cfa:	96 e0       	ldi	r25, 0x06	; 6
     cfc:	b7 d1       	rcall	.+878    	; 0x106c <xTaskGenericCreate>
}
     cfe:	0f 91       	pop	r16
     d00:	ff 90       	pop	r15
     d02:	ef 90       	pop	r14
     d04:	df 90       	pop	r13
     d06:	cf 90       	pop	r12
     d08:	bf 90       	pop	r11
     d0a:	af 90       	pop	r10
     d0c:	08 95       	ret

00000d0e <main>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//END FSMs
 
int main(void) 
{ 
   DDRA = 0x00; PORTA=0xFF; //set to input
     d0e:	11 b8       	out	0x01, r1	; 1
     d10:	8f ef       	ldi	r24, 0xFF	; 255
     d12:	82 b9       	out	0x02, r24	; 2
   DDRB = 0xFF; PORTB = 0x00; //set to output
     d14:	84 b9       	out	0x04, r24	; 4
     d16:	15 b8       	out	0x05, r1	; 5
   DDRC = 0xFF; PORTC = 0x00;
     d18:	87 b9       	out	0x07, r24	; 7
     d1a:	18 b8       	out	0x08, r1	; 8
   PORTC = 0x0C; //set pins C2,C3 to high so audio wont play
     d1c:	8c e0       	ldi	r24, 0x0C	; 12
     d1e:	88 b9       	out	0x08, r24	; 8
   //DDRD = 0xFF; PORTD = 0x00; //used by USART 0
   initUSART(0);//Initialize USART 0
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	94 da       	rcall	.-2776   	; 0x24c <initUSART>
   //Start Tasks  
   RecSecPulse(1); 
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	d4 df       	rcall	.-88     	; 0xcd0 <RecSecPulse>
   StartMotionPulse(1);
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	e9 dd       	rcall	.-1070   	; 0x8fe <StartMotionPulse>
   StartControlPulse(1);
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	6b df       	rcall	.-298    	; 0xc06 <StartControlPulse>
   
   MotorSecPulse(1);
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	6c db       	rcall	.-2344   	; 0x40c <MotorSecPulse>
   Start_stepper_controller_Pulse(1);
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	d1 db       	rcall	.-2142   	; 0x4da <Start_stepper_controller_Pulse>
   Start_servo_controller_Pulse(1);
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	1f dd       	rcall	.-1474   	; 0x77a <Start_servo_controller_Pulse>
   SERVODRIVESecPulse(1);
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	27 dc       	rcall	.-1970   	; 0x58e <SERVODRIVESecPulse>
     d40:	81 e0       	ldi	r24, 0x01	; 1
   SERVOSecPulse(1);
     d42:	96 dc       	rcall	.-1748   	; 0x670 <SERVOSecPulse>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	69 dd       	rcall	.-1326   	; 0x81a <StartAudioPulse>
   StartAudioPulse(1);
     d48:	8d d2       	rcall	.+1306   	; 0x1264 <vTaskStartScheduler>
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	90 e0       	ldi	r25, 0x00	; 0
    //RunSchedular 
   vTaskStartScheduler(); 
     d4e:	08 95       	ret

00000d50 <pxPortInitialiseStack>:
     d50:	31 e1       	ldi	r19, 0x11	; 17
 
   return 0; 
}
     d52:	fc 01       	movw	r30, r24
     d54:	30 83       	st	Z, r19
     d56:	31 97       	sbiw	r30, 0x01	; 1
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     d58:	22 e2       	ldi	r18, 0x22	; 34
     d5a:	20 83       	st	Z, r18
     d5c:	31 97       	sbiw	r30, 0x01	; 1
     d5e:	a3 e3       	ldi	r26, 0x33	; 51
     d60:	a0 83       	st	Z, r26
     d62:	31 97       	sbiw	r30, 0x01	; 1
     d64:	60 83       	st	Z, r22
     d66:	31 97       	sbiw	r30, 0x01	; 1
     d68:	70 83       	st	Z, r23
     d6a:	31 97       	sbiw	r30, 0x01	; 1
     d6c:	10 82       	st	Z, r1
     d6e:	31 97       	sbiw	r30, 0x01	; 1
     d70:	60 e8       	ldi	r22, 0x80	; 128
     d72:	60 83       	st	Z, r22
     d74:	31 97       	sbiw	r30, 0x01	; 1
     d76:	10 82       	st	Z, r1
     d78:	31 97       	sbiw	r30, 0x01	; 1
     d7a:	62 e0       	ldi	r22, 0x02	; 2
     d7c:	60 83       	st	Z, r22
     d7e:	31 97       	sbiw	r30, 0x01	; 1
     d80:	63 e0       	ldi	r22, 0x03	; 3
     d82:	60 83       	st	Z, r22
     d84:	31 97       	sbiw	r30, 0x01	; 1
     d86:	64 e0       	ldi	r22, 0x04	; 4
     d88:	60 83       	st	Z, r22
     d8a:	31 97       	sbiw	r30, 0x01	; 1
     d8c:	65 e0       	ldi	r22, 0x05	; 5
     d8e:	60 83       	st	Z, r22
     d90:	31 97       	sbiw	r30, 0x01	; 1
     d92:	66 e0       	ldi	r22, 0x06	; 6
     d94:	60 83       	st	Z, r22
     d96:	31 97       	sbiw	r30, 0x01	; 1
     d98:	67 e0       	ldi	r22, 0x07	; 7
     d9a:	60 83       	st	Z, r22
     d9c:	31 97       	sbiw	r30, 0x01	; 1
     d9e:	68 e0       	ldi	r22, 0x08	; 8
     da0:	60 83       	st	Z, r22
     da2:	31 97       	sbiw	r30, 0x01	; 1
     da4:	69 e0       	ldi	r22, 0x09	; 9
     da6:	60 83       	st	Z, r22
     da8:	31 97       	sbiw	r30, 0x01	; 1
     daa:	60 e1       	ldi	r22, 0x10	; 16
     dac:	60 83       	st	Z, r22
     dae:	31 97       	sbiw	r30, 0x01	; 1
     db0:	30 83       	st	Z, r19
     db2:	31 97       	sbiw	r30, 0x01	; 1
     db4:	32 e1       	ldi	r19, 0x12	; 18
     db6:	30 83       	st	Z, r19
     db8:	31 97       	sbiw	r30, 0x01	; 1
     dba:	33 e1       	ldi	r19, 0x13	; 19
     dbc:	30 83       	st	Z, r19
     dbe:	31 97       	sbiw	r30, 0x01	; 1
     dc0:	34 e1       	ldi	r19, 0x14	; 20
     dc2:	30 83       	st	Z, r19
     dc4:	31 97       	sbiw	r30, 0x01	; 1
     dc6:	35 e1       	ldi	r19, 0x15	; 21
     dc8:	30 83       	st	Z, r19
     dca:	31 97       	sbiw	r30, 0x01	; 1
     dcc:	36 e1       	ldi	r19, 0x16	; 22
     dce:	30 83       	st	Z, r19
     dd0:	31 97       	sbiw	r30, 0x01	; 1
     dd2:	37 e1       	ldi	r19, 0x17	; 23
     dd4:	30 83       	st	Z, r19
     dd6:	31 97       	sbiw	r30, 0x01	; 1
     dd8:	38 e1       	ldi	r19, 0x18	; 24
     dda:	30 83       	st	Z, r19
     ddc:	31 97       	sbiw	r30, 0x01	; 1
     dde:	39 e1       	ldi	r19, 0x19	; 25
     de0:	30 83       	st	Z, r19
     de2:	31 97       	sbiw	r30, 0x01	; 1
     de4:	30 e2       	ldi	r19, 0x20	; 32
     de6:	30 83       	st	Z, r19
     de8:	31 97       	sbiw	r30, 0x01	; 1
     dea:	31 e2       	ldi	r19, 0x21	; 33
     dec:	30 83       	st	Z, r19
     dee:	31 97       	sbiw	r30, 0x01	; 1
     df0:	20 83       	st	Z, r18
     df2:	31 97       	sbiw	r30, 0x01	; 1
     df4:	23 e2       	ldi	r18, 0x23	; 35
     df6:	20 83       	st	Z, r18
     df8:	31 97       	sbiw	r30, 0x01	; 1
     dfa:	40 83       	st	Z, r20
     dfc:	31 97       	sbiw	r30, 0x01	; 1
     dfe:	50 83       	st	Z, r21
     e00:	31 97       	sbiw	r30, 0x01	; 1
     e02:	26 e2       	ldi	r18, 0x26	; 38
     e04:	20 83       	st	Z, r18
     e06:	31 97       	sbiw	r30, 0x01	; 1
     e08:	27 e2       	ldi	r18, 0x27	; 39
     e0a:	20 83       	st	Z, r18
     e0c:	31 97       	sbiw	r30, 0x01	; 1
     e0e:	28 e2       	ldi	r18, 0x28	; 40
     e10:	20 83       	st	Z, r18
     e12:	31 97       	sbiw	r30, 0x01	; 1
     e14:	29 e2       	ldi	r18, 0x29	; 41
     e16:	20 83       	st	Z, r18
     e18:	31 97       	sbiw	r30, 0x01	; 1
     e1a:	20 e3       	ldi	r18, 0x30	; 48
     e1c:	20 83       	st	Z, r18
     e1e:	31 97       	sbiw	r30, 0x01	; 1
     e20:	21 e3       	ldi	r18, 0x31	; 49
     e22:	20 83       	st	Z, r18
     e24:	86 97       	sbiw	r24, 0x26	; 38
     e26:	08 95       	ret

00000e28 <xPortStartScheduler>:
     e28:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     e2c:	8c e7       	ldi	r24, 0x7C	; 124
     e2e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     e32:	8b e0       	ldi	r24, 0x0B	; 11
     e34:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     e38:	ef e6       	ldi	r30, 0x6F	; 111
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	82 60       	ori	r24, 0x02	; 2
     e40:	80 83       	st	Z, r24
     e42:	a0 91 fe 07 	lds	r26, 0x07FE	; 0x8007fe <pxCurrentTCB>
     e46:	b0 91 ff 07 	lds	r27, 0x07FF	; 0x8007ff <pxCurrentTCB+0x1>
     e4a:	cd 91       	ld	r28, X+
     e4c:	cd bf       	out	0x3d, r28	; 61
     e4e:	dd 91       	ld	r29, X+
     e50:	de bf       	out	0x3e, r29	; 62
     e52:	ff 91       	pop	r31
     e54:	ef 91       	pop	r30
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	bf 91       	pop	r27
     e5c:	af 91       	pop	r26
     e5e:	9f 91       	pop	r25
     e60:	8f 91       	pop	r24
     e62:	7f 91       	pop	r23
     e64:	6f 91       	pop	r22
     e66:	5f 91       	pop	r21
     e68:	4f 91       	pop	r20
     e6a:	3f 91       	pop	r19
     e6c:	2f 91       	pop	r18
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
     e72:	ff 90       	pop	r15
     e74:	ef 90       	pop	r14
     e76:	df 90       	pop	r13
     e78:	cf 90       	pop	r12
     e7a:	bf 90       	pop	r11
     e7c:	af 90       	pop	r10
     e7e:	9f 90       	pop	r9
     e80:	8f 90       	pop	r8
     e82:	7f 90       	pop	r7
     e84:	6f 90       	pop	r6
     e86:	5f 90       	pop	r5
     e88:	4f 90       	pop	r4
     e8a:	3f 90       	pop	r3
     e8c:	2f 90       	pop	r2
     e8e:	1f 90       	pop	r1
     e90:	0f 90       	pop	r0
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	0f 90       	pop	r0
     e96:	08 95       	ret
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	08 95       	ret

00000e9c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     e9c:	0f 92       	push	r0
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	0f 92       	push	r0
     ea4:	1f 92       	push	r1
     ea6:	11 24       	eor	r1, r1
     ea8:	2f 92       	push	r2
     eaa:	3f 92       	push	r3
     eac:	4f 92       	push	r4
     eae:	5f 92       	push	r5
     eb0:	6f 92       	push	r6
     eb2:	7f 92       	push	r7
     eb4:	8f 92       	push	r8
     eb6:	9f 92       	push	r9
     eb8:	af 92       	push	r10
     eba:	bf 92       	push	r11
     ebc:	cf 92       	push	r12
     ebe:	df 92       	push	r13
     ec0:	ef 92       	push	r14
     ec2:	ff 92       	push	r15
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
     ec8:	2f 93       	push	r18
     eca:	3f 93       	push	r19
     ecc:	4f 93       	push	r20
     ece:	5f 93       	push	r21
     ed0:	6f 93       	push	r22
     ed2:	7f 93       	push	r23
     ed4:	8f 93       	push	r24
     ed6:	9f 93       	push	r25
     ed8:	af 93       	push	r26
     eda:	bf 93       	push	r27
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	ef 93       	push	r30
     ee2:	ff 93       	push	r31
     ee4:	a0 91 fe 07 	lds	r26, 0x07FE	; 0x8007fe <pxCurrentTCB>
     ee8:	b0 91 ff 07 	lds	r27, 0x07FF	; 0x8007ff <pxCurrentTCB+0x1>
     eec:	0d b6       	in	r0, 0x3d	; 61
     eee:	0d 92       	st	X+, r0
     ef0:	0e b6       	in	r0, 0x3e	; 62
     ef2:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     ef4:	83 d3       	rcall	.+1798   	; 0x15fc <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     ef6:	a0 91 fe 07 	lds	r26, 0x07FE	; 0x8007fe <pxCurrentTCB>
     efa:	b0 91 ff 07 	lds	r27, 0x07FF	; 0x8007ff <pxCurrentTCB+0x1>
     efe:	cd 91       	ld	r28, X+
     f00:	cd bf       	out	0x3d, r28	; 61
     f02:	dd 91       	ld	r29, X+
     f04:	de bf       	out	0x3e, r29	; 62
     f06:	ff 91       	pop	r31
     f08:	ef 91       	pop	r30
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	bf 91       	pop	r27
     f10:	af 91       	pop	r26
     f12:	9f 91       	pop	r25
     f14:	8f 91       	pop	r24
     f16:	7f 91       	pop	r23
     f18:	6f 91       	pop	r22
     f1a:	5f 91       	pop	r21
     f1c:	4f 91       	pop	r20
     f1e:	3f 91       	pop	r19
     f20:	2f 91       	pop	r18
     f22:	1f 91       	pop	r17
     f24:	0f 91       	pop	r16
     f26:	ff 90       	pop	r15
     f28:	ef 90       	pop	r14
     f2a:	df 90       	pop	r13
     f2c:	cf 90       	pop	r12
     f2e:	bf 90       	pop	r11
     f30:	af 90       	pop	r10
     f32:	9f 90       	pop	r9
     f34:	8f 90       	pop	r8
     f36:	7f 90       	pop	r7
     f38:	6f 90       	pop	r6
     f3a:	5f 90       	pop	r5
     f3c:	4f 90       	pop	r4
     f3e:	3f 90       	pop	r3
     f40:	2f 90       	pop	r2
     f42:	1f 90       	pop	r1
     f44:	0f 90       	pop	r0
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	0f 90       	pop	r0

	asm volatile ( "ret" );
     f4a:	08 95       	ret

00000f4c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     f4c:	0f 92       	push	r0
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	0f 92       	push	r0
     f54:	1f 92       	push	r1
     f56:	11 24       	eor	r1, r1
     f58:	2f 92       	push	r2
     f5a:	3f 92       	push	r3
     f5c:	4f 92       	push	r4
     f5e:	5f 92       	push	r5
     f60:	6f 92       	push	r6
     f62:	7f 92       	push	r7
     f64:	8f 92       	push	r8
     f66:	9f 92       	push	r9
     f68:	af 92       	push	r10
     f6a:	bf 92       	push	r11
     f6c:	cf 92       	push	r12
     f6e:	df 92       	push	r13
     f70:	ef 92       	push	r14
     f72:	ff 92       	push	r15
     f74:	0f 93       	push	r16
     f76:	1f 93       	push	r17
     f78:	2f 93       	push	r18
     f7a:	3f 93       	push	r19
     f7c:	4f 93       	push	r20
     f7e:	5f 93       	push	r21
     f80:	6f 93       	push	r22
     f82:	7f 93       	push	r23
     f84:	8f 93       	push	r24
     f86:	9f 93       	push	r25
     f88:	af 93       	push	r26
     f8a:	bf 93       	push	r27
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	ef 93       	push	r30
     f92:	ff 93       	push	r31
     f94:	a0 91 fe 07 	lds	r26, 0x07FE	; 0x8007fe <pxCurrentTCB>
     f98:	b0 91 ff 07 	lds	r27, 0x07FF	; 0x8007ff <pxCurrentTCB+0x1>
     f9c:	0d b6       	in	r0, 0x3d	; 61
     f9e:	0d 92       	st	X+, r0
     fa0:	0e b6       	in	r0, 0x3e	; 62
     fa2:	0d 92       	st	X+, r0
	vTaskIncrementTick();
     fa4:	8e d1       	rcall	.+796    	; 0x12c2 <vTaskIncrementTick>
	vTaskSwitchContext();
     fa6:	2a d3       	rcall	.+1620   	; 0x15fc <vTaskSwitchContext>
     fa8:	a0 91 fe 07 	lds	r26, 0x07FE	; 0x8007fe <pxCurrentTCB>
	portRESTORE_CONTEXT();
     fac:	b0 91 ff 07 	lds	r27, 0x07FF	; 0x8007ff <pxCurrentTCB+0x1>
     fb0:	cd 91       	ld	r28, X+
     fb2:	cd bf       	out	0x3d, r28	; 61
     fb4:	dd 91       	ld	r29, X+
     fb6:	de bf       	out	0x3e, r29	; 62
     fb8:	ff 91       	pop	r31
     fba:	ef 91       	pop	r30
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	bf 91       	pop	r27
     fc2:	af 91       	pop	r26
     fc4:	9f 91       	pop	r25
     fc6:	8f 91       	pop	r24
     fc8:	7f 91       	pop	r23
     fca:	6f 91       	pop	r22
     fcc:	5f 91       	pop	r21
     fce:	4f 91       	pop	r20
     fd0:	3f 91       	pop	r19
     fd2:	2f 91       	pop	r18
     fd4:	1f 91       	pop	r17
     fd6:	0f 91       	pop	r16
     fd8:	ff 90       	pop	r15
     fda:	ef 90       	pop	r14
     fdc:	df 90       	pop	r13
     fde:	cf 90       	pop	r12
     fe0:	bf 90       	pop	r11
     fe2:	af 90       	pop	r10
     fe4:	9f 90       	pop	r9
     fe6:	8f 90       	pop	r8
     fe8:	7f 90       	pop	r7
     fea:	6f 90       	pop	r6
     fec:	5f 90       	pop	r5
     fee:	4f 90       	pop	r4
     ff0:	3f 90       	pop	r3
     ff2:	2f 90       	pop	r2
     ff4:	1f 90       	pop	r1
     ff6:	0f 90       	pop	r0
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	0f 90       	pop	r0
     ffc:	08 95       	ret

00000ffe <__vector_13>:

	asm volatile ( "ret" );
     ffe:	a6 df       	rcall	.-180    	; 0xf4c <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
    1000:	18 95       	reti

00001002 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	ec 01       	movw	r28, r24
    1008:	e0 91 fe 07 	lds	r30, 0x07FE	; 0x8007fe <pxCurrentTCB>
    100c:	f0 91 ff 07 	lds	r31, 0x07FF	; 0x8007ff <pxCurrentTCB+0x1>
    1010:	93 83       	std	Z+3, r25	; 0x03
    1012:	82 83       	std	Z+2, r24	; 0x02
    1014:	80 91 ae 07 	lds	r24, 0x07AE	; 0x8007ae <xTickCount>
    1018:	90 91 af 07 	lds	r25, 0x07AF	; 0x8007af <xTickCount+0x1>
    101c:	c8 17       	cp	r28, r24
    101e:	d9 07       	cpc	r29, r25
    1020:	60 f4       	brcc	.+24     	; 0x103a <prvAddCurrentTaskToDelayedList+0x38>
    1022:	60 91 fe 07 	lds	r22, 0x07FE	; 0x8007fe <pxCurrentTCB>
    1026:	70 91 ff 07 	lds	r23, 0x07FF	; 0x8007ff <pxCurrentTCB+0x1>
    102a:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <pxOverflowDelayedTaskList>
    102e:	90 91 c5 07 	lds	r25, 0x07C5	; 0x8007c5 <pxOverflowDelayedTaskList+0x1>
    1032:	6e 5f       	subi	r22, 0xFE	; 254
    1034:	7f 4f       	sbci	r23, 0xFF	; 255
    1036:	a9 d8       	rcall	.-3758   	; 0x18a <vListInsert>
    1038:	16 c0       	rjmp	.+44     	; 0x1066 <prvAddCurrentTaskToDelayedList+0x64>
    103a:	60 91 fe 07 	lds	r22, 0x07FE	; 0x8007fe <pxCurrentTCB>
    103e:	70 91 ff 07 	lds	r23, 0x07FF	; 0x8007ff <pxCurrentTCB+0x1>
    1042:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxDelayedTaskList>
    1046:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxDelayedTaskList+0x1>
    104a:	6e 5f       	subi	r22, 0xFE	; 254
    104c:	7f 4f       	sbci	r23, 0xFF	; 255
    104e:	9d d8       	rcall	.-3782   	; 0x18a <vListInsert>
    1050:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <xNextTaskUnblockTime>
    1054:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <xNextTaskUnblockTime+0x1>
    1058:	c8 17       	cp	r28, r24
    105a:	d9 07       	cpc	r29, r25
    105c:	20 f4       	brcc	.+8      	; 0x1066 <prvAddCurrentTaskToDelayedList+0x64>
    105e:	d0 93 0f 01 	sts	0x010F, r29	; 0x80010f <xNextTaskUnblockTime+0x1>
    1062:	c0 93 0e 01 	sts	0x010E, r28	; 0x80010e <xNextTaskUnblockTime>
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	08 95       	ret

0000106c <xTaskGenericCreate>:
    106c:	4f 92       	push	r4
    106e:	5f 92       	push	r5
    1070:	6f 92       	push	r6
    1072:	7f 92       	push	r7
    1074:	8f 92       	push	r8
    1076:	9f 92       	push	r9
    1078:	af 92       	push	r10
    107a:	bf 92       	push	r11
    107c:	cf 92       	push	r12
    107e:	df 92       	push	r13
    1080:	ef 92       	push	r14
    1082:	ff 92       	push	r15
    1084:	0f 93       	push	r16
    1086:	1f 93       	push	r17
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	5c 01       	movw	r10, r24
    108e:	4b 01       	movw	r8, r22
    1090:	3a 01       	movw	r6, r20
    1092:	29 01       	movw	r4, r18
    1094:	81 e2       	ldi	r24, 0x21	; 33
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	18 d8       	rcall	.-4048   	; 0xca <pvPortMalloc>
    109a:	ec 01       	movw	r28, r24
    109c:	89 2b       	or	r24, r25
    109e:	09 f4       	brne	.+2      	; 0x10a2 <xTaskGenericCreate+0x36>
    10a0:	cf c0       	rjmp	.+414    	; 0x1240 <xTaskGenericCreate+0x1d4>
    10a2:	c1 14       	cp	r12, r1
    10a4:	d1 04       	cpc	r13, r1
    10a6:	09 f0       	breq	.+2      	; 0x10aa <xTaskGenericCreate+0x3e>
    10a8:	c7 c0       	rjmp	.+398    	; 0x1238 <xTaskGenericCreate+0x1cc>
    10aa:	c3 01       	movw	r24, r6
    10ac:	0e d8       	rcall	.-4068   	; 0xca <pvPortMalloc>
    10ae:	98 8f       	std	Y+24, r25	; 0x18
    10b0:	8f 8b       	std	Y+23, r24	; 0x17
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	19 f4       	brne	.+6      	; 0x10bc <xTaskGenericCreate+0x50>
    10b6:	ce 01       	movw	r24, r28
    10b8:	2e d8       	rcall	.-4004   	; 0x116 <vPortFree>
    10ba:	c2 c0       	rjmp	.+388    	; 0x1240 <xTaskGenericCreate+0x1d4>
    10bc:	a3 01       	movw	r20, r6
    10be:	65 ea       	ldi	r22, 0xA5	; 165
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    10c2:	84 d3       	rcall	.+1800   	; 0x17cc <memset>
    10c4:	93 01       	movw	r18, r6
    10c6:	21 50       	subi	r18, 0x01	; 1
    10c8:	31 09       	sbc	r19, r1
    10ca:	8f 89       	ldd	r24, Y+23	; 0x17
    10cc:	98 8d       	ldd	r25, Y+24	; 0x18
    10ce:	3c 01       	movw	r6, r24
    10d0:	62 0e       	add	r6, r18
    10d2:	73 1e       	adc	r7, r19
    10d4:	48 e0       	ldi	r20, 0x08	; 8
    10d6:	50 e0       	ldi	r21, 0x00	; 0
    10d8:	b4 01       	movw	r22, r8
    10da:	ce 01       	movw	r24, r28
    10dc:	49 96       	adiw	r24, 0x19	; 25
    10de:	7d d3       	rcall	.+1786   	; 0x17da <strncpy>
    10e0:	18 a2       	std	Y+32, r1	; 0x20
    10e2:	10 2f       	mov	r17, r16
    10e4:	04 30       	cpi	r16, 0x04	; 4
    10e6:	08 f0       	brcs	.+2      	; 0x10ea <xTaskGenericCreate+0x7e>
    10e8:	13 e0       	ldi	r17, 0x03	; 3
    10ea:	1e 8b       	std	Y+22, r17	; 0x16
    10ec:	6e 01       	movw	r12, r28
    10ee:	82 e0       	ldi	r24, 0x02	; 2
    10f0:	c8 0e       	add	r12, r24
    10f2:	d1 1c       	adc	r13, r1
    10f4:	c6 01       	movw	r24, r12
    10f6:	1e d8       	rcall	.-4036   	; 0x134 <vListInitialiseItem>
    10f8:	ce 01       	movw	r24, r28
    10fa:	0c 96       	adiw	r24, 0x0c	; 12
    10fc:	1b d8       	rcall	.-4042   	; 0x134 <vListInitialiseItem>
    10fe:	d9 87       	std	Y+9, r29	; 0x09
    1100:	c8 87       	std	Y+8, r28	; 0x08
    1102:	84 e0       	ldi	r24, 0x04	; 4
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	81 1b       	sub	r24, r17
    1108:	91 09       	sbc	r25, r1
    110a:	9d 87       	std	Y+13, r25	; 0x0d
    110c:	8c 87       	std	Y+12, r24	; 0x0c
    110e:	db 8b       	std	Y+19, r29	; 0x13
    1110:	ca 8b       	std	Y+18, r28	; 0x12
    1112:	a2 01       	movw	r20, r4
    1114:	b5 01       	movw	r22, r10
    1116:	c3 01       	movw	r24, r6
    1118:	1b de       	rcall	.-970    	; 0xd50 <pxPortInitialiseStack>
    111a:	99 83       	std	Y+1, r25	; 0x01
    111c:	88 83       	st	Y, r24
    111e:	e1 14       	cp	r14, r1
    1120:	f1 04       	cpc	r15, r1
    1122:	19 f0       	breq	.+6      	; 0x112a <xTaskGenericCreate+0xbe>
    1124:	f7 01       	movw	r30, r14
    1126:	d1 83       	std	Z+1, r29	; 0x01
    1128:	c0 83       	st	Z, r28
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	0f 92       	push	r0
    1130:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <uxCurrentNumberOfTasks>
    1134:	8f 5f       	subi	r24, 0xFF	; 255
    1136:	80 93 b0 07 	sts	0x07B0, r24	; 0x8007b0 <uxCurrentNumberOfTasks>
    113a:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <pxCurrentTCB>
    113e:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <pxCurrentTCB+0x1>
    1142:	89 2b       	or	r24, r25
    1144:	a9 f5       	brne	.+106    	; 0x11b0 <xTaskGenericCreate+0x144>
    1146:	d0 93 ff 07 	sts	0x07FF, r29	; 0x8007ff <pxCurrentTCB+0x1>
    114a:	c0 93 fe 07 	sts	0x07FE, r28	; 0x8007fe <pxCurrentTCB>
    114e:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <uxCurrentNumberOfTasks>
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	e1 f5       	brne	.+120    	; 0x11ce <xTaskGenericCreate+0x162>
    1156:	8a ed       	ldi	r24, 0xDA	; 218
    1158:	97 e0       	ldi	r25, 0x07	; 7
    115a:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    115e:	83 ee       	ldi	r24, 0xE3	; 227
    1160:	97 e0       	ldi	r25, 0x07	; 7
    1162:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    1166:	8c ee       	ldi	r24, 0xEC	; 236
    1168:	97 e0       	ldi	r25, 0x07	; 7
    116a:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    116e:	85 ef       	ldi	r24, 0xF5	; 245
    1170:	97 e0       	ldi	r25, 0x07	; 7
    1172:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    1176:	81 ed       	ldi	r24, 0xD1	; 209
    1178:	97 e0       	ldi	r25, 0x07	; 7
    117a:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    117e:	88 ec       	ldi	r24, 0xC8	; 200
    1180:	97 e0       	ldi	r25, 0x07	; 7
    1182:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    1186:	8b eb       	ldi	r24, 0xBB	; 187
    1188:	97 e0       	ldi	r25, 0x07	; 7
    118a:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    118e:	82 eb       	ldi	r24, 0xB2	; 178
    1190:	97 e0       	ldi	r25, 0x07	; 7
    1192:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    1196:	81 ed       	ldi	r24, 0xD1	; 209
    1198:	97 e0       	ldi	r25, 0x07	; 7
    119a:	90 93 c7 07 	sts	0x07C7, r25	; 0x8007c7 <pxDelayedTaskList+0x1>
    119e:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <pxDelayedTaskList>
    11a2:	88 ec       	ldi	r24, 0xC8	; 200
    11a4:	97 e0       	ldi	r25, 0x07	; 7
    11a6:	90 93 c5 07 	sts	0x07C5, r25	; 0x8007c5 <pxOverflowDelayedTaskList+0x1>
    11aa:	80 93 c4 07 	sts	0x07C4, r24	; 0x8007c4 <pxOverflowDelayedTaskList>
    11ae:	0f c0       	rjmp	.+30     	; 0x11ce <xTaskGenericCreate+0x162>
    11b0:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <xSchedulerRunning>
    11b4:	81 11       	cpse	r24, r1
    11b6:	0b c0       	rjmp	.+22     	; 0x11ce <xTaskGenericCreate+0x162>
    11b8:	e0 91 fe 07 	lds	r30, 0x07FE	; 0x8007fe <pxCurrentTCB>
    11bc:	f0 91 ff 07 	lds	r31, 0x07FF	; 0x8007ff <pxCurrentTCB+0x1>
    11c0:	86 89       	ldd	r24, Z+22	; 0x16
    11c2:	08 17       	cp	r16, r24
    11c4:	20 f0       	brcs	.+8      	; 0x11ce <xTaskGenericCreate+0x162>
    11c6:	d0 93 ff 07 	sts	0x07FF, r29	; 0x8007ff <pxCurrentTCB+0x1>
    11ca:	c0 93 fe 07 	sts	0x07FE, r28	; 0x8007fe <pxCurrentTCB>
    11ce:	8e 89       	ldd	r24, Y+22	; 0x16
    11d0:	90 91 ad 07 	lds	r25, 0x07AD	; 0x8007ad <uxTopUsedPriority>
    11d4:	98 17       	cp	r25, r24
    11d6:	10 f4       	brcc	.+4      	; 0x11dc <xTaskGenericCreate+0x170>
    11d8:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <uxTopUsedPriority>
    11dc:	90 91 a6 07 	lds	r25, 0x07A6	; 0x8007a6 <uxTaskNumber>
    11e0:	9f 5f       	subi	r25, 0xFF	; 255
    11e2:	90 93 a6 07 	sts	0x07A6, r25	; 0x8007a6 <uxTaskNumber>
    11e6:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <uxTopReadyPriority>
    11ea:	98 17       	cp	r25, r24
    11ec:	10 f4       	brcc	.+4      	; 0x11f2 <xTaskGenericCreate+0x186>
    11ee:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <uxTopReadyPriority>
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	9c 01       	movw	r18, r24
    11f6:	22 0f       	add	r18, r18
    11f8:	33 1f       	adc	r19, r19
    11fa:	22 0f       	add	r18, r18
    11fc:	33 1f       	adc	r19, r19
    11fe:	22 0f       	add	r18, r18
    1200:	33 1f       	adc	r19, r19
    1202:	82 0f       	add	r24, r18
    1204:	93 1f       	adc	r25, r19
    1206:	b6 01       	movw	r22, r12
    1208:	86 52       	subi	r24, 0x26	; 38
    120a:	98 4f       	sbci	r25, 0xF8	; 248
    120c:	0e 94 9e 00 	call	0x13c	; 0x13c <vListInsertEnd>
    1210:	0f 90       	pop	r0
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <xSchedulerRunning>
    1218:	88 23       	and	r24, r24
    121a:	51 f0       	breq	.+20     	; 0x1230 <xTaskGenericCreate+0x1c4>
    121c:	e0 91 fe 07 	lds	r30, 0x07FE	; 0x8007fe <pxCurrentTCB>
    1220:	f0 91 ff 07 	lds	r31, 0x07FF	; 0x8007ff <pxCurrentTCB+0x1>
    1224:	86 89       	ldd	r24, Z+22	; 0x16
    1226:	80 17       	cp	r24, r16
    1228:	28 f4       	brcc	.+10     	; 0x1234 <xTaskGenericCreate+0x1c8>
    122a:	38 de       	rcall	.-912    	; 0xe9c <vPortYield>
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	09 c0       	rjmp	.+18     	; 0x1242 <xTaskGenericCreate+0x1d6>
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	07 c0       	rjmp	.+14     	; 0x1242 <xTaskGenericCreate+0x1d6>
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	05 c0       	rjmp	.+10     	; 0x1242 <xTaskGenericCreate+0x1d6>
    1238:	d8 8e       	std	Y+24, r13	; 0x18
    123a:	cf 8a       	std	Y+23, r12	; 0x17
    123c:	c6 01       	movw	r24, r12
    123e:	3e cf       	rjmp	.-388    	; 0x10bc <xTaskGenericCreate+0x50>
    1240:	8f ef       	ldi	r24, 0xFF	; 255
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	1f 91       	pop	r17
    1248:	0f 91       	pop	r16
    124a:	ff 90       	pop	r15
    124c:	ef 90       	pop	r14
    124e:	df 90       	pop	r13
    1250:	cf 90       	pop	r12
    1252:	bf 90       	pop	r11
    1254:	af 90       	pop	r10
    1256:	9f 90       	pop	r9
    1258:	8f 90       	pop	r8
    125a:	7f 90       	pop	r7
    125c:	6f 90       	pop	r6
    125e:	5f 90       	pop	r5
    1260:	4f 90       	pop	r4
    1262:	08 95       	ret

00001264 <vTaskStartScheduler>:
    1264:	af 92       	push	r10
    1266:	bf 92       	push	r11
    1268:	cf 92       	push	r12
    126a:	df 92       	push	r13
    126c:	ef 92       	push	r14
    126e:	ff 92       	push	r15
    1270:	0f 93       	push	r16
    1272:	a1 2c       	mov	r10, r1
    1274:	b1 2c       	mov	r11, r1
    1276:	c1 2c       	mov	r12, r1
    1278:	d1 2c       	mov	r13, r1
    127a:	e1 2c       	mov	r14, r1
    127c:	f1 2c       	mov	r15, r1
    127e:	00 e0       	ldi	r16, 0x00	; 0
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	45 e5       	ldi	r20, 0x55	; 85
    1286:	50 e0       	ldi	r21, 0x00	; 0
    1288:	64 ea       	ldi	r22, 0xA4	; 164
    128a:	71 e0       	ldi	r23, 0x01	; 1
    128c:	85 ec       	ldi	r24, 0xC5	; 197
    128e:	9a e0       	ldi	r25, 0x0A	; 10
    1290:	ed de       	rcall	.-550    	; 0x106c <xTaskGenericCreate>
    1292:	81 30       	cpi	r24, 0x01	; 1
    1294:	41 f4       	brne	.+16     	; 0x12a6 <vTaskStartScheduler+0x42>
    1296:	f8 94       	cli
    1298:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <xSchedulerRunning>
    129c:	10 92 af 07 	sts	0x07AF, r1	; 0x8007af <xTickCount+0x1>
    12a0:	10 92 ae 07 	sts	0x07AE, r1	; 0x8007ae <xTickCount>
    12a4:	c1 dd       	rcall	.-1150   	; 0xe28 <xPortStartScheduler>
    12a6:	0f 91       	pop	r16
    12a8:	ff 90       	pop	r15
    12aa:	ef 90       	pop	r14
    12ac:	df 90       	pop	r13
    12ae:	cf 90       	pop	r12
    12b0:	bf 90       	pop	r11
    12b2:	af 90       	pop	r10
    12b4:	08 95       	ret

000012b6 <vTaskSuspendAll>:
    12b6:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <uxSchedulerSuspended>
    12ba:	8f 5f       	subi	r24, 0xFF	; 255
    12bc:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <uxSchedulerSuspended>
    12c0:	08 95       	ret

000012c2 <vTaskIncrementTick>:
    12c2:	0f 93       	push	r16
    12c4:	1f 93       	push	r17
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    12ca:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <uxSchedulerSuspended>
    12ce:	81 11       	cpse	r24, r1
    12d0:	b2 c0       	rjmp	.+356    	; 0x1436 <vTaskIncrementTick+0x174>
    12d2:	80 91 ae 07 	lds	r24, 0x07AE	; 0x8007ae <xTickCount>
    12d6:	90 91 af 07 	lds	r25, 0x07AF	; 0x8007af <xTickCount+0x1>
    12da:	01 96       	adiw	r24, 0x01	; 1
    12dc:	90 93 af 07 	sts	0x07AF, r25	; 0x8007af <xTickCount+0x1>
    12e0:	80 93 ae 07 	sts	0x07AE, r24	; 0x8007ae <xTickCount>
    12e4:	80 91 ae 07 	lds	r24, 0x07AE	; 0x8007ae <xTickCount>
    12e8:	90 91 af 07 	lds	r25, 0x07AF	; 0x8007af <xTickCount+0x1>
    12ec:	89 2b       	or	r24, r25
    12ee:	99 f5       	brne	.+102    	; 0x1356 <vTaskIncrementTick+0x94>
    12f0:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxDelayedTaskList>
    12f4:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxDelayedTaskList+0x1>
    12f8:	20 91 c4 07 	lds	r18, 0x07C4	; 0x8007c4 <pxOverflowDelayedTaskList>
    12fc:	30 91 c5 07 	lds	r19, 0x07C5	; 0x8007c5 <pxOverflowDelayedTaskList+0x1>
    1300:	30 93 c7 07 	sts	0x07C7, r19	; 0x8007c7 <pxDelayedTaskList+0x1>
    1304:	20 93 c6 07 	sts	0x07C6, r18	; 0x8007c6 <pxDelayedTaskList>
    1308:	90 93 c5 07 	sts	0x07C5, r25	; 0x8007c5 <pxOverflowDelayedTaskList+0x1>
    130c:	80 93 c4 07 	sts	0x07C4, r24	; 0x8007c4 <pxOverflowDelayedTaskList>
    1310:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <xNumOfOverflows>
    1314:	8f 5f       	subi	r24, 0xFF	; 255
    1316:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <xNumOfOverflows>
    131a:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <pxDelayedTaskList>
    131e:	f0 91 c7 07 	lds	r31, 0x07C7	; 0x8007c7 <pxDelayedTaskList+0x1>
    1322:	80 81       	ld	r24, Z
    1324:	81 11       	cpse	r24, r1
    1326:	07 c0       	rjmp	.+14     	; 0x1336 <vTaskIncrementTick+0x74>
    1328:	8f ef       	ldi	r24, 0xFF	; 255
    132a:	9f ef       	ldi	r25, 0xFF	; 255
    132c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <xNextTaskUnblockTime+0x1>
    1330:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <xNextTaskUnblockTime>
    1334:	10 c0       	rjmp	.+32     	; 0x1356 <vTaskIncrementTick+0x94>
    1336:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <pxDelayedTaskList>
    133a:	f0 91 c7 07 	lds	r31, 0x07C7	; 0x8007c7 <pxDelayedTaskList+0x1>
    133e:	05 80       	ldd	r0, Z+5	; 0x05
    1340:	f6 81       	ldd	r31, Z+6	; 0x06
    1342:	e0 2d       	mov	r30, r0
    1344:	06 80       	ldd	r0, Z+6	; 0x06
    1346:	f7 81       	ldd	r31, Z+7	; 0x07
    1348:	e0 2d       	mov	r30, r0
    134a:	82 81       	ldd	r24, Z+2	; 0x02
    134c:	93 81       	ldd	r25, Z+3	; 0x03
    134e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <xNextTaskUnblockTime+0x1>
    1352:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <xNextTaskUnblockTime>
    1356:	20 91 ae 07 	lds	r18, 0x07AE	; 0x8007ae <xTickCount>
    135a:	30 91 af 07 	lds	r19, 0x07AF	; 0x8007af <xTickCount+0x1>
    135e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <xNextTaskUnblockTime>
    1362:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <xNextTaskUnblockTime+0x1>
    1366:	28 17       	cp	r18, r24
    1368:	39 07       	cpc	r19, r25
    136a:	08 f4       	brcc	.+2      	; 0x136e <vTaskIncrementTick+0xac>
    136c:	69 c0       	rjmp	.+210    	; 0x1440 <vTaskIncrementTick+0x17e>
    136e:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <pxDelayedTaskList>
    1372:	f0 91 c7 07 	lds	r31, 0x07C7	; 0x8007c7 <pxDelayedTaskList+0x1>
    1376:	80 81       	ld	r24, Z
    1378:	88 23       	and	r24, r24
    137a:	99 f0       	breq	.+38     	; 0x13a2 <vTaskIncrementTick+0xe0>
    137c:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <pxDelayedTaskList>
    1380:	f0 91 c7 07 	lds	r31, 0x07C7	; 0x8007c7 <pxDelayedTaskList+0x1>
    1384:	05 80       	ldd	r0, Z+5	; 0x05
    1386:	f6 81       	ldd	r31, Z+6	; 0x06
    1388:	e0 2d       	mov	r30, r0
    138a:	c6 81       	ldd	r28, Z+6	; 0x06
    138c:	d7 81       	ldd	r29, Z+7	; 0x07
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	9b 81       	ldd	r25, Y+3	; 0x03
    1392:	20 91 ae 07 	lds	r18, 0x07AE	; 0x8007ae <xTickCount>
    1396:	30 91 af 07 	lds	r19, 0x07AF	; 0x8007af <xTickCount+0x1>
    139a:	28 17       	cp	r18, r24
    139c:	39 07       	cpc	r19, r25
    139e:	f8 f4       	brcc	.+62     	; 0x13de <vTaskIncrementTick+0x11c>
    13a0:	19 c0       	rjmp	.+50     	; 0x13d4 <vTaskIncrementTick+0x112>
    13a2:	8f ef       	ldi	r24, 0xFF	; 255
    13a4:	9f ef       	ldi	r25, 0xFF	; 255
    13a6:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <xNextTaskUnblockTime+0x1>
    13aa:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <xNextTaskUnblockTime>
    13ae:	48 c0       	rjmp	.+144    	; 0x1440 <vTaskIncrementTick+0x17e>
    13b0:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <pxDelayedTaskList>
    13b4:	f0 91 c7 07 	lds	r31, 0x07C7	; 0x8007c7 <pxDelayedTaskList+0x1>
    13b8:	05 80       	ldd	r0, Z+5	; 0x05
    13ba:	f6 81       	ldd	r31, Z+6	; 0x06
    13bc:	e0 2d       	mov	r30, r0
    13be:	c6 81       	ldd	r28, Z+6	; 0x06
    13c0:	d7 81       	ldd	r29, Z+7	; 0x07
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	9b 81       	ldd	r25, Y+3	; 0x03
    13c6:	20 91 ae 07 	lds	r18, 0x07AE	; 0x8007ae <xTickCount>
    13ca:	30 91 af 07 	lds	r19, 0x07AF	; 0x8007af <xTickCount+0x1>
    13ce:	28 17       	cp	r18, r24
    13d0:	39 07       	cpc	r19, r25
    13d2:	28 f4       	brcc	.+10     	; 0x13de <vTaskIncrementTick+0x11c>
    13d4:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <xNextTaskUnblockTime+0x1>
    13d8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <xNextTaskUnblockTime>
    13dc:	31 c0       	rjmp	.+98     	; 0x1440 <vTaskIncrementTick+0x17e>
    13de:	8e 01       	movw	r16, r28
    13e0:	0e 5f       	subi	r16, 0xFE	; 254
    13e2:	1f 4f       	sbci	r17, 0xFF	; 255
    13e4:	c8 01       	movw	r24, r16
    13e6:	0e 94 00 01 	call	0x200	; 0x200 <vListRemove>
    13ea:	8c 89       	ldd	r24, Y+20	; 0x14
    13ec:	9d 89       	ldd	r25, Y+21	; 0x15
    13ee:	89 2b       	or	r24, r25
    13f0:	21 f0       	breq	.+8      	; 0x13fa <vTaskIncrementTick+0x138>
    13f2:	ce 01       	movw	r24, r28
    13f4:	0c 96       	adiw	r24, 0x0c	; 12
    13f6:	0e 94 00 01 	call	0x200	; 0x200 <vListRemove>
    13fa:	8e 89       	ldd	r24, Y+22	; 0x16
    13fc:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <uxTopReadyPriority>
    1400:	98 17       	cp	r25, r24
    1402:	10 f4       	brcc	.+4      	; 0x1408 <vTaskIncrementTick+0x146>
    1404:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <uxTopReadyPriority>
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	9c 01       	movw	r18, r24
    140c:	22 0f       	add	r18, r18
    140e:	33 1f       	adc	r19, r19
    1410:	22 0f       	add	r18, r18
    1412:	33 1f       	adc	r19, r19
    1414:	22 0f       	add	r18, r18
    1416:	33 1f       	adc	r19, r19
    1418:	82 0f       	add	r24, r18
    141a:	93 1f       	adc	r25, r19
    141c:	b8 01       	movw	r22, r16
    141e:	86 52       	subi	r24, 0x26	; 38
    1420:	98 4f       	sbci	r25, 0xF8	; 248
    1422:	0e 94 9e 00 	call	0x13c	; 0x13c <vListInsertEnd>
    1426:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <pxDelayedTaskList>
    142a:	f0 91 c7 07 	lds	r31, 0x07C7	; 0x8007c7 <pxDelayedTaskList+0x1>
    142e:	80 81       	ld	r24, Z
    1430:	81 11       	cpse	r24, r1
    1432:	be cf       	rjmp	.-132    	; 0x13b0 <vTaskIncrementTick+0xee>
    1434:	b6 cf       	rjmp	.-148    	; 0x13a2 <vTaskIncrementTick+0xe0>
    1436:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <uxMissedTicks>
    143a:	8f 5f       	subi	r24, 0xFF	; 255
    143c:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <uxMissedTicks>
    1440:	df 91       	pop	r29
    1442:	cf 91       	pop	r28
    1444:	1f 91       	pop	r17
    1446:	0f 91       	pop	r16
    1448:	08 95       	ret

0000144a <xTaskResumeAll>:
    144a:	cf 92       	push	r12
    144c:	df 92       	push	r13
    144e:	ef 92       	push	r14
    1450:	ff 92       	push	r15
    1452:	0f 93       	push	r16
    1454:	1f 93       	push	r17
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	0f 92       	push	r0
    1460:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <uxSchedulerSuspended>
    1464:	81 50       	subi	r24, 0x01	; 1
    1466:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <uxSchedulerSuspended>
    146a:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <uxSchedulerSuspended>
    146e:	81 11       	cpse	r24, r1
    1470:	62 c0       	rjmp	.+196    	; 0x1536 <xTaskResumeAll+0xec>
    1472:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <uxCurrentNumberOfTasks>
    1476:	81 11       	cpse	r24, r1
    1478:	32 c0       	rjmp	.+100    	; 0x14de <xTaskResumeAll+0x94>
    147a:	60 c0       	rjmp	.+192    	; 0x153c <xTaskResumeAll+0xf2>
    147c:	d7 01       	movw	r26, r14
    147e:	15 96       	adiw	r26, 0x05	; 5
    1480:	ed 91       	ld	r30, X+
    1482:	fc 91       	ld	r31, X
    1484:	16 97       	sbiw	r26, 0x06	; 6
    1486:	c6 81       	ldd	r28, Z+6	; 0x06
    1488:	d7 81       	ldd	r29, Z+7	; 0x07
    148a:	ce 01       	movw	r24, r28
    148c:	0c 96       	adiw	r24, 0x0c	; 12
    148e:	0e 94 00 01 	call	0x200	; 0x200 <vListRemove>
    1492:	8e 01       	movw	r16, r28
    1494:	0e 5f       	subi	r16, 0xFE	; 254
    1496:	1f 4f       	sbci	r17, 0xFF	; 255
    1498:	c8 01       	movw	r24, r16
    149a:	0e 94 00 01 	call	0x200	; 0x200 <vListRemove>
    149e:	8e 89       	ldd	r24, Y+22	; 0x16
    14a0:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <uxTopReadyPriority>
    14a4:	98 17       	cp	r25, r24
    14a6:	10 f4       	brcc	.+4      	; 0x14ac <xTaskResumeAll+0x62>
    14a8:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <uxTopReadyPriority>
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	9c 01       	movw	r18, r24
    14b0:	22 0f       	add	r18, r18
    14b2:	33 1f       	adc	r19, r19
    14b4:	22 0f       	add	r18, r18
    14b6:	33 1f       	adc	r19, r19
    14b8:	22 0f       	add	r18, r18
    14ba:	33 1f       	adc	r19, r19
    14bc:	82 0f       	add	r24, r18
    14be:	93 1f       	adc	r25, r19
    14c0:	b8 01       	movw	r22, r16
    14c2:	86 52       	subi	r24, 0x26	; 38
    14c4:	98 4f       	sbci	r25, 0xF8	; 248
    14c6:	0e 94 9e 00 	call	0x13c	; 0x13c <vListInsertEnd>
    14ca:	e0 91 fe 07 	lds	r30, 0x07FE	; 0x8007fe <pxCurrentTCB>
    14ce:	f0 91 ff 07 	lds	r31, 0x07FF	; 0x8007ff <pxCurrentTCB+0x1>
    14d2:	9e 89       	ldd	r25, Y+22	; 0x16
    14d4:	86 89       	ldd	r24, Z+22	; 0x16
    14d6:	98 17       	cp	r25, r24
    14d8:	58 f0       	brcs	.+22     	; 0x14f0 <xTaskResumeAll+0xa6>
    14da:	dc 2c       	mov	r13, r12
    14dc:	09 c0       	rjmp	.+18     	; 0x14f0 <xTaskResumeAll+0xa6>
    14de:	d1 2c       	mov	r13, r1
    14e0:	0f 2e       	mov	r0, r31
    14e2:	fb eb       	ldi	r31, 0xBB	; 187
    14e4:	ef 2e       	mov	r14, r31
    14e6:	f7 e0       	ldi	r31, 0x07	; 7
    14e8:	ff 2e       	mov	r15, r31
    14ea:	f0 2d       	mov	r31, r0
    14ec:	cc 24       	eor	r12, r12
    14ee:	c3 94       	inc	r12
    14f0:	f7 01       	movw	r30, r14
    14f2:	80 81       	ld	r24, Z
    14f4:	81 11       	cpse	r24, r1
    14f6:	c2 cf       	rjmp	.-124    	; 0x147c <xTaskResumeAll+0x32>
    14f8:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <uxMissedTicks>
    14fc:	88 23       	and	r24, r24
    14fe:	79 f0       	breq	.+30     	; 0x151e <xTaskResumeAll+0xd4>
    1500:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <uxMissedTicks>
    1504:	88 23       	and	r24, r24
    1506:	91 f0       	breq	.+36     	; 0x152c <xTaskResumeAll+0xe2>
    1508:	dc de       	rcall	.-584    	; 0x12c2 <vTaskIncrementTick>
    150a:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <uxMissedTicks>
    150e:	81 50       	subi	r24, 0x01	; 1
    1510:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <uxMissedTicks>
    1514:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <uxMissedTicks>
    1518:	81 11       	cpse	r24, r1
    151a:	f6 cf       	rjmp	.-20     	; 0x1508 <xTaskResumeAll+0xbe>
    151c:	07 c0       	rjmp	.+14     	; 0x152c <xTaskResumeAll+0xe2>
    151e:	f1 e0       	ldi	r31, 0x01	; 1
    1520:	df 16       	cp	r13, r31
    1522:	21 f0       	breq	.+8      	; 0x152c <xTaskResumeAll+0xe2>
    1524:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <xMissedYield>
    1528:	81 30       	cpi	r24, 0x01	; 1
    152a:	39 f4       	brne	.+14     	; 0x153a <xTaskResumeAll+0xf0>
    152c:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <xMissedYield>
    1530:	b5 dc       	rcall	.-1686   	; 0xe9c <vPortYield>
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	03 c0       	rjmp	.+6      	; 0x153c <xTaskResumeAll+0xf2>
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	01 c0       	rjmp	.+2      	; 0x153c <xTaskResumeAll+0xf2>
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	0f 90       	pop	r0
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	0f 91       	pop	r16
    1548:	ff 90       	pop	r15
    154a:	ef 90       	pop	r14
    154c:	df 90       	pop	r13
    154e:	cf 90       	pop	r12
    1550:	08 95       	ret

00001552 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    1558:	89 2b       	or	r24, r25
    155a:	99 f0       	breq	.+38     	; 0x1582 <vTaskDelay+0x30>
		{
			vTaskSuspendAll();
    155c:	ac de       	rcall	.-680    	; 0x12b6 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    155e:	80 91 ae 07 	lds	r24, 0x07AE	; 0x8007ae <xTickCount>
    1562:	90 91 af 07 	lds	r25, 0x07AF	; 0x8007af <xTickCount+0x1>
    1566:	c8 0f       	add	r28, r24
    1568:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    156a:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <pxCurrentTCB>
    156e:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <pxCurrentTCB+0x1>
    1572:	02 96       	adiw	r24, 0x02	; 2
    1574:	0e 94 00 01 	call	0x200	; 0x200 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1578:	ce 01       	movw	r24, r28
			}
			xAlreadyYielded = xTaskResumeAll();
    157a:	43 dd       	rcall	.-1402   	; 0x1002 <prvAddCurrentTaskToDelayedList>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    157c:	66 df       	rcall	.-308    	; 0x144a <xTaskResumeAll>
    157e:	81 11       	cpse	r24, r1
		{
			portYIELD_WITHIN_API();
    1580:	01 c0       	rjmp	.+2      	; 0x1584 <vTaskDelay+0x32>
    1582:	8c dc       	rcall	.-1768   	; 0xe9c <vPortYield>
		}
	}
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	08 95       	ret

0000158a <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    158a:	0f 2e       	mov	r0, r31
    158c:	f2 eb       	ldi	r31, 0xB2	; 178
    158e:	ef 2e       	mov	r14, r31
    1590:	f7 e0       	ldi	r31, 0x07	; 7
    1592:	ff 2e       	mov	r15, r31
    1594:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1596:	ca ed       	ldi	r28, 0xDA	; 218
    1598:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    159a:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <uxTasksDeleted>
    159e:	88 23       	and	r24, r24
    15a0:	41 f1       	breq	.+80     	; 0x15f2 <prvIdleTask+0x68>
		{
			vTaskSuspendAll();
    15a2:	89 de       	rcall	.-750    	; 0x12b6 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    15a4:	d7 01       	movw	r26, r14
			xTaskResumeAll();
    15a6:	1c 91       	ld	r17, X
    15a8:	50 df       	rcall	.-352    	; 0x144a <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    15aa:	11 23       	and	r17, r17
    15ac:	11 f1       	breq	.+68     	; 0x15f2 <prvIdleTask+0x68>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	f8 94       	cli
    15b2:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    15b4:	d7 01       	movw	r26, r14
    15b6:	15 96       	adiw	r26, 0x05	; 5
    15b8:	ed 91       	ld	r30, X+
    15ba:	fc 91       	ld	r31, X
    15bc:	16 97       	sbiw	r26, 0x06	; 6
    15be:	06 81       	ldd	r16, Z+6	; 0x06
    15c0:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
    15c2:	c8 01       	movw	r24, r16
    15c4:	02 96       	adiw	r24, 0x02	; 2
    15c6:	0e 94 00 01 	call	0x200	; 0x200 <vListRemove>
					--uxCurrentNumberOfTasks;
    15ca:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <uxCurrentNumberOfTasks>
    15ce:	81 50       	subi	r24, 0x01	; 1
    15d0:	80 93 b0 07 	sts	0x07B0, r24	; 0x8007b0 <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
    15d4:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <uxTasksDeleted>
    15d8:	81 50       	subi	r24, 0x01	; 1
    15da:	80 93 b1 07 	sts	0x07B1, r24	; 0x8007b1 <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
    15de:	0f 90       	pop	r0
    15e0:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    15e2:	f8 01       	movw	r30, r16
    15e4:	87 89       	ldd	r24, Z+23	; 0x17
    15e6:	90 8d       	ldd	r25, Z+24	; 0x18
    15e8:	0e 94 8b 00 	call	0x116	; 0x116 <vPortFree>
		vPortFree( pxTCB );
    15ec:	c8 01       	movw	r24, r16
    15ee:	0e 94 8b 00 	call	0x116	; 0x116 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    15f2:	88 81       	ld	r24, Y
    15f4:	82 30       	cpi	r24, 0x02	; 2
			{
				taskYIELD();
    15f6:	88 f2       	brcs	.-94     	; 0x159a <prvIdleTask+0x10>
    15f8:	51 dc       	rcall	.-1886   	; 0xe9c <vPortYield>
    15fa:	cf cf       	rjmp	.-98     	; 0x159a <prvIdleTask+0x10>

000015fc <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    15fc:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <uxSchedulerSuspended>
    1600:	81 11       	cpse	r24, r1
    1602:	13 c0       	rjmp	.+38     	; 0x162a <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1604:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <uxTopReadyPriority>
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	fc 01       	movw	r30, r24
    160c:	ee 0f       	add	r30, r30
    160e:	ff 1f       	adc	r31, r31
    1610:	ee 0f       	add	r30, r30
    1612:	ff 1f       	adc	r31, r31
    1614:	ee 0f       	add	r30, r30
    1616:	ff 1f       	adc	r31, r31
    1618:	8e 0f       	add	r24, r30
    161a:	9f 1f       	adc	r25, r31
    161c:	fc 01       	movw	r30, r24
    161e:	e6 52       	subi	r30, 0x26	; 38
    1620:	f8 4f       	sbci	r31, 0xF8	; 248
    1622:	80 81       	ld	r24, Z
    1624:	88 23       	and	r24, r24
    1626:	29 f0       	breq	.+10     	; 0x1632 <vTaskSwitchContext+0x36>
    1628:	1b c0       	rjmp	.+54     	; 0x1660 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <xMissedYield>
    1630:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    1632:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <uxTopReadyPriority>
    1636:	81 50       	subi	r24, 0x01	; 1
    1638:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    163c:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <uxTopReadyPriority>
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	fc 01       	movw	r30, r24
    1644:	ee 0f       	add	r30, r30
    1646:	ff 1f       	adc	r31, r31
    1648:	ee 0f       	add	r30, r30
    164a:	ff 1f       	adc	r31, r31
    164c:	ee 0f       	add	r30, r30
    164e:	ff 1f       	adc	r31, r31
    1650:	8e 0f       	add	r24, r30
    1652:	9f 1f       	adc	r25, r31
    1654:	fc 01       	movw	r30, r24
    1656:	e6 52       	subi	r30, 0x26	; 38
    1658:	f8 4f       	sbci	r31, 0xF8	; 248
    165a:	80 81       	ld	r24, Z
    165c:	88 23       	and	r24, r24
    165e:	49 f3       	breq	.-46     	; 0x1632 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    1660:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <uxTopReadyPriority>
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	9c 01       	movw	r18, r24
    1668:	22 0f       	add	r18, r18
    166a:	33 1f       	adc	r19, r19
    166c:	22 0f       	add	r18, r18
    166e:	33 1f       	adc	r19, r19
    1670:	22 0f       	add	r18, r18
    1672:	33 1f       	adc	r19, r19
    1674:	28 0f       	add	r18, r24
    1676:	39 1f       	adc	r19, r25
    1678:	d9 01       	movw	r26, r18
    167a:	a6 52       	subi	r26, 0x26	; 38
    167c:	b8 4f       	sbci	r27, 0xF8	; 248
    167e:	11 96       	adiw	r26, 0x01	; 1
    1680:	ed 91       	ld	r30, X+
    1682:	fc 91       	ld	r31, X
    1684:	12 97       	sbiw	r26, 0x02	; 2
    1686:	02 80       	ldd	r0, Z+2	; 0x02
    1688:	f3 81       	ldd	r31, Z+3	; 0x03
    168a:	e0 2d       	mov	r30, r0
    168c:	12 96       	adiw	r26, 0x02	; 2
    168e:	fc 93       	st	X, r31
    1690:	ee 93       	st	-X, r30
    1692:	11 97       	sbiw	r26, 0x01	; 1
    1694:	23 52       	subi	r18, 0x23	; 35
    1696:	38 4f       	sbci	r19, 0xF8	; 248
    1698:	e2 17       	cp	r30, r18
    169a:	f3 07       	cpc	r31, r19
    169c:	29 f4       	brne	.+10     	; 0x16a8 <vTaskSwitchContext+0xac>
    169e:	22 81       	ldd	r18, Z+2	; 0x02
    16a0:	33 81       	ldd	r19, Z+3	; 0x03
    16a2:	fd 01       	movw	r30, r26
    16a4:	32 83       	std	Z+2, r19	; 0x02
    16a6:	21 83       	std	Z+1, r18	; 0x01
    16a8:	fc 01       	movw	r30, r24
    16aa:	ee 0f       	add	r30, r30
    16ac:	ff 1f       	adc	r31, r31
    16ae:	ee 0f       	add	r30, r30
    16b0:	ff 1f       	adc	r31, r31
    16b2:	ee 0f       	add	r30, r30
    16b4:	ff 1f       	adc	r31, r31
    16b6:	8e 0f       	add	r24, r30
    16b8:	9f 1f       	adc	r25, r31
    16ba:	fc 01       	movw	r30, r24
    16bc:	e6 52       	subi	r30, 0x26	; 38
    16be:	f8 4f       	sbci	r31, 0xF8	; 248
    16c0:	01 80       	ldd	r0, Z+1	; 0x01
    16c2:	f2 81       	ldd	r31, Z+2	; 0x02
    16c4:	e0 2d       	mov	r30, r0
    16c6:	86 81       	ldd	r24, Z+6	; 0x06
    16c8:	97 81       	ldd	r25, Z+7	; 0x07
    16ca:	90 93 ff 07 	sts	0x07FF, r25	; 0x8007ff <pxCurrentTCB+0x1>
    16ce:	80 93 fe 07 	sts	0x07FE, r24	; 0x8007fe <pxCurrentTCB>
    16d2:	08 95       	ret

000016d4 <__divmodhi4>:
    16d4:	97 fb       	bst	r25, 7
    16d6:	07 2e       	mov	r0, r23
    16d8:	16 f4       	brtc	.+4      	; 0x16de <__divmodhi4+0xa>
    16da:	00 94       	com	r0
    16dc:	06 d0       	rcall	.+12     	; 0x16ea <__divmodhi4_neg1>
    16de:	77 fd       	sbrc	r23, 7
    16e0:	08 d0       	rcall	.+16     	; 0x16f2 <__divmodhi4_neg2>
    16e2:	0b d0       	rcall	.+22     	; 0x16fa <__udivmodhi4>
    16e4:	07 fc       	sbrc	r0, 7
    16e6:	05 d0       	rcall	.+10     	; 0x16f2 <__divmodhi4_neg2>
    16e8:	3e f4       	brtc	.+14     	; 0x16f8 <__divmodhi4_exit>

000016ea <__divmodhi4_neg1>:
    16ea:	90 95       	com	r25
    16ec:	81 95       	neg	r24
    16ee:	9f 4f       	sbci	r25, 0xFF	; 255
    16f0:	08 95       	ret

000016f2 <__divmodhi4_neg2>:
    16f2:	70 95       	com	r23
    16f4:	61 95       	neg	r22
    16f6:	7f 4f       	sbci	r23, 0xFF	; 255

000016f8 <__divmodhi4_exit>:
    16f8:	08 95       	ret

000016fa <__udivmodhi4>:
    16fa:	aa 1b       	sub	r26, r26
    16fc:	bb 1b       	sub	r27, r27
    16fe:	51 e1       	ldi	r21, 0x11	; 17
    1700:	07 c0       	rjmp	.+14     	; 0x1710 <__udivmodhi4_ep>

00001702 <__udivmodhi4_loop>:
    1702:	aa 1f       	adc	r26, r26
    1704:	bb 1f       	adc	r27, r27
    1706:	a6 17       	cp	r26, r22
    1708:	b7 07       	cpc	r27, r23
    170a:	10 f0       	brcs	.+4      	; 0x1710 <__udivmodhi4_ep>
    170c:	a6 1b       	sub	r26, r22
    170e:	b7 0b       	sbc	r27, r23

00001710 <__udivmodhi4_ep>:
    1710:	88 1f       	adc	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	5a 95       	dec	r21
    1716:	a9 f7       	brne	.-22     	; 0x1702 <__udivmodhi4_loop>
    1718:	80 95       	com	r24
    171a:	90 95       	com	r25
    171c:	bc 01       	movw	r22, r24
    171e:	cd 01       	movw	r24, r26
    1720:	08 95       	ret

00001722 <do_rand>:
    1722:	8f 92       	push	r8
    1724:	9f 92       	push	r9
    1726:	af 92       	push	r10
    1728:	bf 92       	push	r11
    172a:	cf 92       	push	r12
    172c:	df 92       	push	r13
    172e:	ef 92       	push	r14
    1730:	ff 92       	push	r15
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	ec 01       	movw	r28, r24
    1738:	68 81       	ld	r22, Y
    173a:	79 81       	ldd	r23, Y+1	; 0x01
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	9b 81       	ldd	r25, Y+3	; 0x03
    1740:	61 15       	cp	r22, r1
    1742:	71 05       	cpc	r23, r1
    1744:	81 05       	cpc	r24, r1
    1746:	91 05       	cpc	r25, r1
    1748:	21 f4       	brne	.+8      	; 0x1752 <do_rand+0x30>
    174a:	64 e2       	ldi	r22, 0x24	; 36
    174c:	79 ed       	ldi	r23, 0xD9	; 217
    174e:	8b e5       	ldi	r24, 0x5B	; 91
    1750:	97 e0       	ldi	r25, 0x07	; 7
    1752:	2d e1       	ldi	r18, 0x1D	; 29
    1754:	33 ef       	ldi	r19, 0xF3	; 243
    1756:	41 e0       	ldi	r20, 0x01	; 1
    1758:	50 e0       	ldi	r21, 0x00	; 0
    175a:	4e d0       	rcall	.+156    	; 0x17f8 <__divmodsi4>
    175c:	49 01       	movw	r8, r18
    175e:	5a 01       	movw	r10, r20
    1760:	9b 01       	movw	r18, r22
    1762:	ac 01       	movw	r20, r24
    1764:	a7 ea       	ldi	r26, 0xA7	; 167
    1766:	b1 e4       	ldi	r27, 0x41	; 65
    1768:	63 d0       	rcall	.+198    	; 0x1830 <__muluhisi3>
    176a:	6b 01       	movw	r12, r22
    176c:	7c 01       	movw	r14, r24
    176e:	ac ee       	ldi	r26, 0xEC	; 236
    1770:	b4 ef       	ldi	r27, 0xF4	; 244
    1772:	a5 01       	movw	r20, r10
    1774:	94 01       	movw	r18, r8
    1776:	68 d0       	rcall	.+208    	; 0x1848 <__mulohisi3>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	8c 0d       	add	r24, r12
    177e:	9d 1d       	adc	r25, r13
    1780:	ae 1d       	adc	r26, r14
    1782:	bf 1d       	adc	r27, r15
    1784:	b7 ff       	sbrs	r27, 7
    1786:	03 c0       	rjmp	.+6      	; 0x178e <do_rand+0x6c>
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	a1 09       	sbc	r26, r1
    178c:	b0 48       	sbci	r27, 0x80	; 128
    178e:	88 83       	st	Y, r24
    1790:	99 83       	std	Y+1, r25	; 0x01
    1792:	aa 83       	std	Y+2, r26	; 0x02
    1794:	bb 83       	std	Y+3, r27	; 0x03
    1796:	9f 77       	andi	r25, 0x7F	; 127
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	ff 90       	pop	r15
    179e:	ef 90       	pop	r14
    17a0:	df 90       	pop	r13
    17a2:	cf 90       	pop	r12
    17a4:	bf 90       	pop	r11
    17a6:	af 90       	pop	r10
    17a8:	9f 90       	pop	r9
    17aa:	8f 90       	pop	r8
    17ac:	08 95       	ret

000017ae <rand_r>:
    17ae:	b9 cf       	rjmp	.-142    	; 0x1722 <do_rand>

000017b0 <rand>:
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	91 e0       	ldi	r25, 0x01	; 1
    17b4:	b6 cf       	rjmp	.-148    	; 0x1722 <do_rand>

000017b6 <srand>:
    17b6:	a0 e0       	ldi	r26, 0x00	; 0
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    17be:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    17c2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    17c6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    17ca:	08 95       	ret

000017cc <memset>:
    17cc:	dc 01       	movw	r26, r24
    17ce:	01 c0       	rjmp	.+2      	; 0x17d2 <memset+0x6>
    17d0:	6d 93       	st	X+, r22
    17d2:	41 50       	subi	r20, 0x01	; 1
    17d4:	50 40       	sbci	r21, 0x00	; 0
    17d6:	e0 f7       	brcc	.-8      	; 0x17d0 <memset+0x4>
    17d8:	08 95       	ret

000017da <strncpy>:
    17da:	fb 01       	movw	r30, r22
    17dc:	dc 01       	movw	r26, r24
    17de:	41 50       	subi	r20, 0x01	; 1
    17e0:	50 40       	sbci	r21, 0x00	; 0
    17e2:	48 f0       	brcs	.+18     	; 0x17f6 <strncpy+0x1c>
    17e4:	01 90       	ld	r0, Z+
    17e6:	0d 92       	st	X+, r0
    17e8:	00 20       	and	r0, r0
    17ea:	c9 f7       	brne	.-14     	; 0x17de <strncpy+0x4>
    17ec:	01 c0       	rjmp	.+2      	; 0x17f0 <strncpy+0x16>
    17ee:	1d 92       	st	X+, r1
    17f0:	41 50       	subi	r20, 0x01	; 1
    17f2:	50 40       	sbci	r21, 0x00	; 0
    17f4:	e0 f7       	brcc	.-8      	; 0x17ee <strncpy+0x14>
    17f6:	08 95       	ret

000017f8 <__divmodsi4>:
    17f8:	05 2e       	mov	r0, r21
    17fa:	97 fb       	bst	r25, 7
    17fc:	16 f4       	brtc	.+4      	; 0x1802 <__divmodsi4+0xa>
    17fe:	00 94       	com	r0
    1800:	0f d0       	rcall	.+30     	; 0x1820 <__negsi2>
    1802:	57 fd       	sbrc	r21, 7
    1804:	05 d0       	rcall	.+10     	; 0x1810 <__divmodsi4_neg2>
    1806:	24 d0       	rcall	.+72     	; 0x1850 <__udivmodsi4>
    1808:	07 fc       	sbrc	r0, 7
    180a:	02 d0       	rcall	.+4      	; 0x1810 <__divmodsi4_neg2>
    180c:	46 f4       	brtc	.+16     	; 0x181e <__divmodsi4_exit>
    180e:	08 c0       	rjmp	.+16     	; 0x1820 <__negsi2>

00001810 <__divmodsi4_neg2>:
    1810:	50 95       	com	r21
    1812:	40 95       	com	r20
    1814:	30 95       	com	r19
    1816:	21 95       	neg	r18
    1818:	3f 4f       	sbci	r19, 0xFF	; 255
    181a:	4f 4f       	sbci	r20, 0xFF	; 255
    181c:	5f 4f       	sbci	r21, 0xFF	; 255

0000181e <__divmodsi4_exit>:
    181e:	08 95       	ret

00001820 <__negsi2>:
    1820:	90 95       	com	r25
    1822:	80 95       	com	r24
    1824:	70 95       	com	r23
    1826:	61 95       	neg	r22
    1828:	7f 4f       	sbci	r23, 0xFF	; 255
    182a:	8f 4f       	sbci	r24, 0xFF	; 255
    182c:	9f 4f       	sbci	r25, 0xFF	; 255
    182e:	08 95       	ret

00001830 <__muluhisi3>:
    1830:	31 d0       	rcall	.+98     	; 0x1894 <__umulhisi3>
    1832:	a5 9f       	mul	r26, r21
    1834:	90 0d       	add	r25, r0
    1836:	b4 9f       	mul	r27, r20
    1838:	90 0d       	add	r25, r0
    183a:	a4 9f       	mul	r26, r20
    183c:	80 0d       	add	r24, r0
    183e:	91 1d       	adc	r25, r1
    1840:	11 24       	eor	r1, r1
    1842:	08 95       	ret

00001844 <__mulshisi3>:
    1844:	b7 ff       	sbrs	r27, 7
    1846:	f4 cf       	rjmp	.-24     	; 0x1830 <__muluhisi3>

00001848 <__mulohisi3>:
    1848:	f3 df       	rcall	.-26     	; 0x1830 <__muluhisi3>
    184a:	82 1b       	sub	r24, r18
    184c:	93 0b       	sbc	r25, r19
    184e:	08 95       	ret

00001850 <__udivmodsi4>:
    1850:	a1 e2       	ldi	r26, 0x21	; 33
    1852:	1a 2e       	mov	r1, r26
    1854:	aa 1b       	sub	r26, r26
    1856:	bb 1b       	sub	r27, r27
    1858:	fd 01       	movw	r30, r26
    185a:	0d c0       	rjmp	.+26     	; 0x1876 <__udivmodsi4_ep>

0000185c <__udivmodsi4_loop>:
    185c:	aa 1f       	adc	r26, r26
    185e:	bb 1f       	adc	r27, r27
    1860:	ee 1f       	adc	r30, r30
    1862:	ff 1f       	adc	r31, r31
    1864:	a2 17       	cp	r26, r18
    1866:	b3 07       	cpc	r27, r19
    1868:	e4 07       	cpc	r30, r20
    186a:	f5 07       	cpc	r31, r21
    186c:	20 f0       	brcs	.+8      	; 0x1876 <__udivmodsi4_ep>
    186e:	a2 1b       	sub	r26, r18
    1870:	b3 0b       	sbc	r27, r19
    1872:	e4 0b       	sbc	r30, r20
    1874:	f5 0b       	sbc	r31, r21

00001876 <__udivmodsi4_ep>:
    1876:	66 1f       	adc	r22, r22
    1878:	77 1f       	adc	r23, r23
    187a:	88 1f       	adc	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	1a 94       	dec	r1
    1880:	69 f7       	brne	.-38     	; 0x185c <__udivmodsi4_loop>
    1882:	60 95       	com	r22
    1884:	70 95       	com	r23
    1886:	80 95       	com	r24
    1888:	90 95       	com	r25
    188a:	9b 01       	movw	r18, r22
    188c:	ac 01       	movw	r20, r24
    188e:	bd 01       	movw	r22, r26
    1890:	cf 01       	movw	r24, r30
    1892:	08 95       	ret

00001894 <__umulhisi3>:
    1894:	a2 9f       	mul	r26, r18
    1896:	b0 01       	movw	r22, r0
    1898:	b3 9f       	mul	r27, r19
    189a:	c0 01       	movw	r24, r0
    189c:	a3 9f       	mul	r26, r19
    189e:	70 0d       	add	r23, r0
    18a0:	81 1d       	adc	r24, r1
    18a2:	11 24       	eor	r1, r1
    18a4:	91 1d       	adc	r25, r1
    18a6:	b2 9f       	mul	r27, r18
    18a8:	70 0d       	add	r23, r0
    18aa:	81 1d       	adc	r24, r1
    18ac:	11 24       	eor	r1, r1
    18ae:	91 1d       	adc	r25, r1
    18b0:	08 95       	ret

000018b2 <_exit>:
    18b2:	f8 94       	cli

000018b4 <__stop_program>:
    18b4:	ff cf       	rjmp	.-2      	; 0x18b4 <__stop_program>
