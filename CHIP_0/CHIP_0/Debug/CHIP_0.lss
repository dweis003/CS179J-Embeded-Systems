
CHIP_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  000018bc  00001950  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000065f  008001aa  008001aa  000019fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  00001a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003135  00000000  00000000  00001d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001084  00000000  00000000  00004ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ee9  00000000  00000000  00005f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000808  00000000  00000000  00007e18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000130c  00000000  00000000  00008620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001884  00000000  00000000  0000992c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000300  00000000  00000000  0000b1b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	e7 c7       	rjmp	.+4046   	; 0x1004 <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec eb       	ldi	r30, 0xBC	; 188
      a0:	f8 e1       	ldi	r31, 0x18	; 24
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 3a       	cpi	r26, 0xAA	; 170
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	28 e0       	ldi	r18, 0x08	; 8
      b4:	aa ea       	ldi	r26, 0xAA	; 170
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a9 30       	cpi	r26, 0x09	; 9
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	28 d6       	rcall	.+3152   	; 0xd14 <main>
      c4:	0c 94 5c 0c 	jmp	0x18b8	; 0x18b8 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      d0:	0e 94 5e 09 	call	0x12bc	; 0x12bc <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      d4:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <__data_end>
      d8:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <__data_end+0x1>
      dc:	c9 01       	movw	r24, r18
      de:	8c 0f       	add	r24, r28
      e0:	9d 1f       	adc	r25, r29
      e2:	8c 3d       	cpi	r24, 0xDC	; 220
      e4:	45 e0       	ldi	r20, 0x05	; 5
      e6:	94 07       	cpc	r25, r20
      e8:	58 f4       	brcc	.+22     	; 0x100 <pvPortMalloc+0x36>
      ea:	28 17       	cp	r18, r24
      ec:	39 07       	cpc	r19, r25
      ee:	58 f4       	brcc	.+22     	; 0x106 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
      f0:	e9 01       	movw	r28, r18
      f2:	c4 55       	subi	r28, 0x54	; 84
      f4:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
      f6:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <__data_end+0x1>
      fa:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <__data_end>
      fe:	05 c0       	rjmp	.+10     	; 0x10a <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     100:	c0 e0       	ldi	r28, 0x00	; 0
     102:	d0 e0       	ldi	r29, 0x00	; 0
     104:	02 c0       	rjmp	.+4      	; 0x10a <pvPortMalloc+0x40>
     106:	c0 e0       	ldi	r28, 0x00	; 0
     108:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     10a:	0e 94 28 0a 	call	0x1450	; 0x1450 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     10e:	ce 01       	movw	r24, r28
     110:	df 91       	pop	r29
     112:	cf 91       	pop	r28
     114:	08 95       	ret

00000116 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     116:	08 95       	ret

00000118 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     118:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     11a:	03 96       	adiw	r24, 0x03	; 3
     11c:	92 83       	std	Z+2, r25	; 0x02
     11e:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     120:	2f ef       	ldi	r18, 0xFF	; 255
     122:	3f ef       	ldi	r19, 0xFF	; 255
     124:	34 83       	std	Z+4, r19	; 0x04
     126:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     128:	96 83       	std	Z+6, r25	; 0x06
     12a:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     12c:	90 87       	std	Z+8, r25	; 0x08
     12e:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     130:	10 82       	st	Z, r1
     132:	08 95       	ret

00000134 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     134:	fc 01       	movw	r30, r24
     136:	11 86       	std	Z+9, r1	; 0x09
     138:	10 86       	std	Z+8, r1	; 0x08
     13a:	08 95       	ret

0000013c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	fc 01       	movw	r30, r24
     142:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     144:	21 81       	ldd	r18, Z+1	; 0x01
     146:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     148:	e9 01       	movw	r28, r18
     14a:	8a 81       	ldd	r24, Y+2	; 0x02
     14c:	9b 81       	ldd	r25, Y+3	; 0x03
     14e:	13 96       	adiw	r26, 0x03	; 3
     150:	9c 93       	st	X, r25
     152:	8e 93       	st	-X, r24
     154:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     156:	81 81       	ldd	r24, Z+1	; 0x01
     158:	92 81       	ldd	r25, Z+2	; 0x02
     15a:	15 96       	adiw	r26, 0x05	; 5
     15c:	9c 93       	st	X, r25
     15e:	8e 93       	st	-X, r24
     160:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     162:	8a 81       	ldd	r24, Y+2	; 0x02
     164:	9b 81       	ldd	r25, Y+3	; 0x03
     166:	ec 01       	movw	r28, r24
     168:	7d 83       	std	Y+5, r23	; 0x05
     16a:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     16c:	e9 01       	movw	r28, r18
     16e:	7b 83       	std	Y+3, r23	; 0x03
     170:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     172:	72 83       	std	Z+2, r23	; 0x02
     174:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     176:	19 96       	adiw	r26, 0x09	; 9
     178:	fc 93       	st	X, r31
     17a:	ee 93       	st	-X, r30
     17c:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     17e:	80 81       	ld	r24, Z
     180:	8f 5f       	subi	r24, 0xFF	; 255
     182:	80 83       	st	Z, r24
}
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	08 95       	ret

0000018a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     190:	48 81       	ld	r20, Y
     192:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     194:	4f 3f       	cpi	r20, 0xFF	; 255
     196:	2f ef       	ldi	r18, 0xFF	; 255
     198:	52 07       	cpc	r21, r18
     19a:	31 f4       	brne	.+12     	; 0x1a8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     19c:	dc 01       	movw	r26, r24
     19e:	17 96       	adiw	r26, 0x07	; 7
     1a0:	ed 91       	ld	r30, X+
     1a2:	fc 91       	ld	r31, X
     1a4:	18 97       	sbiw	r26, 0x08	; 8
     1a6:	17 c0       	rjmp	.+46     	; 0x1d6 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     1a8:	fc 01       	movw	r30, r24
     1aa:	33 96       	adiw	r30, 0x03	; 3
     1ac:	dc 01       	movw	r26, r24
     1ae:	15 96       	adiw	r26, 0x05	; 5
     1b0:	2d 91       	ld	r18, X+
     1b2:	3c 91       	ld	r19, X
     1b4:	16 97       	sbiw	r26, 0x06	; 6
     1b6:	d9 01       	movw	r26, r18
     1b8:	2d 91       	ld	r18, X+
     1ba:	3c 91       	ld	r19, X
     1bc:	42 17       	cp	r20, r18
     1be:	53 07       	cpc	r21, r19
     1c0:	50 f0       	brcs	.+20     	; 0x1d6 <vListInsert+0x4c>
     1c2:	02 80       	ldd	r0, Z+2	; 0x02
     1c4:	f3 81       	ldd	r31, Z+3	; 0x03
     1c6:	e0 2d       	mov	r30, r0
     1c8:	a2 81       	ldd	r26, Z+2	; 0x02
     1ca:	b3 81       	ldd	r27, Z+3	; 0x03
     1cc:	2d 91       	ld	r18, X+
     1ce:	3c 91       	ld	r19, X
     1d0:	42 17       	cp	r20, r18
     1d2:	53 07       	cpc	r21, r19
     1d4:	b0 f7       	brcc	.-20     	; 0x1c2 <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     1d6:	a2 81       	ldd	r26, Z+2	; 0x02
     1d8:	b3 81       	ldd	r27, Z+3	; 0x03
     1da:	bb 83       	std	Y+3, r27	; 0x03
     1dc:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     1de:	15 96       	adiw	r26, 0x05	; 5
     1e0:	dc 93       	st	X, r29
     1e2:	ce 93       	st	-X, r28
     1e4:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     1e6:	fd 83       	std	Y+5, r31	; 0x05
     1e8:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     1ea:	d3 83       	std	Z+3, r29	; 0x03
     1ec:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     1ee:	99 87       	std	Y+9, r25	; 0x09
     1f0:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     1f2:	fc 01       	movw	r30, r24
     1f4:	20 81       	ld	r18, Z
     1f6:	2f 5f       	subi	r18, 0xFF	; 255
     1f8:	20 83       	st	Z, r18
}
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     200:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     202:	a2 81       	ldd	r26, Z+2	; 0x02
     204:	b3 81       	ldd	r27, Z+3	; 0x03
     206:	84 81       	ldd	r24, Z+4	; 0x04
     208:	95 81       	ldd	r25, Z+5	; 0x05
     20a:	15 96       	adiw	r26, 0x05	; 5
     20c:	9c 93       	st	X, r25
     20e:	8e 93       	st	-X, r24
     210:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     212:	a4 81       	ldd	r26, Z+4	; 0x04
     214:	b5 81       	ldd	r27, Z+5	; 0x05
     216:	82 81       	ldd	r24, Z+2	; 0x02
     218:	93 81       	ldd	r25, Z+3	; 0x03
     21a:	13 96       	adiw	r26, 0x03	; 3
     21c:	9c 93       	st	X, r25
     21e:	8e 93       	st	-X, r24
     220:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     222:	a0 85       	ldd	r26, Z+8	; 0x08
     224:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     226:	11 96       	adiw	r26, 0x01	; 1
     228:	8d 91       	ld	r24, X+
     22a:	9c 91       	ld	r25, X
     22c:	12 97       	sbiw	r26, 0x02	; 2
     22e:	e8 17       	cp	r30, r24
     230:	f9 07       	cpc	r31, r25
     232:	31 f4       	brne	.+12     	; 0x240 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     234:	84 81       	ldd	r24, Z+4	; 0x04
     236:	95 81       	ldd	r25, Z+5	; 0x05
     238:	12 96       	adiw	r26, 0x02	; 2
     23a:	9c 93       	st	X, r25
     23c:	8e 93       	st	-X, r24
     23e:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     240:	11 86       	std	Z+9, r1	; 0x09
     242:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     244:	8c 91       	ld	r24, X
     246:	81 50       	subi	r24, 0x01	; 1
     248:	8c 93       	st	X, r24
     24a:	08 95       	ret

0000024c <initUSART>:
//RECEIVE FSM

enum RECState {Rec_Wait, Receive_State } rec_state;

void REC_Init(){
	rec_state = Rec_Wait;
     24c:	81 30       	cpi	r24, 0x01	; 1
     24e:	81 f0       	breq	.+32     	; 0x270 <initUSART+0x24>
     250:	e1 ec       	ldi	r30, 0xC1	; 193
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	80 81       	ld	r24, Z
     256:	88 61       	ori	r24, 0x18	; 24
     258:	80 83       	st	Z, r24
     25a:	e2 ec       	ldi	r30, 0xC2	; 194
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	86 60       	ori	r24, 0x06	; 6
     262:	80 83       	st	Z, r24
     264:	83 e3       	ldi	r24, 0x33	; 51
     266:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     26a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     26e:	08 95       	ret
     270:	e9 ec       	ldi	r30, 0xC9	; 201
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	80 81       	ld	r24, Z
     276:	88 61       	ori	r24, 0x18	; 24
     278:	80 83       	st	Z, r24
     27a:	ea ec       	ldi	r30, 0xCA	; 202
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	80 81       	ld	r24, Z
     280:	86 60       	ori	r24, 0x06	; 6
     282:	80 83       	st	Z, r24
     284:	83 e3       	ldi	r24, 0x33	; 51
     286:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     28a:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     28e:	08 95       	ret

00000290 <USART_Flush>:
     290:	81 30       	cpi	r24, 0x01	; 1
     292:	29 f4       	brne	.+10     	; 0x29e <USART_Flush+0xe>
     294:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     298:	88 23       	and	r24, r24
     29a:	74 f0       	brlt	.+28     	; 0x2b8 <USART_Flush+0x28>
     29c:	08 95       	ret
     29e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     2a2:	88 23       	and	r24, r24
     2a4:	8c f4       	brge	.+34     	; 0x2c8 <USART_Flush+0x38>
     2a6:	a6 ec       	ldi	r26, 0xC6	; 198
     2a8:	b0 e0       	ldi	r27, 0x00	; 0
     2aa:	e0 ec       	ldi	r30, 0xC0	; 192
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	8c 91       	ld	r24, X
     2b0:	80 81       	ld	r24, Z
     2b2:	88 23       	and	r24, r24
     2b4:	e4 f3       	brlt	.-8      	; 0x2ae <USART_Flush+0x1e>
     2b6:	08 95       	ret
     2b8:	ae ec       	ldi	r26, 0xCE	; 206
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	e8 ec       	ldi	r30, 0xC8	; 200
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	8c 91       	ld	r24, X
     2c2:	80 81       	ld	r24, Z
     2c4:	88 23       	and	r24, r24
     2c6:	e4 f3       	brlt	.-8      	; 0x2c0 <USART_Flush+0x30>
     2c8:	08 95       	ret

000002ca <USART_Receive>:
     2ca:	81 30       	cpi	r24, 0x01	; 1
     2cc:	41 f0       	breq	.+16     	; 0x2de <USART_Receive+0x14>
     2ce:	e0 ec       	ldi	r30, 0xC0	; 192
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	80 81       	ld	r24, Z
     2d4:	88 23       	and	r24, r24
     2d6:	ec f7       	brge	.-6      	; 0x2d2 <USART_Receive+0x8>
     2d8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     2dc:	08 95       	ret
     2de:	e8 ec       	ldi	r30, 0xC8	; 200
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	80 81       	ld	r24, Z
     2e4:	88 23       	and	r24, r24
     2e6:	ec f7       	brge	.-6      	; 0x2e2 <USART_Receive+0x18>
     2e8:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     2ec:	08 95       	ret

000002ee <generate_random_num>:
     2ee:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <rand>
     2f2:	6a e0       	ldi	r22, 0x0A	; 10
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	0c 94 6d 0b 	jmp	0x16da	; 0x16da <__divmodhi4>
     2fa:	08 95       	ret

000002fc <Motor_Tick>:
     2fc:	80 91 06 08 	lds	r24, 0x0806	; 0x800806 <motor_state>
     300:	81 30       	cpi	r24, 0x01	; 1
     302:	19 f0       	breq	.+6      	; 0x30a <Motor_Tick+0xe>
     304:	82 30       	cpi	r24, 0x02	; 2
     306:	99 f0       	breq	.+38     	; 0x32e <Motor_Tick+0x32>
     308:	24 c0       	rjmp	.+72     	; 0x352 <Motor_Tick+0x56>
     30a:	e0 91 9d 07 	lds	r30, 0x079D	; 0x80079d <p_index>
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	e7 5f       	subi	r30, 0xF7	; 247
     312:	fe 4f       	sbci	r31, 0xFE	; 254
     314:	80 81       	ld	r24, Z
     316:	85 b9       	out	0x05, r24	; 5
     318:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <p_index>
     31c:	83 30       	cpi	r24, 0x03	; 3
     31e:	19 f4       	brne	.+6      	; 0x326 <Motor_Tick+0x2a>
     320:	10 92 9d 07 	sts	0x079D, r1	; 0x80079d <p_index>
     324:	16 c0       	rjmp	.+44     	; 0x352 <Motor_Tick+0x56>
     326:	8f 5f       	subi	r24, 0xFF	; 255
     328:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <p_index>
     32c:	12 c0       	rjmp	.+36     	; 0x352 <Motor_Tick+0x56>
     32e:	e0 91 9d 07 	lds	r30, 0x079D	; 0x80079d <p_index>
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	e7 5f       	subi	r30, 0xF7	; 247
     336:	fe 4f       	sbci	r31, 0xFE	; 254
     338:	80 81       	ld	r24, Z
     33a:	85 b9       	out	0x05, r24	; 5
     33c:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <p_index>
     340:	81 11       	cpse	r24, r1
     342:	04 c0       	rjmp	.+8      	; 0x34c <Motor_Tick+0x50>
     344:	83 e0       	ldi	r24, 0x03	; 3
     346:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <p_index>
     34a:	03 c0       	rjmp	.+6      	; 0x352 <Motor_Tick+0x56>
     34c:	81 50       	subi	r24, 0x01	; 1
     34e:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <p_index>
     352:	80 91 06 08 	lds	r24, 0x0806	; 0x800806 <motor_state>
     356:	81 30       	cpi	r24, 0x01	; 1
     358:	99 f0       	breq	.+38     	; 0x380 <Motor_Tick+0x84>
     35a:	18 f0       	brcs	.+6      	; 0x362 <Motor_Tick+0x66>
     35c:	82 30       	cpi	r24, 0x02	; 2
     35e:	79 f1       	breq	.+94     	; 0x3be <Motor_Tick+0xc2>
     360:	4a c0       	rjmp	.+148    	; 0x3f6 <Motor_Tick+0xfa>
     362:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <STEPPER_GO>
     366:	88 23       	and	r24, r24
     368:	09 f4       	brne	.+2      	; 0x36c <Motor_Tick+0x70>
     36a:	47 c0       	rjmp	.+142    	; 0x3fa <Motor_Tick+0xfe>
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <motor_state>
     372:	10 92 9d 07 	sts	0x079D, r1	; 0x80079d <p_index>
     376:	10 92 9c 07 	sts	0x079C, r1	; 0x80079c <numCounter+0x1>
     37a:	10 92 9b 07 	sts	0x079B, r1	; 0x80079b <numCounter>
     37e:	08 95       	ret
     380:	80 91 9b 07 	lds	r24, 0x079B	; 0x80079b <numCounter>
     384:	90 91 9c 07 	lds	r25, 0x079C	; 0x80079c <numCounter+0x1>
     388:	01 96       	adiw	r24, 0x01	; 1
     38a:	90 93 9c 07 	sts	0x079C, r25	; 0x80079c <numCounter+0x1>
     38e:	80 93 9b 07 	sts	0x079B, r24	; 0x80079b <numCounter>
     392:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <numPhases>
     396:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <numPhases+0x1>
     39a:	82 17       	cp	r24, r18
     39c:	93 07       	cpc	r25, r19
     39e:	24 f4       	brge	.+8      	; 0x3a8 <Motor_Tick+0xac>
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <motor_state>
     3a6:	08 95       	ret
     3a8:	82 e0       	ldi	r24, 0x02	; 2
     3aa:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <motor_state>
     3ae:	83 e0       	ldi	r24, 0x03	; 3
     3b0:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <p_index>
     3b4:	10 92 9c 07 	sts	0x079C, r1	; 0x80079c <numCounter+0x1>
     3b8:	10 92 9b 07 	sts	0x079B, r1	; 0x80079b <numCounter>
     3bc:	08 95       	ret
     3be:	80 91 9b 07 	lds	r24, 0x079B	; 0x80079b <numCounter>
     3c2:	90 91 9c 07 	lds	r25, 0x079C	; 0x80079c <numCounter+0x1>
     3c6:	01 96       	adiw	r24, 0x01	; 1
     3c8:	90 93 9c 07 	sts	0x079C, r25	; 0x80079c <numCounter+0x1>
     3cc:	80 93 9b 07 	sts	0x079B, r24	; 0x80079b <numCounter>
     3d0:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <numPhases>
     3d4:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <numPhases+0x1>
     3d8:	82 17       	cp	r24, r18
     3da:	93 07       	cpc	r25, r19
     3dc:	24 f4       	brge	.+8      	; 0x3e6 <Motor_Tick+0xea>
     3de:	82 e0       	ldi	r24, 0x02	; 2
     3e0:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <motor_state>
     3e4:	08 95       	ret
     3e6:	10 92 06 08 	sts	0x0806, r1	; 0x800806 <motor_state>
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <STEPPER_DONE>
     3f0:	10 92 98 07 	sts	0x0798, r1	; 0x800798 <STEPPER_GO>
     3f4:	08 95       	ret
     3f6:	10 92 06 08 	sts	0x0806, r1	; 0x800806 <motor_state>
     3fa:	08 95       	ret

000003fc <MotorSecTask>:
     3fc:	10 92 06 08 	sts	0x0806, r1	; 0x800806 <motor_state>
     400:	7d df       	rcall	.-262    	; 0x2fc <Motor_Tick>
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	0e 94 ac 0a 	call	0x1558	; 0x1558 <vTaskDelay>
     40a:	fa cf       	rjmp	.-12     	; 0x400 <__LOCK_REGION_LENGTH__>

0000040c <MotorSecPulse>:
     40c:	af 92       	push	r10
     40e:	bf 92       	push	r11
     410:	cf 92       	push	r12
     412:	df 92       	push	r13
     414:	ef 92       	push	r14
     416:	ff 92       	push	r15
     418:	0f 93       	push	r16
     41a:	a1 2c       	mov	r10, r1
     41c:	b1 2c       	mov	r11, r1
     41e:	c1 2c       	mov	r12, r1
     420:	d1 2c       	mov	r13, r1
     422:	e1 2c       	mov	r14, r1
     424:	f1 2c       	mov	r15, r1
     426:	08 2f       	mov	r16, r24
     428:	20 e0       	ldi	r18, 0x00	; 0
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	45 e5       	ldi	r20, 0x55	; 85
     42e:	50 e0       	ldi	r21, 0x00	; 0
     430:	60 e1       	ldi	r22, 0x10	; 16
     432:	71 e0       	ldi	r23, 0x01	; 1
     434:	8e ef       	ldi	r24, 0xFE	; 254
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	1c d6       	rcall	.+3128   	; 0x1072 <xTaskGenericCreate>
     43a:	0f 91       	pop	r16
     43c:	ff 90       	pop	r15
     43e:	ef 90       	pop	r14
     440:	df 90       	pop	r13
     442:	cf 90       	pop	r12
     444:	bf 90       	pop	r11
     446:	af 90       	pop	r10
     448:	08 95       	ret

0000044a <stepper_controller_Tick>:
     44a:	80 91 07 08 	lds	r24, 0x0807	; 0x800807 <stepper_controller_state>
     44e:	81 30       	cpi	r24, 0x01	; 1
     450:	61 f0       	breq	.+24     	; 0x46a <stepper_controller_Tick+0x20>
     452:	18 f0       	brcs	.+6      	; 0x45a <stepper_controller_Tick+0x10>
     454:	82 30       	cpi	r24, 0x02	; 2
     456:	11 f1       	breq	.+68     	; 0x49c <stepper_controller_Tick+0x52>
     458:	35 c0       	rjmp	.+106    	; 0x4c4 <stepper_controller_Tick+0x7a>
     45a:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <systems_go>
     45e:	88 23       	and	r24, r24
     460:	99 f1       	breq	.+102    	; 0x4c8 <stepper_controller_Tick+0x7e>
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <stepper_controller_state>
     468:	08 95       	ret
     46a:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <systems_go>
     46e:	81 11       	cpse	r24, r1
     470:	03 c0       	rjmp	.+6      	; 0x478 <stepper_controller_Tick+0x2e>
     472:	10 92 07 08 	sts	0x0807, r1	; 0x800807 <stepper_controller_state>
     476:	08 95       	ret
     478:	3a df       	rcall	.-396    	; 0x2ee <generate_random_num>
     47a:	90 93 9a 07 	sts	0x079A, r25	; 0x80079a <temp_random+0x1>
     47e:	80 93 99 07 	sts	0x0799, r24	; 0x800799 <temp_random>
     482:	02 97       	sbiw	r24, 0x02	; 2
     484:	3c f0       	brlt	.+14     	; 0x494 <stepper_controller_Tick+0x4a>
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	80 93 98 07 	sts	0x0798, r24	; 0x800798 <STEPPER_GO>
     48c:	82 e0       	ldi	r24, 0x02	; 2
     48e:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <stepper_controller_state>
     492:	08 95       	ret
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <stepper_controller_state>
     49a:	08 95       	ret
     49c:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <STEPPER_DONE>
     4a0:	81 30       	cpi	r24, 0x01	; 1
     4a2:	91 f4       	brne	.+36     	; 0x4c8 <stepper_controller_Tick+0x7e>
     4a4:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <systems_go>
     4a8:	81 30       	cpi	r24, 0x01	; 1
     4aa:	29 f4       	brne	.+10     	; 0x4b6 <stepper_controller_Tick+0x6c>
     4ac:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <STEPPER_DONE>
     4b0:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <stepper_controller_state>
     4b4:	08 95       	ret
     4b6:	81 11       	cpse	r24, r1
     4b8:	07 c0       	rjmp	.+14     	; 0x4c8 <stepper_controller_Tick+0x7e>
     4ba:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <STEPPER_DONE>
     4be:	10 92 07 08 	sts	0x0807, r1	; 0x800807 <stepper_controller_state>
     4c2:	08 95       	ret
     4c4:	10 92 07 08 	sts	0x0807, r1	; 0x800807 <stepper_controller_state>
     4c8:	08 95       	ret

000004ca <stepper_controllerSecTask>:
     4ca:	10 92 07 08 	sts	0x0807, r1	; 0x800807 <stepper_controller_state>
     4ce:	bd df       	rcall	.-134    	; 0x44a <stepper_controller_Tick>
     4d0:	84 ef       	ldi	r24, 0xF4	; 244
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	0e 94 ac 0a 	call	0x1558	; 0x1558 <vTaskDelay>
     4d8:	fa cf       	rjmp	.-12     	; 0x4ce <stepper_controllerSecTask+0x4>

000004da <Start_stepper_controller_Pulse>:
     4da:	af 92       	push	r10
     4dc:	bf 92       	push	r11
     4de:	cf 92       	push	r12
     4e0:	df 92       	push	r13
     4e2:	ef 92       	push	r14
     4e4:	ff 92       	push	r15
     4e6:	0f 93       	push	r16
     4e8:	a1 2c       	mov	r10, r1
     4ea:	b1 2c       	mov	r11, r1
     4ec:	c1 2c       	mov	r12, r1
     4ee:	d1 2c       	mov	r13, r1
     4f0:	e1 2c       	mov	r14, r1
     4f2:	f1 2c       	mov	r15, r1
     4f4:	08 2f       	mov	r16, r24
     4f6:	20 e0       	ldi	r18, 0x00	; 0
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	45 e5       	ldi	r20, 0x55	; 85
     4fc:	50 e0       	ldi	r21, 0x00	; 0
     4fe:	6d e1       	ldi	r22, 0x1D	; 29
     500:	71 e0       	ldi	r23, 0x01	; 1
     502:	85 e6       	ldi	r24, 0x65	; 101
     504:	92 e0       	ldi	r25, 0x02	; 2
     506:	b5 d5       	rcall	.+2922   	; 0x1072 <xTaskGenericCreate>
     508:	0f 91       	pop	r16
     50a:	ff 90       	pop	r15
     50c:	ef 90       	pop	r14
     50e:	df 90       	pop	r13
     510:	cf 90       	pop	r12
     512:	bf 90       	pop	r11
     514:	af 90       	pop	r10
     516:	08 95       	ret

00000518 <SERVO_DRIVE_Tick>:
     518:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <servo_driver_state>
     51c:	81 11       	cpse	r24, r1
     51e:	28 c0       	rjmp	.+80     	; 0x570 <SERVO_DRIVE_Tick+0x58>
     520:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <servo_direction>
     524:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <servo_direction+0x1>
     528:	81 30       	cpi	r24, 0x01	; 1
     52a:	91 05       	cpc	r25, r1
     52c:	51 f4       	brne	.+20     	; 0x542 <SERVO_DRIVE_Tick+0x2a>
     52e:	10 92 96 07 	sts	0x0796, r1	; 0x800796 <right>
     532:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <center>
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	80 93 95 07 	sts	0x0795, r24	; 0x800795 <left>
     53c:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <max_servo>
     540:	19 c0       	rjmp	.+50     	; 0x574 <SERVO_DRIVE_Tick+0x5c>
     542:	02 97       	sbiw	r24, 0x02	; 2
     544:	59 f4       	brne	.+22     	; 0x55c <SERVO_DRIVE_Tick+0x44>
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	80 93 96 07 	sts	0x0796, r24	; 0x800796 <right>
     54c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <center>
     550:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <left>
     554:	82 e0       	ldi	r24, 0x02	; 2
     556:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <max_servo>
     55a:	0c c0       	rjmp	.+24     	; 0x574 <SERVO_DRIVE_Tick+0x5c>
     55c:	10 92 96 07 	sts	0x0796, r1	; 0x800796 <right>
     560:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <left>
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <center>
     56a:	10 92 94 07 	sts	0x0794, r1	; 0x800794 <max_servo>
     56e:	02 c0       	rjmp	.+4      	; 0x574 <SERVO_DRIVE_Tick+0x5c>
     570:	81 11       	cpse	r24, r1
     572:	03 c0       	rjmp	.+6      	; 0x57a <SERVO_DRIVE_Tick+0x62>
     574:	10 92 01 08 	sts	0x0801, r1	; 0x800801 <servo_driver_state>
     578:	08 95       	ret
     57a:	10 92 01 08 	sts	0x0801, r1	; 0x800801 <servo_driver_state>
     57e:	08 95       	ret

00000580 <SERVODRIVESecTask>:
     580:	10 92 01 08 	sts	0x0801, r1	; 0x800801 <servo_driver_state>
     584:	c9 df       	rcall	.-110    	; 0x518 <SERVO_DRIVE_Tick>
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	e6 d7       	rcall	.+4044   	; 0x1558 <vTaskDelay>
     58c:	fb cf       	rjmp	.-10     	; 0x584 <SERVODRIVESecTask+0x4>

0000058e <SERVODRIVESecPulse>:
     58e:	af 92       	push	r10
     590:	bf 92       	push	r11
     592:	cf 92       	push	r12
     594:	df 92       	push	r13
     596:	ef 92       	push	r14
     598:	ff 92       	push	r15
     59a:	0f 93       	push	r16
     59c:	a1 2c       	mov	r10, r1
     59e:	b1 2c       	mov	r11, r1
     5a0:	c1 2c       	mov	r12, r1
     5a2:	d1 2c       	mov	r13, r1
     5a4:	e1 2c       	mov	r14, r1
     5a6:	f1 2c       	mov	r15, r1
     5a8:	08 2f       	mov	r16, r24
     5aa:	20 e0       	ldi	r18, 0x00	; 0
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	45 e5       	ldi	r20, 0x55	; 85
     5b0:	50 e0       	ldi	r21, 0x00	; 0
     5b2:	67 e3       	ldi	r22, 0x37	; 55
     5b4:	71 e0       	ldi	r23, 0x01	; 1
     5b6:	80 ec       	ldi	r24, 0xC0	; 192
     5b8:	92 e0       	ldi	r25, 0x02	; 2
     5ba:	5b d5       	rcall	.+2742   	; 0x1072 <xTaskGenericCreate>
     5bc:	0f 91       	pop	r16
     5be:	ff 90       	pop	r15
     5c0:	ef 90       	pop	r14
     5c2:	df 90       	pop	r13
     5c4:	cf 90       	pop	r12
     5c6:	bf 90       	pop	r11
     5c8:	af 90       	pop	r10
     5ca:	08 95       	ret

000005cc <SERVO_Tick>:
     5cc:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <servo_state>
     5d0:	88 23       	and	r24, r24
     5d2:	19 f0       	breq	.+6      	; 0x5da <SERVO_Tick+0xe>
     5d4:	81 30       	cpi	r24, 0x01	; 1
     5d6:	c1 f0       	breq	.+48     	; 0x608 <SERVO_Tick+0x3c>
     5d8:	36 c0       	rjmp	.+108    	; 0x646 <SERVO_Tick+0x7a>
     5da:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <left>
     5de:	81 11       	cpse	r24, r1
     5e0:	04 c0       	rjmp	.+8      	; 0x5ea <SERVO_Tick+0x1e>
     5e2:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <right>
     5e6:	88 23       	and	r24, r24
     5e8:	59 f0       	breq	.+22     	; 0x600 <SERVO_Tick+0x34>
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <servo_state>
     5f0:	10 92 93 07 	sts	0x0793, r1	; 0x800793 <servo_counter>
     5f4:	40 9a       	sbi	0x08, 0	; 8
     5f6:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <servo_state>
     5fa:	81 30       	cpi	r24, 0x01	; 1
     5fc:	39 f1       	breq	.+78     	; 0x64c <SERVO_Tick+0x80>
     5fe:	08 95       	ret
     600:	40 98       	cbi	0x08, 0	; 8
     602:	10 92 04 08 	sts	0x0804, r1	; 0x800804 <servo_state>
     606:	08 95       	ret
     608:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <servo_counter>
     60c:	90 91 94 07 	lds	r25, 0x0794	; 0x800794 <max_servo>
     610:	89 17       	cp	r24, r25
     612:	78 f4       	brcc	.+30     	; 0x632 <SERVO_Tick+0x66>
     614:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <left>
     618:	91 11       	cpse	r25, r1
     61a:	04 c0       	rjmp	.+8      	; 0x624 <SERVO_Tick+0x58>
     61c:	90 91 96 07 	lds	r25, 0x0796	; 0x800796 <right>
     620:	99 23       	and	r25, r25
     622:	39 f0       	breq	.+14     	; 0x632 <SERVO_Tick+0x66>
     624:	8f 5f       	subi	r24, 0xFF	; 255
     626:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <servo_counter>
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <servo_state>
     630:	0d c0       	rjmp	.+26     	; 0x64c <SERVO_Tick+0x80>
     632:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <left>
     636:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <center>
     63a:	10 92 96 07 	sts	0x0796, r1	; 0x800796 <right>
     63e:	40 98       	cbi	0x08, 0	; 8
     640:	10 92 04 08 	sts	0x0804, r1	; 0x800804 <servo_state>
     644:	08 95       	ret
     646:	10 92 04 08 	sts	0x0804, r1	; 0x800804 <servo_state>
     64a:	08 95       	ret
     64c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <center>
     650:	88 23       	and	r24, r24
     652:	49 f0       	breq	.+18     	; 0x666 <SERVO_Tick+0x9a>
     654:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <left>
     658:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <center>
     65c:	10 92 96 07 	sts	0x0796, r1	; 0x800796 <right>
     660:	40 98       	cbi	0x08, 0	; 8
     662:	10 92 04 08 	sts	0x0804, r1	; 0x800804 <servo_state>
     666:	08 95       	ret

00000668 <SERVOSecTask>:
     668:	10 92 04 08 	sts	0x0804, r1	; 0x800804 <servo_state>
     66c:	af df       	rcall	.-162    	; 0x5cc <SERVO_Tick>
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	72 d7       	rcall	.+3812   	; 0x1558 <vTaskDelay>
     674:	fb cf       	rjmp	.-10     	; 0x66c <SERVOSecTask+0x4>

00000676 <SERVOSecPulse>:
     676:	af 92       	push	r10
     678:	bf 92       	push	r11
     67a:	cf 92       	push	r12
     67c:	df 92       	push	r13
     67e:	ef 92       	push	r14
     680:	ff 92       	push	r15
     682:	0f 93       	push	r16
     684:	a1 2c       	mov	r10, r1
     686:	b1 2c       	mov	r11, r1
     688:	c1 2c       	mov	r12, r1
     68a:	d1 2c       	mov	r13, r1
     68c:	e1 2c       	mov	r14, r1
     68e:	f1 2c       	mov	r15, r1
     690:	08 2f       	mov	r16, r24
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	45 e5       	ldi	r20, 0x55	; 85
     698:	50 e0       	ldi	r21, 0x00	; 0
     69a:	69 e4       	ldi	r22, 0x49	; 73
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	84 e3       	ldi	r24, 0x34	; 52
     6a0:	93 e0       	ldi	r25, 0x03	; 3
     6a2:	e7 d4       	rcall	.+2510   	; 0x1072 <xTaskGenericCreate>
     6a4:	0f 91       	pop	r16
     6a6:	ff 90       	pop	r15
     6a8:	ef 90       	pop	r14
     6aa:	df 90       	pop	r13
     6ac:	cf 90       	pop	r12
     6ae:	bf 90       	pop	r11
     6b0:	af 90       	pop	r10
     6b2:	08 95       	ret

000006b4 <servo_controller_Tick>:
     6b4:	80 91 08 08 	lds	r24, 0x0808	; 0x800808 <servo_controller_state>
     6b8:	81 30       	cpi	r24, 0x01	; 1
     6ba:	69 f0       	breq	.+26     	; 0x6d6 <servo_controller_Tick+0x22>
     6bc:	18 f0       	brcs	.+6      	; 0x6c4 <servo_controller_Tick+0x10>
     6be:	82 30       	cpi	r24, 0x02	; 2
     6c0:	89 f1       	breq	.+98     	; 0x724 <servo_controller_Tick+0x70>
     6c2:	54 c0       	rjmp	.+168    	; 0x76c <servo_controller_Tick+0xb8>
     6c4:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <systems_go>
     6c8:	88 23       	and	r24, r24
     6ca:	09 f4       	brne	.+2      	; 0x6ce <servo_controller_Tick+0x1a>
     6cc:	51 c0       	rjmp	.+162    	; 0x770 <servo_controller_Tick+0xbc>
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <servo_controller_state>
     6d4:	08 95       	ret
     6d6:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <systems_go>
     6da:	81 11       	cpse	r24, r1
     6dc:	03 c0       	rjmp	.+6      	; 0x6e4 <servo_controller_Tick+0x30>
     6de:	10 92 08 08 	sts	0x0808, r1	; 0x800808 <servo_controller_state>
     6e2:	08 95       	ret
     6e4:	04 de       	rcall	.-1016   	; 0x2ee <generate_random_num>
     6e6:	90 93 90 07 	sts	0x0790, r25	; 0x800790 <temp_random2+0x1>
     6ea:	80 93 8f 07 	sts	0x078F, r24	; 0x80078f <temp_random2>
     6ee:	08 97       	sbiw	r24, 0x08	; 8
     6f0:	ac f0       	brlt	.+42     	; 0x71c <servo_controller_Tick+0x68>
     6f2:	82 e0       	ldi	r24, 0x02	; 2
     6f4:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <servo_controller_state>
     6f8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <head_movement>
     6fc:	81 30       	cpi	r24, 0x01	; 1
     6fe:	39 f4       	brne	.+14     	; 0x70e <servo_controller_Tick+0x5a>
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	90 93 92 07 	sts	0x0792, r25	; 0x800792 <servo_direction+0x1>
     708:	80 93 91 07 	sts	0x0791, r24	; 0x800791 <servo_direction>
     70c:	08 95       	ret
     70e:	82 e0       	ldi	r24, 0x02	; 2
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	90 93 92 07 	sts	0x0792, r25	; 0x800792 <servo_direction+0x1>
     716:	80 93 91 07 	sts	0x0791, r24	; 0x800791 <servo_direction>
     71a:	08 95       	ret
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <servo_controller_state>
     722:	08 95       	ret
     724:	e4 dd       	rcall	.-1080   	; 0x2ee <generate_random_num>
     726:	90 93 90 07 	sts	0x0790, r25	; 0x800790 <temp_random2+0x1>
     72a:	80 93 8f 07 	sts	0x078F, r24	; 0x80078f <temp_random2>
     72e:	03 97       	sbiw	r24, 0x03	; 3
     730:	24 f4       	brge	.+8      	; 0x73a <servo_controller_Tick+0x86>
     732:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <systems_go>
     736:	81 11       	cpse	r24, r1
     738:	15 c0       	rjmp	.+42     	; 0x764 <servo_controller_Tick+0xb0>
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <servo_controller_state>
     740:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <head_movement>
     744:	81 30       	cpi	r24, 0x01	; 1
     746:	39 f4       	brne	.+14     	; 0x756 <servo_controller_Tick+0xa2>
     748:	82 e0       	ldi	r24, 0x02	; 2
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	90 93 92 07 	sts	0x0792, r25	; 0x800792 <servo_direction+0x1>
     750:	80 93 91 07 	sts	0x0791, r24	; 0x800791 <servo_direction>
     754:	08 95       	ret
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	90 93 92 07 	sts	0x0792, r25	; 0x800792 <servo_direction+0x1>
     75e:	80 93 91 07 	sts	0x0791, r24	; 0x800791 <servo_direction>
     762:	08 95       	ret
     764:	82 e0       	ldi	r24, 0x02	; 2
     766:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <servo_controller_state>
     76a:	08 95       	ret
     76c:	10 92 08 08 	sts	0x0808, r1	; 0x800808 <servo_controller_state>
     770:	08 95       	ret

00000772 <servo_controllerSecTask>:
     772:	10 92 08 08 	sts	0x0808, r1	; 0x800808 <servo_controller_state>
     776:	9e df       	rcall	.-196    	; 0x6b4 <servo_controller_Tick>
     778:	84 ef       	ldi	r24, 0xF4	; 244
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	ed d6       	rcall	.+3546   	; 0x1558 <vTaskDelay>
     77e:	fb cf       	rjmp	.-10     	; 0x776 <servo_controllerSecTask+0x4>

00000780 <Start_servo_controller_Pulse>:
     780:	af 92       	push	r10
     782:	bf 92       	push	r11
     784:	cf 92       	push	r12
     786:	df 92       	push	r13
     788:	ef 92       	push	r14
     78a:	ff 92       	push	r15
     78c:	0f 93       	push	r16
     78e:	a1 2c       	mov	r10, r1
     790:	b1 2c       	mov	r11, r1
     792:	c1 2c       	mov	r12, r1
     794:	d1 2c       	mov	r13, r1
     796:	e1 2c       	mov	r14, r1
     798:	f1 2c       	mov	r15, r1
     79a:	08 2f       	mov	r16, r24
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	45 e5       	ldi	r20, 0x55	; 85
     7a2:	50 e0       	ldi	r21, 0x00	; 0
     7a4:	66 e5       	ldi	r22, 0x56	; 86
     7a6:	71 e0       	ldi	r23, 0x01	; 1
     7a8:	89 eb       	ldi	r24, 0xB9	; 185
     7aa:	93 e0       	ldi	r25, 0x03	; 3
     7ac:	62 d4       	rcall	.+2244   	; 0x1072 <xTaskGenericCreate>
     7ae:	0f 91       	pop	r16
     7b0:	ff 90       	pop	r15
     7b2:	ef 90       	pop	r14
     7b4:	df 90       	pop	r13
     7b6:	cf 90       	pop	r12
     7b8:	bf 90       	pop	r11
     7ba:	af 90       	pop	r10
     7bc:	08 95       	ret

000007be <Audio_Tick>:
     7be:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <audio_state>
     7c2:	88 23       	and	r24, r24
     7c4:	19 f0       	breq	.+6      	; 0x7cc <Audio_Tick+0xe>
     7c6:	81 30       	cpi	r24, 0x01	; 1
     7c8:	29 f0       	breq	.+10     	; 0x7d4 <Audio_Tick+0x16>
     7ca:	0b c0       	rjmp	.+22     	; 0x7e2 <Audio_Tick+0x24>
     7cc:	88 b1       	in	r24, 0x08	; 8
     7ce:	8c 60       	ori	r24, 0x0C	; 12
     7d0:	88 b9       	out	0x08, r24	; 8
     7d2:	07 c0       	rjmp	.+14     	; 0x7e2 <Audio_Tick+0x24>
     7d4:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <bark_setting>
     7d8:	81 30       	cpi	r24, 0x01	; 1
     7da:	11 f4       	brne	.+4      	; 0x7e0 <Audio_Tick+0x22>
     7dc:	43 98       	cbi	0x08, 3	; 8
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <Audio_Tick+0x24>
     7e0:	42 98       	cbi	0x08, 2	; 8
     7e2:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <audio_state>
     7e6:	88 23       	and	r24, r24
     7e8:	19 f0       	breq	.+6      	; 0x7f0 <Audio_Tick+0x32>
     7ea:	81 30       	cpi	r24, 0x01	; 1
     7ec:	41 f0       	breq	.+16     	; 0x7fe <Audio_Tick+0x40>
     7ee:	0e c0       	rjmp	.+28     	; 0x80c <Audio_Tick+0x4e>
     7f0:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <systems_go>
     7f4:	81 30       	cpi	r24, 0x01	; 1
     7f6:	61 f4       	brne	.+24     	; 0x810 <Audio_Tick+0x52>
     7f8:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <audio_state>
     7fc:	08 95       	ret
     7fe:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <systems_go>
     802:	81 30       	cpi	r24, 0x01	; 1
     804:	29 f0       	breq	.+10     	; 0x810 <Audio_Tick+0x52>
     806:	10 92 05 08 	sts	0x0805, r1	; 0x800805 <audio_state>
     80a:	08 95       	ret
     80c:	10 92 05 08 	sts	0x0805, r1	; 0x800805 <audio_state>
     810:	08 95       	ret

00000812 <AudioSecTask>:
     812:	10 92 05 08 	sts	0x0805, r1	; 0x800805 <audio_state>
     816:	d3 df       	rcall	.-90     	; 0x7be <Audio_Tick>
     818:	8a e0       	ldi	r24, 0x0A	; 10
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	9d d6       	rcall	.+3386   	; 0x1558 <vTaskDelay>
     81e:	fb cf       	rjmp	.-10     	; 0x816 <AudioSecTask+0x4>

00000820 <StartAudioPulse>:
     820:	af 92       	push	r10
     822:	bf 92       	push	r11
     824:	cf 92       	push	r12
     826:	df 92       	push	r13
     828:	ef 92       	push	r14
     82a:	ff 92       	push	r15
     82c:	0f 93       	push	r16
     82e:	a1 2c       	mov	r10, r1
     830:	b1 2c       	mov	r11, r1
     832:	c1 2c       	mov	r12, r1
     834:	d1 2c       	mov	r13, r1
     836:	e1 2c       	mov	r14, r1
     838:	f1 2c       	mov	r15, r1
     83a:	08 2f       	mov	r16, r24
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	45 e5       	ldi	r20, 0x55	; 85
     842:	50 e0       	ldi	r21, 0x00	; 0
     844:	6e e6       	ldi	r22, 0x6E	; 110
     846:	71 e0       	ldi	r23, 0x01	; 1
     848:	89 e0       	ldi	r24, 0x09	; 9
     84a:	94 e0       	ldi	r25, 0x04	; 4
     84c:	12 d4       	rcall	.+2084   	; 0x1072 <xTaskGenericCreate>
     84e:	0f 91       	pop	r16
     850:	ff 90       	pop	r15
     852:	ef 90       	pop	r14
     854:	df 90       	pop	r13
     856:	cf 90       	pop	r12
     858:	bf 90       	pop	r11
     85a:	af 90       	pop	r10
     85c:	08 95       	ret

0000085e <Motion_Tick>:
     85e:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <motion_state>
     862:	88 23       	and	r24, r24
     864:	19 f0       	breq	.+6      	; 0x86c <Motion_Tick+0xe>
     866:	82 30       	cpi	r24, 0x02	; 2
     868:	59 f0       	breq	.+22     	; 0x880 <Motion_Tick+0x22>
     86a:	13 c0       	rjmp	.+38     	; 0x892 <Motion_Tick+0x34>
     86c:	80 91 8c 07 	lds	r24, 0x078C	; 0x80078c <motion_boot_cnt>
     870:	90 91 8d 07 	lds	r25, 0x078D	; 0x80078d <motion_boot_cnt+0x1>
     874:	01 96       	adiw	r24, 0x01	; 1
     876:	90 93 8d 07 	sts	0x078D, r25	; 0x80078d <motion_boot_cnt+0x1>
     87a:	80 93 8c 07 	sts	0x078C, r24	; 0x80078c <motion_boot_cnt>
     87e:	0f c0       	rjmp	.+30     	; 0x89e <Motion_Tick+0x40>
     880:	02 9b       	sbis	0x00, 2	; 0
     882:	04 c0       	rjmp	.+8      	; 0x88c <Motion_Tick+0x2e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <motion_detected>
     88a:	25 c0       	rjmp	.+74     	; 0x8d6 <Motion_Tick+0x78>
     88c:	10 92 8e 07 	sts	0x078E, r1	; 0x80078e <motion_detected>
     890:	22 c0       	rjmp	.+68     	; 0x8d6 <Motion_Tick+0x78>
     892:	81 30       	cpi	r24, 0x01	; 1
     894:	b1 f0       	breq	.+44     	; 0x8c2 <Motion_Tick+0x64>
     896:	18 f0       	brcs	.+6      	; 0x89e <Motion_Tick+0x40>
     898:	82 30       	cpi	r24, 0x02	; 2
     89a:	49 f5       	brne	.+82     	; 0x8ee <Motion_Tick+0x90>
     89c:	1c c0       	rjmp	.+56     	; 0x8d6 <Motion_Tick+0x78>
     89e:	80 91 8c 07 	lds	r24, 0x078C	; 0x80078c <motion_boot_cnt>
     8a2:	90 91 8d 07 	lds	r25, 0x078D	; 0x80078d <motion_boot_cnt+0x1>
     8a6:	80 32       	cpi	r24, 0x20	; 32
     8a8:	9e 44       	sbci	r25, 0x4E	; 78
     8aa:	1c f4       	brge	.+6      	; 0x8b2 <Motion_Tick+0x54>
     8ac:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <motion_state>
     8b0:	08 95       	ret
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <motion_state>
     8b8:	10 92 8d 07 	sts	0x078D, r1	; 0x80078d <motion_boot_cnt+0x1>
     8bc:	10 92 8c 07 	sts	0x078C, r1	; 0x80078c <motion_boot_cnt>
     8c0:	08 95       	ret
     8c2:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <ARM_DISARM>
     8c6:	81 30       	cpi	r24, 0x01	; 1
     8c8:	a9 f4       	brne	.+42     	; 0x8f4 <Motion_Tick+0x96>
     8ca:	10 92 8e 07 	sts	0x078E, r1	; 0x80078e <motion_detected>
     8ce:	82 e0       	ldi	r24, 0x02	; 2
     8d0:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <motion_state>
     8d4:	08 95       	ret
     8d6:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <ARM_DISARM>
     8da:	81 30       	cpi	r24, 0x01	; 1
     8dc:	21 f4       	brne	.+8      	; 0x8e6 <Motion_Tick+0x88>
     8de:	82 e0       	ldi	r24, 0x02	; 2
     8e0:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <motion_state>
     8e4:	08 95       	ret
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <motion_state>
     8ec:	08 95       	ret
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <motion_state>
     8f4:	08 95       	ret

000008f6 <MotionSecTask>:
     8f6:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <motion_state>
     8fa:	b1 df       	rcall	.-158    	; 0x85e <Motion_Tick>
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	2b d6       	rcall	.+3158   	; 0x1558 <vTaskDelay>
     902:	fb cf       	rjmp	.-10     	; 0x8fa <MotionSecTask+0x4>

00000904 <StartMotionPulse>:
     904:	af 92       	push	r10
     906:	bf 92       	push	r11
     908:	cf 92       	push	r12
     90a:	df 92       	push	r13
     90c:	ef 92       	push	r14
     90e:	ff 92       	push	r15
     910:	0f 93       	push	r16
     912:	a1 2c       	mov	r10, r1
     914:	b1 2c       	mov	r11, r1
     916:	c1 2c       	mov	r12, r1
     918:	d1 2c       	mov	r13, r1
     91a:	e1 2c       	mov	r14, r1
     91c:	f1 2c       	mov	r15, r1
     91e:	08 2f       	mov	r16, r24
     920:	20 e0       	ldi	r18, 0x00	; 0
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	45 e5       	ldi	r20, 0x55	; 85
     926:	50 e0       	ldi	r21, 0x00	; 0
     928:	6b e7       	ldi	r22, 0x7B	; 123
     92a:	71 e0       	ldi	r23, 0x01	; 1
     92c:	8b e7       	ldi	r24, 0x7B	; 123
     92e:	94 e0       	ldi	r25, 0x04	; 4
     930:	a0 d3       	rcall	.+1856   	; 0x1072 <xTaskGenericCreate>
     932:	0f 91       	pop	r16
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	df 90       	pop	r13
     93a:	cf 90       	pop	r12
     93c:	bf 90       	pop	r11
     93e:	af 90       	pop	r10
     940:	08 95       	ret

00000942 <Control_Tick>:
     942:	80 91 02 08 	lds	r24, 0x0802	; 0x800802 <control_state>
     946:	82 30       	cpi	r24, 0x02	; 2
     948:	09 f4       	brne	.+2      	; 0x94c <Control_Tick+0xa>
     94a:	49 c0       	rjmp	.+146    	; 0x9de <Control_Tick+0x9c>
     94c:	28 f4       	brcc	.+10     	; 0x958 <Control_Tick+0x16>
     94e:	88 23       	and	r24, r24
     950:	61 f0       	breq	.+24     	; 0x96a <Control_Tick+0x28>
     952:	81 30       	cpi	r24, 0x01	; 1
     954:	99 f0       	breq	.+38     	; 0x97c <Control_Tick+0x3a>
     956:	71 c0       	rjmp	.+226    	; 0xa3a <Control_Tick+0xf8>
     958:	84 30       	cpi	r24, 0x04	; 4
     95a:	09 f4       	brne	.+2      	; 0x95e <Control_Tick+0x1c>
     95c:	51 c0       	rjmp	.+162    	; 0xa00 <Control_Tick+0xbe>
     95e:	08 f4       	brcc	.+2      	; 0x962 <Control_Tick+0x20>
     960:	45 c0       	rjmp	.+138    	; 0x9ec <Control_Tick+0xaa>
     962:	85 30       	cpi	r24, 0x05	; 5
     964:	09 f4       	brne	.+2      	; 0x968 <Control_Tick+0x26>
     966:	5c c0       	rjmp	.+184    	; 0xa20 <Control_Tick+0xde>
     968:	68 c0       	rjmp	.+208    	; 0xa3a <Control_Tick+0xf8>
     96a:	85 b1       	in	r24, 0x05	; 5
     96c:	8f 70       	andi	r24, 0x0F	; 15
     96e:	85 b9       	out	0x05, r24	; 5
     970:	85 b1       	in	r24, 0x05	; 5
     972:	80 6f       	ori	r24, 0xF0	; 240
     974:	85 b9       	out	0x05, r24	; 5
     976:	10 92 a2 07 	sts	0x07A2, r1	; 0x8007a2 <systems_go>
     97a:	5f c0       	rjmp	.+190    	; 0xa3a <Control_Tick+0xf8>
     97c:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <random_seed_val>
     980:	90 91 a0 07 	lds	r25, 0x07A0	; 0x8007a0 <random_seed_val+0x1>
     984:	01 96       	adiw	r24, 0x01	; 1
     986:	8f 30       	cpi	r24, 0x0F	; 15
     988:	27 e2       	ldi	r18, 0x27	; 39
     98a:	92 07       	cpc	r25, r18
     98c:	2c f4       	brge	.+10     	; 0x998 <Control_Tick+0x56>
     98e:	90 93 a0 07 	sts	0x07A0, r25	; 0x8007a0 <random_seed_val+0x1>
     992:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <random_seed_val>
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <Control_Tick+0x5e>
     998:	10 92 a0 07 	sts	0x07A0, r1	; 0x8007a0 <random_seed_val+0x1>
     99c:	10 92 9f 07 	sts	0x079F, r1	; 0x80079f <random_seed_val>
     9a0:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <delay_timing>
     9a4:	81 11       	cpse	r24, r1
     9a6:	07 c0       	rjmp	.+14     	; 0x9b6 <Control_Tick+0x74>
     9a8:	85 e0       	ldi	r24, 0x05	; 5
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <delay_sec+0x1>
     9b0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <delay_sec>
     9b4:	0f c0       	rjmp	.+30     	; 0x9d4 <Control_Tick+0x92>
     9b6:	81 30       	cpi	r24, 0x01	; 1
     9b8:	39 f4       	brne	.+14     	; 0x9c8 <Control_Tick+0x86>
     9ba:	8a e0       	ldi	r24, 0x0A	; 10
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <delay_sec+0x1>
     9c2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <delay_sec>
     9c6:	06 c0       	rjmp	.+12     	; 0x9d4 <Control_Tick+0x92>
     9c8:	8f e0       	ldi	r24, 0x0F	; 15
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <delay_sec+0x1>
     9d0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <delay_sec>
     9d4:	85 b1       	in	r24, 0x05	; 5
     9d6:	8f 70       	andi	r24, 0x0F	; 15
     9d8:	85 b9       	out	0x05, r24	; 5
     9da:	2c 9a       	sbi	0x05, 4	; 5
     9dc:	2e c0       	rjmp	.+92     	; 0xa3a <Control_Tick+0xf8>
     9de:	85 b1       	in	r24, 0x05	; 5
     9e0:	8f 70       	andi	r24, 0x0F	; 15
     9e2:	85 b9       	out	0x05, r24	; 5
     9e4:	85 b1       	in	r24, 0x05	; 5
     9e6:	80 65       	ori	r24, 0x50	; 80
     9e8:	85 b9       	out	0x05, r24	; 5
     9ea:	27 c0       	rjmp	.+78     	; 0xa3a <Control_Tick+0xf8>
     9ec:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <vishal_counter>
     9f0:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <vishal_counter+0x1>
     9f4:	01 96       	adiw	r24, 0x01	; 1
     9f6:	90 93 89 07 	sts	0x0789, r25	; 0x800789 <vishal_counter+0x1>
     9fa:	80 93 88 07 	sts	0x0788, r24	; 0x800788 <vishal_counter>
     9fe:	8a c0       	rjmp	.+276    	; 0xb14 <Control_Tick+0x1d2>
     a00:	85 b1       	in	r24, 0x05	; 5
     a02:	8f 70       	andi	r24, 0x0F	; 15
     a04:	85 b9       	out	0x05, r24	; 5
     a06:	85 b1       	in	r24, 0x05	; 5
     a08:	80 63       	ori	r24, 0x30	; 48
     a0a:	85 b9       	out	0x05, r24	; 5
     a0c:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <controll_counter>
     a10:	90 91 8b 07 	lds	r25, 0x078B	; 0x80078b <controll_counter+0x1>
     a14:	01 96       	adiw	r24, 0x01	; 1
     a16:	90 93 8b 07 	sts	0x078B, r25	; 0x80078b <controll_counter+0x1>
     a1a:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <controll_counter>
     a1e:	0d c0       	rjmp	.+26     	; 0xa3a <Control_Tick+0xf8>
     a20:	85 b1       	in	r24, 0x05	; 5
     a22:	8f 70       	andi	r24, 0x0F	; 15
     a24:	85 b9       	out	0x05, r24	; 5
     a26:	2e 9a       	sbi	0x05, 6	; 5
     a28:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <controll_counter>
     a2c:	90 91 8b 07 	lds	r25, 0x078B	; 0x80078b <controll_counter+0x1>
     a30:	01 96       	adiw	r24, 0x01	; 1
     a32:	90 93 8b 07 	sts	0x078B, r25	; 0x80078b <controll_counter+0x1>
     a36:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <controll_counter>
     a3a:	80 91 02 08 	lds	r24, 0x0802	; 0x800802 <control_state>
     a3e:	82 30       	cpi	r24, 0x02	; 2
     a40:	09 f4       	brne	.+2      	; 0xa44 <Control_Tick+0x102>
     a42:	53 c0       	rjmp	.+166    	; 0xaea <Control_Tick+0x1a8>
     a44:	28 f4       	brcc	.+10     	; 0xa50 <Control_Tick+0x10e>
     a46:	88 23       	and	r24, r24
     a48:	61 f0       	breq	.+24     	; 0xa62 <Control_Tick+0x120>
     a4a:	81 30       	cpi	r24, 0x01	; 1
     a4c:	01 f1       	breq	.+64     	; 0xa8e <Control_Tick+0x14c>
     a4e:	08 95       	ret
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <Control_Tick+0x114>
     a54:	72 c0       	rjmp	.+228    	; 0xb3a <Control_Tick+0x1f8>
     a56:	08 f4       	brcc	.+2      	; 0xa5a <Control_Tick+0x118>
     a58:	5d c0       	rjmp	.+186    	; 0xb14 <Control_Tick+0x1d2>
     a5a:	85 30       	cpi	r24, 0x05	; 5
     a5c:	09 f4       	brne	.+2      	; 0xa60 <Control_Tick+0x11e>
     a5e:	b3 c0       	rjmp	.+358    	; 0xbc6 <Control_Tick+0x284>
     a60:	08 95       	ret
     a62:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <ARM_DISARM>
     a66:	81 30       	cpi	r24, 0x01	; 1
     a68:	09 f0       	breq	.+2      	; 0xa6c <Control_Tick+0x12a>
     a6a:	c8 c0       	rjmp	.+400    	; 0xbfc <Control_Tick+0x2ba>
     a6c:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <control_state>
     a70:	10 92 a2 07 	sts	0x07A2, r1	; 0x8007a2 <systems_go>
     a74:	10 92 8b 07 	sts	0x078B, r1	; 0x80078b <controll_counter+0x1>
     a78:	10 92 8a 07 	sts	0x078A, r1	; 0x80078a <controll_counter>
     a7c:	10 92 89 07 	sts	0x0789, r1	; 0x800789 <vishal_counter+0x1>
     a80:	10 92 88 07 	sts	0x0788, r1	; 0x800788 <vishal_counter>
     a84:	10 92 a0 07 	sts	0x07A0, r1	; 0x8007a0 <random_seed_val+0x1>
     a88:	10 92 9f 07 	sts	0x079F, r1	; 0x80079f <random_seed_val>
     a8c:	08 95       	ret
     a8e:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <ARM_DISARM>
     a92:	81 11       	cpse	r24, r1
     a94:	03 c0       	rjmp	.+6      	; 0xa9c <Control_Tick+0x15a>
     a96:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <control_state>
     a9a:	08 95       	ret
     a9c:	80 b1       	in	r24, 0x00	; 0
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	88 0f       	add	r24, r24
     aa2:	89 2f       	mov	r24, r25
     aa4:	88 1f       	adc	r24, r24
     aa6:	99 0b       	sbc	r25, r25
     aa8:	91 95       	neg	r25
     aaa:	89 2b       	or	r24, r25
     aac:	61 f0       	breq	.+24     	; 0xac6 <Control_Tick+0x184>
     aae:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <peripheral_setting>
     ab2:	81 30       	cpi	r24, 0x01	; 1
     ab4:	41 f4       	brne	.+16     	; 0xac6 <Control_Tick+0x184>
     ab6:	82 e0       	ldi	r24, 0x02	; 2
     ab8:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <control_state>
     abc:	10 92 89 07 	sts	0x0789, r1	; 0x800789 <vishal_counter+0x1>
     ac0:	10 92 88 07 	sts	0x0788, r1	; 0x800788 <vishal_counter>
     ac4:	08 95       	ret
     ac6:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <motion_detected>
     aca:	81 30       	cpi	r24, 0x01	; 1
     acc:	09 f0       	breq	.+2      	; 0xad0 <Control_Tick+0x18e>
     ace:	96 c0       	rjmp	.+300    	; 0xbfc <Control_Tick+0x2ba>
     ad0:	84 e0       	ldi	r24, 0x04	; 4
     ad2:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <control_state>
     ad6:	10 92 8b 07 	sts	0x078B, r1	; 0x80078b <controll_counter+0x1>
     ada:	10 92 8a 07 	sts	0x078A, r1	; 0x80078a <controll_counter>
     ade:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <random_seed_val>
     ae2:	90 91 a0 07 	lds	r25, 0x07A0	; 0x8007a0 <random_seed_val+0x1>
     ae6:	6a c6       	rjmp	.+3284   	; 0x17bc <srand>
     ae8:	08 95       	ret
     aea:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <ARM_DISARM>
     aee:	81 11       	cpse	r24, r1
     af0:	03 c0       	rjmp	.+6      	; 0xaf8 <Control_Tick+0x1b6>
     af2:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <control_state>
     af6:	08 95       	ret
     af8:	80 b1       	in	r24, 0x00	; 0
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	88 0f       	add	r24, r24
     afe:	89 2f       	mov	r24, r25
     b00:	88 1f       	adc	r24, r24
     b02:	99 0b       	sbc	r25, r25
     b04:	91 95       	neg	r25
     b06:	89 2b       	or	r24, r25
     b08:	09 f0       	breq	.+2      	; 0xb0c <Control_Tick+0x1ca>
     b0a:	78 c0       	rjmp	.+240    	; 0xbfc <Control_Tick+0x2ba>
     b0c:	83 e0       	ldi	r24, 0x03	; 3
     b0e:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <control_state>
     b12:	08 95       	ret
     b14:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <ARM_DISARM>
     b18:	81 11       	cpse	r24, r1
     b1a:	03 c0       	rjmp	.+6      	; 0xb22 <Control_Tick+0x1e0>
     b1c:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <control_state>
     b20:	08 95       	ret
     b22:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <vishal_counter>
     b26:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <vishal_counter+0x1>
     b2a:	88 38       	cpi	r24, 0x88	; 136
     b2c:	93 41       	sbci	r25, 0x13	; 19
     b2e:	0c f4       	brge	.+2      	; 0xb32 <Control_Tick+0x1f0>
     b30:	65 c0       	rjmp	.+202    	; 0xbfc <Control_Tick+0x2ba>
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <control_state>
     b38:	08 95       	ret
     b3a:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <ARM_DISARM>
     b3e:	81 11       	cpse	r24, r1
     b40:	07 c0       	rjmp	.+14     	; 0xb50 <Control_Tick+0x20e>
     b42:	10 92 8b 07 	sts	0x078B, r1	; 0x80078b <controll_counter+0x1>
     b46:	10 92 8a 07 	sts	0x078A, r1	; 0x80078a <controll_counter>
     b4a:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <control_state>
     b4e:	08 95       	ret
     b50:	80 b1       	in	r24, 0x00	; 0
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	88 0f       	add	r24, r24
     b56:	89 2f       	mov	r24, r25
     b58:	88 1f       	adc	r24, r24
     b5a:	99 0b       	sbc	r25, r25
     b5c:	91 95       	neg	r25
     b5e:	89 2b       	or	r24, r25
     b60:	61 f0       	breq	.+24     	; 0xb7a <Control_Tick+0x238>
     b62:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <peripheral_setting>
     b66:	81 30       	cpi	r24, 0x01	; 1
     b68:	41 f4       	brne	.+16     	; 0xb7a <Control_Tick+0x238>
     b6a:	82 e0       	ldi	r24, 0x02	; 2
     b6c:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <control_state>
     b70:	10 92 89 07 	sts	0x0789, r1	; 0x800789 <vishal_counter+0x1>
     b74:	10 92 88 07 	sts	0x0788, r1	; 0x800788 <vishal_counter>
     b78:	08 95       	ret
     b7a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <delay_sec>
     b7e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <delay_sec+0x1>
     b82:	88 ee       	ldi	r24, 0xE8	; 232
     b84:	93 e0       	ldi	r25, 0x03	; 3
     b86:	48 9f       	mul	r20, r24
     b88:	90 01       	movw	r18, r0
     b8a:	49 9f       	mul	r20, r25
     b8c:	30 0d       	add	r19, r0
     b8e:	58 9f       	mul	r21, r24
     b90:	30 0d       	add	r19, r0
     b92:	11 24       	eor	r1, r1
     b94:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <controll_counter>
     b98:	90 91 8b 07 	lds	r25, 0x078B	; 0x80078b <controll_counter+0x1>
     b9c:	82 17       	cp	r24, r18
     b9e:	93 07       	cpc	r25, r19
     ba0:	3c f0       	brlt	.+14     	; 0xbb0 <Control_Tick+0x26e>
     ba2:	85 e0       	ldi	r24, 0x05	; 5
     ba4:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <control_state>
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <systems_go>
     bae:	08 95       	ret
     bb0:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <motion_detected>
     bb4:	81 30       	cpi	r24, 0x01	; 1
     bb6:	11 f1       	breq	.+68     	; 0xbfc <Control_Tick+0x2ba>
     bb8:	10 92 8b 07 	sts	0x078B, r1	; 0x80078b <controll_counter+0x1>
     bbc:	10 92 8a 07 	sts	0x078A, r1	; 0x80078a <controll_counter>
     bc0:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <control_state>
     bc4:	08 95       	ret
     bc6:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <ARM_DISARM>
     bca:	81 11       	cpse	r24, r1
     bcc:	03 c0       	rjmp	.+6      	; 0xbd4 <Control_Tick+0x292>
     bce:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <control_state>
     bd2:	08 95       	ret
     bd4:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <controll_counter>
     bd8:	90 91 8b 07 	lds	r25, 0x078B	; 0x80078b <controll_counter+0x1>
     bdc:	80 33       	cpi	r24, 0x30	; 48
     bde:	95 47       	sbci	r25, 0x75	; 117
     be0:	6c f0       	brlt	.+26     	; 0xbfc <Control_Tick+0x2ba>
     be2:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <motion_detected>
     be6:	81 11       	cpse	r24, r1
     be8:	09 c0       	rjmp	.+18     	; 0xbfc <Control_Tick+0x2ba>
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <control_state>
     bf0:	10 92 8b 07 	sts	0x078B, r1	; 0x80078b <controll_counter+0x1>
     bf4:	10 92 8a 07 	sts	0x078A, r1	; 0x80078a <controll_counter>
     bf8:	10 92 a2 07 	sts	0x07A2, r1	; 0x8007a2 <systems_go>
     bfc:	08 95       	ret

00000bfe <ControlSecTask>:
     bfe:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <control_state>
     c02:	9f de       	rcall	.-706    	; 0x942 <Control_Tick>
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	a7 d4       	rcall	.+2382   	; 0x1558 <vTaskDelay>
     c0a:	fb cf       	rjmp	.-10     	; 0xc02 <ControlSecTask+0x4>

00000c0c <StartControlPulse>:
     c0c:	af 92       	push	r10
     c0e:	bf 92       	push	r11
     c10:	cf 92       	push	r12
     c12:	df 92       	push	r13
     c14:	ef 92       	push	r14
     c16:	ff 92       	push	r15
     c18:	0f 93       	push	r16
     c1a:	a1 2c       	mov	r10, r1
     c1c:	b1 2c       	mov	r11, r1
     c1e:	c1 2c       	mov	r12, r1
     c20:	d1 2c       	mov	r13, r1
     c22:	e1 2c       	mov	r14, r1
     c24:	f1 2c       	mov	r15, r1
     c26:	08 2f       	mov	r16, r24
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	45 e5       	ldi	r20, 0x55	; 85
     c2e:	50 e0       	ldi	r21, 0x00	; 0
     c30:	6a e8       	ldi	r22, 0x8A	; 138
     c32:	71 e0       	ldi	r23, 0x01	; 1
     c34:	8f ef       	ldi	r24, 0xFF	; 255
     c36:	95 e0       	ldi	r25, 0x05	; 5
     c38:	1c d2       	rcall	.+1080   	; 0x1072 <xTaskGenericCreate>
     c3a:	0f 91       	pop	r16
     c3c:	ff 90       	pop	r15
     c3e:	ef 90       	pop	r14
     c40:	df 90       	pop	r13
     c42:	cf 90       	pop	r12
     c44:	bf 90       	pop	r11
     c46:	af 90       	pop	r10
     c48:	08 95       	ret

00000c4a <Rec_Tick>:
}

void Rec_Tick(){
	//Actions
	switch(rec_state){
     c4a:	80 91 03 08 	lds	r24, 0x0803	; 0x800803 <rec_state>
     c4e:	81 30       	cpi	r24, 0x01	; 1
     c50:	61 f5       	brne	.+88     	; 0xcaa <Rec_Tick+0x60>
		break;


		case Receive_State:
		//ARM_DISARM = USART_Receive(0); //receive data
		 received_data = USART_Receive(0);
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	3a db       	rcall	.-2444   	; 0x2ca <USART_Receive>
     c56:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <received_data>
		 //delay_timing 0 = 5 sec, 1 = 10 sec, 2 = 15 sec
		 //bark_setting 0 = minor, 1 = major
		 //Peripheral setting 0 = don't use peripheral, 1 = use peripheral
		 
		 //set arm_disarm
		 if(GetBit(received_data,0)==1){ //system is armed
     c5a:	80 ff       	sbrs	r24, 0
     c5c:	04 c0       	rjmp	.+8      	; 0xc66 <Rec_Tick+0x1c>
			 ARM_DISARM = 1;
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <ARM_DISARM>
     c64:	20 c0       	rjmp	.+64     	; 0xca6 <Rec_Tick+0x5c>
			 //PORTB = PORTB | 0x40; //set pin B6 high
			 //PORTB = 0xFF;
			 
		 }
		 else{                           //system is disarmed
			 ARM_DISARM = 0;
     c66:	10 92 a5 07 	sts	0x07A5, r1	; 0x8007a5 <ARM_DISARM>
			 //PORTB = 0x00;
			 //PORTB = PORTB & 0xBF; //set pin B6 low
			 
			 //set delay timing
			 if(GetBit(received_data,1) == 1){ //delay 10 second
     c6a:	81 ff       	sbrs	r24, 1
     c6c:	04 c0       	rjmp	.+8      	; 0xc76 <Rec_Tick+0x2c>
				 delay_timing = 1;
     c6e:	21 e0       	ldi	r18, 0x01	; 1
     c70:	20 93 a4 07 	sts	0x07A4, r18	; 0x8007a4 <delay_timing>
     c74:	08 c0       	rjmp	.+16     	; 0xc86 <Rec_Tick+0x3c>
			 }
			 else if(GetBit(received_data,2) == 1){//delay 15 second
     c76:	82 ff       	sbrs	r24, 2
     c78:	04 c0       	rjmp	.+8      	; 0xc82 <Rec_Tick+0x38>
				 delay_timing = 2;
     c7a:	22 e0       	ldi	r18, 0x02	; 2
     c7c:	20 93 a4 07 	sts	0x07A4, r18	; 0x8007a4 <delay_timing>
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <Rec_Tick+0x3c>
			 }
			 else{                           //delay 5 second
				 delay_timing = 0;
     c82:	10 92 a4 07 	sts	0x07A4, r1	; 0x8007a4 <delay_timing>
			 }
			 
			 //set bark settings
			 if(GetBit(received_data,3)==1){ //Major Bark
     c86:	83 ff       	sbrs	r24, 3
     c88:	04 c0       	rjmp	.+8      	; 0xc92 <Rec_Tick+0x48>
				 bark_setting = 1;
     c8a:	21 e0       	ldi	r18, 0x01	; 1
     c8c:	20 93 a3 07 	sts	0x07A3, r18	; 0x8007a3 <bark_setting>
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <Rec_Tick+0x4c>
			 }
			 else{                           //Minor Bark
				 bark_setting = 0;
     c92:	10 92 a3 07 	sts	0x07A3, r1	; 0x8007a3 <bark_setting>
			 }
			 
			 //set peripheral setting
			 if(GetBit(received_data,4)==1){ //use peripheral
     c96:	84 ff       	sbrs	r24, 4
     c98:	04 c0       	rjmp	.+8      	; 0xca2 <Rec_Tick+0x58>
				 peripheral_setting = 1;
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <peripheral_setting>
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <Rec_Tick+0x5c>
			 }
			 else{                           //don't use peripheral
				 peripheral_setting = 0;
     ca2:	10 92 a1 07 	sts	0x07A1, r1	; 0x8007a1 <peripheral_setting>
			 }
		 }
		 
		  
	
		USART_Flush(0); //flush so flag reset
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	f3 da       	rcall	.-2586   	; 0x290 <USART_Flush>
		
		default:
		break;
	}
	//Transitions
	switch(rec_state){
     caa:	80 91 03 08 	lds	r24, 0x0803	; 0x800803 <rec_state>
     cae:	88 23       	and	r24, r24
     cb0:	19 f0       	breq	.+6      	; 0xcb8 <Rec_Tick+0x6e>
			}
		break;


		case Receive_State:
			rec_state = Rec_Wait; //go back 
     cb2:	10 92 03 08 	sts	0x0803, r1	; 0x800803 <rec_state>
     cb6:	08 95       	ret
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
     cb8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
		break;
	}
	//Transitions
	switch(rec_state){
		case Rec_Wait:
			if(USART_HasReceived(0)){
     cbc:	88 23       	and	r24, r24
     cbe:	1c f4       	brge	.+6      	; 0xcc6 <Rec_Tick+0x7c>
				rec_state = Receive_State; //if ready go to next state
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	80 93 03 08 	sts	0x0803, r24	; 0x800803 <rec_state>
     cc6:	08 95       	ret

00000cc8 <RecSecTask>:
//RECEIVE FSM

enum RECState {Rec_Wait, Receive_State } rec_state;

void REC_Init(){
	rec_state = Rec_Wait;
     cc8:	10 92 03 08 	sts	0x0803, r1	; 0x800803 <rec_state>
void RecSecTask()
{
	REC_Init();
	for(;;)
	{
		Rec_Tick();
     ccc:	be df       	rcall	.-132    	; 0xc4a <Rec_Tick>
		vTaskDelay(10);
     cce:	8a e0       	ldi	r24, 0x0A	; 10
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	42 d4       	rcall	.+2180   	; 0x1558 <vTaskDelay>
     cd4:	fb cf       	rjmp	.-10     	; 0xccc <RecSecTask+0x4>

00000cd6 <RecSecPulse>:
	}
}

void RecSecPulse(unsigned portBASE_TYPE Priority)
{
     cd6:	af 92       	push	r10
     cd8:	bf 92       	push	r11
     cda:	cf 92       	push	r12
     cdc:	df 92       	push	r13
     cde:	ef 92       	push	r14
     ce0:	ff 92       	push	r15
     ce2:	0f 93       	push	r16
	xTaskCreate(RecSecTask, (signed portCHAR *)"RecSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     ce4:	a1 2c       	mov	r10, r1
     ce6:	b1 2c       	mov	r11, r1
     ce8:	c1 2c       	mov	r12, r1
     cea:	d1 2c       	mov	r13, r1
     cec:	e1 2c       	mov	r14, r1
     cee:	f1 2c       	mov	r15, r1
     cf0:	08 2f       	mov	r16, r24
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	45 e5       	ldi	r20, 0x55	; 85
     cf8:	50 e0       	ldi	r21, 0x00	; 0
     cfa:	69 e9       	ldi	r22, 0x99	; 153
     cfc:	71 e0       	ldi	r23, 0x01	; 1
     cfe:	84 e6       	ldi	r24, 0x64	; 100
     d00:	96 e0       	ldi	r25, 0x06	; 6
     d02:	b7 d1       	rcall	.+878    	; 0x1072 <xTaskGenericCreate>
}
     d04:	0f 91       	pop	r16
     d06:	ff 90       	pop	r15
     d08:	ef 90       	pop	r14
     d0a:	df 90       	pop	r13
     d0c:	cf 90       	pop	r12
     d0e:	bf 90       	pop	r11
     d10:	af 90       	pop	r10
     d12:	08 95       	ret

00000d14 <main>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 
int main(void) 
{ 
   DDRA = 0x00; PORTA=0xFF; //set to input
     d14:	11 b8       	out	0x01, r1	; 1
     d16:	8f ef       	ldi	r24, 0xFF	; 255
     d18:	82 b9       	out	0x02, r24	; 2
   DDRB = 0xFF; PORTB = 0x00; //set to output
     d1a:	84 b9       	out	0x04, r24	; 4
     d1c:	15 b8       	out	0x05, r1	; 5
   DDRC = 0xFF; PORTC = 0x00;
     d1e:	87 b9       	out	0x07, r24	; 7
     d20:	18 b8       	out	0x08, r1	; 8
   PORTC = 0x0C; //set pins C2,C3 to high so audio wont play
     d22:	8c e0       	ldi	r24, 0x0C	; 12
     d24:	88 b9       	out	0x08, r24	; 8
   //DDRD = 0xFF; PORTD = 0x00; //used by USART 0
   initUSART(0);//Initialize USART 0
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	91 da       	rcall	.-2782   	; 0x24c <initUSART>
   //Start Tasks  
   RecSecPulse(1); 
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	d4 df       	rcall	.-88     	; 0xcd6 <RecSecPulse>
   StartMotionPulse(1);
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	e9 dd       	rcall	.-1070   	; 0x904 <StartMotionPulse>
   StartControlPulse(1);
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	6b df       	rcall	.-298    	; 0xc0c <StartControlPulse>
   
   MotorSecPulse(1);
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	69 db       	rcall	.-2350   	; 0x40c <MotorSecPulse>
   Start_stepper_controller_Pulse(1);
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	ce db       	rcall	.-2148   	; 0x4da <Start_stepper_controller_Pulse>
   Start_servo_controller_Pulse(1);
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	1f dd       	rcall	.-1474   	; 0x780 <Start_servo_controller_Pulse>
   SERVODRIVESecPulse(1);
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	24 dc       	rcall	.-1976   	; 0x58e <SERVODRIVESecPulse>
     d46:	81 e0       	ldi	r24, 0x01	; 1
   SERVOSecPulse(1);
     d48:	96 dc       	rcall	.-1748   	; 0x676 <SERVOSecPulse>
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	69 dd       	rcall	.-1326   	; 0x820 <StartAudioPulse>
   StartAudioPulse(1);
     d4e:	8d d2       	rcall	.+1306   	; 0x126a <vTaskStartScheduler>
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	90 e0       	ldi	r25, 0x00	; 0
    //RunSchedular 
   vTaskStartScheduler(); 
     d54:	08 95       	ret

00000d56 <pxPortInitialiseStack>:
     d56:	31 e1       	ldi	r19, 0x11	; 17
 
   return 0; 
}
     d58:	fc 01       	movw	r30, r24
     d5a:	30 83       	st	Z, r19
     d5c:	31 97       	sbiw	r30, 0x01	; 1
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     d5e:	22 e2       	ldi	r18, 0x22	; 34
     d60:	20 83       	st	Z, r18
     d62:	31 97       	sbiw	r30, 0x01	; 1
     d64:	a3 e3       	ldi	r26, 0x33	; 51
     d66:	a0 83       	st	Z, r26
     d68:	31 97       	sbiw	r30, 0x01	; 1
     d6a:	60 83       	st	Z, r22
     d6c:	31 97       	sbiw	r30, 0x01	; 1
     d6e:	70 83       	st	Z, r23
     d70:	31 97       	sbiw	r30, 0x01	; 1
     d72:	10 82       	st	Z, r1
     d74:	31 97       	sbiw	r30, 0x01	; 1
     d76:	60 e8       	ldi	r22, 0x80	; 128
     d78:	60 83       	st	Z, r22
     d7a:	31 97       	sbiw	r30, 0x01	; 1
     d7c:	10 82       	st	Z, r1
     d7e:	31 97       	sbiw	r30, 0x01	; 1
     d80:	62 e0       	ldi	r22, 0x02	; 2
     d82:	60 83       	st	Z, r22
     d84:	31 97       	sbiw	r30, 0x01	; 1
     d86:	63 e0       	ldi	r22, 0x03	; 3
     d88:	60 83       	st	Z, r22
     d8a:	31 97       	sbiw	r30, 0x01	; 1
     d8c:	64 e0       	ldi	r22, 0x04	; 4
     d8e:	60 83       	st	Z, r22
     d90:	31 97       	sbiw	r30, 0x01	; 1
     d92:	65 e0       	ldi	r22, 0x05	; 5
     d94:	60 83       	st	Z, r22
     d96:	31 97       	sbiw	r30, 0x01	; 1
     d98:	66 e0       	ldi	r22, 0x06	; 6
     d9a:	60 83       	st	Z, r22
     d9c:	31 97       	sbiw	r30, 0x01	; 1
     d9e:	67 e0       	ldi	r22, 0x07	; 7
     da0:	60 83       	st	Z, r22
     da2:	31 97       	sbiw	r30, 0x01	; 1
     da4:	68 e0       	ldi	r22, 0x08	; 8
     da6:	60 83       	st	Z, r22
     da8:	31 97       	sbiw	r30, 0x01	; 1
     daa:	69 e0       	ldi	r22, 0x09	; 9
     dac:	60 83       	st	Z, r22
     dae:	31 97       	sbiw	r30, 0x01	; 1
     db0:	60 e1       	ldi	r22, 0x10	; 16
     db2:	60 83       	st	Z, r22
     db4:	31 97       	sbiw	r30, 0x01	; 1
     db6:	30 83       	st	Z, r19
     db8:	31 97       	sbiw	r30, 0x01	; 1
     dba:	32 e1       	ldi	r19, 0x12	; 18
     dbc:	30 83       	st	Z, r19
     dbe:	31 97       	sbiw	r30, 0x01	; 1
     dc0:	33 e1       	ldi	r19, 0x13	; 19
     dc2:	30 83       	st	Z, r19
     dc4:	31 97       	sbiw	r30, 0x01	; 1
     dc6:	34 e1       	ldi	r19, 0x14	; 20
     dc8:	30 83       	st	Z, r19
     dca:	31 97       	sbiw	r30, 0x01	; 1
     dcc:	35 e1       	ldi	r19, 0x15	; 21
     dce:	30 83       	st	Z, r19
     dd0:	31 97       	sbiw	r30, 0x01	; 1
     dd2:	36 e1       	ldi	r19, 0x16	; 22
     dd4:	30 83       	st	Z, r19
     dd6:	31 97       	sbiw	r30, 0x01	; 1
     dd8:	37 e1       	ldi	r19, 0x17	; 23
     dda:	30 83       	st	Z, r19
     ddc:	31 97       	sbiw	r30, 0x01	; 1
     dde:	38 e1       	ldi	r19, 0x18	; 24
     de0:	30 83       	st	Z, r19
     de2:	31 97       	sbiw	r30, 0x01	; 1
     de4:	39 e1       	ldi	r19, 0x19	; 25
     de6:	30 83       	st	Z, r19
     de8:	31 97       	sbiw	r30, 0x01	; 1
     dea:	30 e2       	ldi	r19, 0x20	; 32
     dec:	30 83       	st	Z, r19
     dee:	31 97       	sbiw	r30, 0x01	; 1
     df0:	31 e2       	ldi	r19, 0x21	; 33
     df2:	30 83       	st	Z, r19
     df4:	31 97       	sbiw	r30, 0x01	; 1
     df6:	20 83       	st	Z, r18
     df8:	31 97       	sbiw	r30, 0x01	; 1
     dfa:	23 e2       	ldi	r18, 0x23	; 35
     dfc:	20 83       	st	Z, r18
     dfe:	31 97       	sbiw	r30, 0x01	; 1
     e00:	40 83       	st	Z, r20
     e02:	31 97       	sbiw	r30, 0x01	; 1
     e04:	50 83       	st	Z, r21
     e06:	31 97       	sbiw	r30, 0x01	; 1
     e08:	26 e2       	ldi	r18, 0x26	; 38
     e0a:	20 83       	st	Z, r18
     e0c:	31 97       	sbiw	r30, 0x01	; 1
     e0e:	27 e2       	ldi	r18, 0x27	; 39
     e10:	20 83       	st	Z, r18
     e12:	31 97       	sbiw	r30, 0x01	; 1
     e14:	28 e2       	ldi	r18, 0x28	; 40
     e16:	20 83       	st	Z, r18
     e18:	31 97       	sbiw	r30, 0x01	; 1
     e1a:	29 e2       	ldi	r18, 0x29	; 41
     e1c:	20 83       	st	Z, r18
     e1e:	31 97       	sbiw	r30, 0x01	; 1
     e20:	20 e3       	ldi	r18, 0x30	; 48
     e22:	20 83       	st	Z, r18
     e24:	31 97       	sbiw	r30, 0x01	; 1
     e26:	21 e3       	ldi	r18, 0x31	; 49
     e28:	20 83       	st	Z, r18
     e2a:	86 97       	sbiw	r24, 0x26	; 38
     e2c:	08 95       	ret

00000e2e <xPortStartScheduler>:
     e2e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     e32:	8c e7       	ldi	r24, 0x7C	; 124
     e34:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     e38:	8b e0       	ldi	r24, 0x0B	; 11
     e3a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     e3e:	ef e6       	ldi	r30, 0x6F	; 111
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	82 60       	ori	r24, 0x02	; 2
     e46:	80 83       	st	Z, r24
     e48:	a0 91 fe 07 	lds	r26, 0x07FE	; 0x8007fe <pxCurrentTCB>
     e4c:	b0 91 ff 07 	lds	r27, 0x07FF	; 0x8007ff <pxCurrentTCB+0x1>
     e50:	cd 91       	ld	r28, X+
     e52:	cd bf       	out	0x3d, r28	; 61
     e54:	dd 91       	ld	r29, X+
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	ff 91       	pop	r31
     e5a:	ef 91       	pop	r30
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	bf 91       	pop	r27
     e62:	af 91       	pop	r26
     e64:	9f 91       	pop	r25
     e66:	8f 91       	pop	r24
     e68:	7f 91       	pop	r23
     e6a:	6f 91       	pop	r22
     e6c:	5f 91       	pop	r21
     e6e:	4f 91       	pop	r20
     e70:	3f 91       	pop	r19
     e72:	2f 91       	pop	r18
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	ff 90       	pop	r15
     e7a:	ef 90       	pop	r14
     e7c:	df 90       	pop	r13
     e7e:	cf 90       	pop	r12
     e80:	bf 90       	pop	r11
     e82:	af 90       	pop	r10
     e84:	9f 90       	pop	r9
     e86:	8f 90       	pop	r8
     e88:	7f 90       	pop	r7
     e8a:	6f 90       	pop	r6
     e8c:	5f 90       	pop	r5
     e8e:	4f 90       	pop	r4
     e90:	3f 90       	pop	r3
     e92:	2f 90       	pop	r2
     e94:	1f 90       	pop	r1
     e96:	0f 90       	pop	r0
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	0f 90       	pop	r0
     e9c:	08 95       	ret
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	08 95       	ret

00000ea2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     ea2:	0f 92       	push	r0
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	f8 94       	cli
     ea8:	0f 92       	push	r0
     eaa:	1f 92       	push	r1
     eac:	11 24       	eor	r1, r1
     eae:	2f 92       	push	r2
     eb0:	3f 92       	push	r3
     eb2:	4f 92       	push	r4
     eb4:	5f 92       	push	r5
     eb6:	6f 92       	push	r6
     eb8:	7f 92       	push	r7
     eba:	8f 92       	push	r8
     ebc:	9f 92       	push	r9
     ebe:	af 92       	push	r10
     ec0:	bf 92       	push	r11
     ec2:	cf 92       	push	r12
     ec4:	df 92       	push	r13
     ec6:	ef 92       	push	r14
     ec8:	ff 92       	push	r15
     eca:	0f 93       	push	r16
     ecc:	1f 93       	push	r17
     ece:	2f 93       	push	r18
     ed0:	3f 93       	push	r19
     ed2:	4f 93       	push	r20
     ed4:	5f 93       	push	r21
     ed6:	6f 93       	push	r22
     ed8:	7f 93       	push	r23
     eda:	8f 93       	push	r24
     edc:	9f 93       	push	r25
     ede:	af 93       	push	r26
     ee0:	bf 93       	push	r27
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	ef 93       	push	r30
     ee8:	ff 93       	push	r31
     eea:	a0 91 fe 07 	lds	r26, 0x07FE	; 0x8007fe <pxCurrentTCB>
     eee:	b0 91 ff 07 	lds	r27, 0x07FF	; 0x8007ff <pxCurrentTCB+0x1>
     ef2:	0d b6       	in	r0, 0x3d	; 61
     ef4:	0d 92       	st	X+, r0
     ef6:	0e b6       	in	r0, 0x3e	; 62
     ef8:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     efa:	83 d3       	rcall	.+1798   	; 0x1602 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     efc:	a0 91 fe 07 	lds	r26, 0x07FE	; 0x8007fe <pxCurrentTCB>
     f00:	b0 91 ff 07 	lds	r27, 0x07FF	; 0x8007ff <pxCurrentTCB+0x1>
     f04:	cd 91       	ld	r28, X+
     f06:	cd bf       	out	0x3d, r28	; 61
     f08:	dd 91       	ld	r29, X+
     f0a:	de bf       	out	0x3e, r29	; 62
     f0c:	ff 91       	pop	r31
     f0e:	ef 91       	pop	r30
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	bf 91       	pop	r27
     f16:	af 91       	pop	r26
     f18:	9f 91       	pop	r25
     f1a:	8f 91       	pop	r24
     f1c:	7f 91       	pop	r23
     f1e:	6f 91       	pop	r22
     f20:	5f 91       	pop	r21
     f22:	4f 91       	pop	r20
     f24:	3f 91       	pop	r19
     f26:	2f 91       	pop	r18
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	ff 90       	pop	r15
     f2e:	ef 90       	pop	r14
     f30:	df 90       	pop	r13
     f32:	cf 90       	pop	r12
     f34:	bf 90       	pop	r11
     f36:	af 90       	pop	r10
     f38:	9f 90       	pop	r9
     f3a:	8f 90       	pop	r8
     f3c:	7f 90       	pop	r7
     f3e:	6f 90       	pop	r6
     f40:	5f 90       	pop	r5
     f42:	4f 90       	pop	r4
     f44:	3f 90       	pop	r3
     f46:	2f 90       	pop	r2
     f48:	1f 90       	pop	r1
     f4a:	0f 90       	pop	r0
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	0f 90       	pop	r0

	asm volatile ( "ret" );
     f50:	08 95       	ret

00000f52 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     f52:	0f 92       	push	r0
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	0f 92       	push	r0
     f5a:	1f 92       	push	r1
     f5c:	11 24       	eor	r1, r1
     f5e:	2f 92       	push	r2
     f60:	3f 92       	push	r3
     f62:	4f 92       	push	r4
     f64:	5f 92       	push	r5
     f66:	6f 92       	push	r6
     f68:	7f 92       	push	r7
     f6a:	8f 92       	push	r8
     f6c:	9f 92       	push	r9
     f6e:	af 92       	push	r10
     f70:	bf 92       	push	r11
     f72:	cf 92       	push	r12
     f74:	df 92       	push	r13
     f76:	ef 92       	push	r14
     f78:	ff 92       	push	r15
     f7a:	0f 93       	push	r16
     f7c:	1f 93       	push	r17
     f7e:	2f 93       	push	r18
     f80:	3f 93       	push	r19
     f82:	4f 93       	push	r20
     f84:	5f 93       	push	r21
     f86:	6f 93       	push	r22
     f88:	7f 93       	push	r23
     f8a:	8f 93       	push	r24
     f8c:	9f 93       	push	r25
     f8e:	af 93       	push	r26
     f90:	bf 93       	push	r27
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	ef 93       	push	r30
     f98:	ff 93       	push	r31
     f9a:	a0 91 fe 07 	lds	r26, 0x07FE	; 0x8007fe <pxCurrentTCB>
     f9e:	b0 91 ff 07 	lds	r27, 0x07FF	; 0x8007ff <pxCurrentTCB+0x1>
     fa2:	0d b6       	in	r0, 0x3d	; 61
     fa4:	0d 92       	st	X+, r0
     fa6:	0e b6       	in	r0, 0x3e	; 62
     fa8:	0d 92       	st	X+, r0
	vTaskIncrementTick();
     faa:	8e d1       	rcall	.+796    	; 0x12c8 <vTaskIncrementTick>
	vTaskSwitchContext();
     fac:	2a d3       	rcall	.+1620   	; 0x1602 <vTaskSwitchContext>
     fae:	a0 91 fe 07 	lds	r26, 0x07FE	; 0x8007fe <pxCurrentTCB>
	portRESTORE_CONTEXT();
     fb2:	b0 91 ff 07 	lds	r27, 0x07FF	; 0x8007ff <pxCurrentTCB+0x1>
     fb6:	cd 91       	ld	r28, X+
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	dd 91       	ld	r29, X+
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	ff 91       	pop	r31
     fc0:	ef 91       	pop	r30
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	bf 91       	pop	r27
     fc8:	af 91       	pop	r26
     fca:	9f 91       	pop	r25
     fcc:	8f 91       	pop	r24
     fce:	7f 91       	pop	r23
     fd0:	6f 91       	pop	r22
     fd2:	5f 91       	pop	r21
     fd4:	4f 91       	pop	r20
     fd6:	3f 91       	pop	r19
     fd8:	2f 91       	pop	r18
     fda:	1f 91       	pop	r17
     fdc:	0f 91       	pop	r16
     fde:	ff 90       	pop	r15
     fe0:	ef 90       	pop	r14
     fe2:	df 90       	pop	r13
     fe4:	cf 90       	pop	r12
     fe6:	bf 90       	pop	r11
     fe8:	af 90       	pop	r10
     fea:	9f 90       	pop	r9
     fec:	8f 90       	pop	r8
     fee:	7f 90       	pop	r7
     ff0:	6f 90       	pop	r6
     ff2:	5f 90       	pop	r5
     ff4:	4f 90       	pop	r4
     ff6:	3f 90       	pop	r3
     ff8:	2f 90       	pop	r2
     ffa:	1f 90       	pop	r1
     ffc:	0f 90       	pop	r0
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	0f 90       	pop	r0
    1002:	08 95       	ret

00001004 <__vector_13>:

	asm volatile ( "ret" );
    1004:	a6 df       	rcall	.-180    	; 0xf52 <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
    1006:	18 95       	reti

00001008 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	ec 01       	movw	r28, r24
    100e:	e0 91 fe 07 	lds	r30, 0x07FE	; 0x8007fe <pxCurrentTCB>
    1012:	f0 91 ff 07 	lds	r31, 0x07FF	; 0x8007ff <pxCurrentTCB+0x1>
    1016:	93 83       	std	Z+3, r25	; 0x03
    1018:	82 83       	std	Z+2, r24	; 0x02
    101a:	80 91 ae 07 	lds	r24, 0x07AE	; 0x8007ae <xTickCount>
    101e:	90 91 af 07 	lds	r25, 0x07AF	; 0x8007af <xTickCount+0x1>
    1022:	c8 17       	cp	r28, r24
    1024:	d9 07       	cpc	r29, r25
    1026:	60 f4       	brcc	.+24     	; 0x1040 <prvAddCurrentTaskToDelayedList+0x38>
    1028:	60 91 fe 07 	lds	r22, 0x07FE	; 0x8007fe <pxCurrentTCB>
    102c:	70 91 ff 07 	lds	r23, 0x07FF	; 0x8007ff <pxCurrentTCB+0x1>
    1030:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <pxOverflowDelayedTaskList>
    1034:	90 91 c5 07 	lds	r25, 0x07C5	; 0x8007c5 <pxOverflowDelayedTaskList+0x1>
    1038:	6e 5f       	subi	r22, 0xFE	; 254
    103a:	7f 4f       	sbci	r23, 0xFF	; 255
    103c:	a6 d8       	rcall	.-3764   	; 0x18a <vListInsert>
    103e:	16 c0       	rjmp	.+44     	; 0x106c <prvAddCurrentTaskToDelayedList+0x64>
    1040:	60 91 fe 07 	lds	r22, 0x07FE	; 0x8007fe <pxCurrentTCB>
    1044:	70 91 ff 07 	lds	r23, 0x07FF	; 0x8007ff <pxCurrentTCB+0x1>
    1048:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxDelayedTaskList>
    104c:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxDelayedTaskList+0x1>
    1050:	6e 5f       	subi	r22, 0xFE	; 254
    1052:	7f 4f       	sbci	r23, 0xFF	; 255
    1054:	9a d8       	rcall	.-3788   	; 0x18a <vListInsert>
    1056:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <xNextTaskUnblockTime>
    105a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <xNextTaskUnblockTime+0x1>
    105e:	c8 17       	cp	r28, r24
    1060:	d9 07       	cpc	r29, r25
    1062:	20 f4       	brcc	.+8      	; 0x106c <prvAddCurrentTaskToDelayedList+0x64>
    1064:	d0 93 0f 01 	sts	0x010F, r29	; 0x80010f <xNextTaskUnblockTime+0x1>
    1068:	c0 93 0e 01 	sts	0x010E, r28	; 0x80010e <xNextTaskUnblockTime>
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	08 95       	ret

00001072 <xTaskGenericCreate>:
    1072:	4f 92       	push	r4
    1074:	5f 92       	push	r5
    1076:	6f 92       	push	r6
    1078:	7f 92       	push	r7
    107a:	8f 92       	push	r8
    107c:	9f 92       	push	r9
    107e:	af 92       	push	r10
    1080:	bf 92       	push	r11
    1082:	cf 92       	push	r12
    1084:	df 92       	push	r13
    1086:	ef 92       	push	r14
    1088:	ff 92       	push	r15
    108a:	0f 93       	push	r16
    108c:	1f 93       	push	r17
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	5c 01       	movw	r10, r24
    1094:	4b 01       	movw	r8, r22
    1096:	3a 01       	movw	r6, r20
    1098:	29 01       	movw	r4, r18
    109a:	81 e2       	ldi	r24, 0x21	; 33
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	15 d8       	rcall	.-4054   	; 0xca <pvPortMalloc>
    10a0:	ec 01       	movw	r28, r24
    10a2:	89 2b       	or	r24, r25
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <xTaskGenericCreate+0x36>
    10a6:	cf c0       	rjmp	.+414    	; 0x1246 <xTaskGenericCreate+0x1d4>
    10a8:	c1 14       	cp	r12, r1
    10aa:	d1 04       	cpc	r13, r1
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <xTaskGenericCreate+0x3e>
    10ae:	c7 c0       	rjmp	.+398    	; 0x123e <xTaskGenericCreate+0x1cc>
    10b0:	c3 01       	movw	r24, r6
    10b2:	0b d8       	rcall	.-4074   	; 0xca <pvPortMalloc>
    10b4:	98 8f       	std	Y+24, r25	; 0x18
    10b6:	8f 8b       	std	Y+23, r24	; 0x17
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	19 f4       	brne	.+6      	; 0x10c2 <xTaskGenericCreate+0x50>
    10bc:	ce 01       	movw	r24, r28
    10be:	2b d8       	rcall	.-4010   	; 0x116 <vPortFree>
    10c0:	c2 c0       	rjmp	.+388    	; 0x1246 <xTaskGenericCreate+0x1d4>
    10c2:	a3 01       	movw	r20, r6
    10c4:	65 ea       	ldi	r22, 0xA5	; 165
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	84 d3       	rcall	.+1800   	; 0x17d2 <memset>
    10ca:	93 01       	movw	r18, r6
    10cc:	21 50       	subi	r18, 0x01	; 1
    10ce:	31 09       	sbc	r19, r1
    10d0:	8f 89       	ldd	r24, Y+23	; 0x17
    10d2:	98 8d       	ldd	r25, Y+24	; 0x18
    10d4:	3c 01       	movw	r6, r24
    10d6:	62 0e       	add	r6, r18
    10d8:	73 1e       	adc	r7, r19
    10da:	48 e0       	ldi	r20, 0x08	; 8
    10dc:	50 e0       	ldi	r21, 0x00	; 0
    10de:	b4 01       	movw	r22, r8
    10e0:	ce 01       	movw	r24, r28
    10e2:	49 96       	adiw	r24, 0x19	; 25
    10e4:	7d d3       	rcall	.+1786   	; 0x17e0 <strncpy>
    10e6:	18 a2       	std	Y+32, r1	; 0x20
    10e8:	10 2f       	mov	r17, r16
    10ea:	04 30       	cpi	r16, 0x04	; 4
    10ec:	08 f0       	brcs	.+2      	; 0x10f0 <xTaskGenericCreate+0x7e>
    10ee:	13 e0       	ldi	r17, 0x03	; 3
    10f0:	1e 8b       	std	Y+22, r17	; 0x16
    10f2:	6e 01       	movw	r12, r28
    10f4:	82 e0       	ldi	r24, 0x02	; 2
    10f6:	c8 0e       	add	r12, r24
    10f8:	d1 1c       	adc	r13, r1
    10fa:	c6 01       	movw	r24, r12
    10fc:	1b d8       	rcall	.-4042   	; 0x134 <vListInitialiseItem>
    10fe:	ce 01       	movw	r24, r28
    1100:	0c 96       	adiw	r24, 0x0c	; 12
    1102:	18 d8       	rcall	.-4048   	; 0x134 <vListInitialiseItem>
    1104:	d9 87       	std	Y+9, r29	; 0x09
    1106:	c8 87       	std	Y+8, r28	; 0x08
    1108:	84 e0       	ldi	r24, 0x04	; 4
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	81 1b       	sub	r24, r17
    110e:	91 09       	sbc	r25, r1
    1110:	9d 87       	std	Y+13, r25	; 0x0d
    1112:	8c 87       	std	Y+12, r24	; 0x0c
    1114:	db 8b       	std	Y+19, r29	; 0x13
    1116:	ca 8b       	std	Y+18, r28	; 0x12
    1118:	a2 01       	movw	r20, r4
    111a:	b5 01       	movw	r22, r10
    111c:	c3 01       	movw	r24, r6
    111e:	1b de       	rcall	.-970    	; 0xd56 <pxPortInitialiseStack>
    1120:	99 83       	std	Y+1, r25	; 0x01
    1122:	88 83       	st	Y, r24
    1124:	e1 14       	cp	r14, r1
    1126:	f1 04       	cpc	r15, r1
    1128:	19 f0       	breq	.+6      	; 0x1130 <xTaskGenericCreate+0xbe>
    112a:	f7 01       	movw	r30, r14
    112c:	d1 83       	std	Z+1, r29	; 0x01
    112e:	c0 83       	st	Z, r28
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	0f 92       	push	r0
    1136:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <uxCurrentNumberOfTasks>
    113a:	8f 5f       	subi	r24, 0xFF	; 255
    113c:	80 93 b0 07 	sts	0x07B0, r24	; 0x8007b0 <uxCurrentNumberOfTasks>
    1140:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <pxCurrentTCB>
    1144:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <pxCurrentTCB+0x1>
    1148:	89 2b       	or	r24, r25
    114a:	a9 f5       	brne	.+106    	; 0x11b6 <xTaskGenericCreate+0x144>
    114c:	d0 93 ff 07 	sts	0x07FF, r29	; 0x8007ff <pxCurrentTCB+0x1>
    1150:	c0 93 fe 07 	sts	0x07FE, r28	; 0x8007fe <pxCurrentTCB>
    1154:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <uxCurrentNumberOfTasks>
    1158:	81 30       	cpi	r24, 0x01	; 1
    115a:	e1 f5       	brne	.+120    	; 0x11d4 <xTaskGenericCreate+0x162>
    115c:	8a ed       	ldi	r24, 0xDA	; 218
    115e:	97 e0       	ldi	r25, 0x07	; 7
    1160:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    1164:	83 ee       	ldi	r24, 0xE3	; 227
    1166:	97 e0       	ldi	r25, 0x07	; 7
    1168:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    116c:	8c ee       	ldi	r24, 0xEC	; 236
    116e:	97 e0       	ldi	r25, 0x07	; 7
    1170:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    1174:	85 ef       	ldi	r24, 0xF5	; 245
    1176:	97 e0       	ldi	r25, 0x07	; 7
    1178:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    117c:	81 ed       	ldi	r24, 0xD1	; 209
    117e:	97 e0       	ldi	r25, 0x07	; 7
    1180:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    1184:	88 ec       	ldi	r24, 0xC8	; 200
    1186:	97 e0       	ldi	r25, 0x07	; 7
    1188:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    118c:	8b eb       	ldi	r24, 0xBB	; 187
    118e:	97 e0       	ldi	r25, 0x07	; 7
    1190:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    1194:	82 eb       	ldi	r24, 0xB2	; 178
    1196:	97 e0       	ldi	r25, 0x07	; 7
    1198:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    119c:	81 ed       	ldi	r24, 0xD1	; 209
    119e:	97 e0       	ldi	r25, 0x07	; 7
    11a0:	90 93 c7 07 	sts	0x07C7, r25	; 0x8007c7 <pxDelayedTaskList+0x1>
    11a4:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <pxDelayedTaskList>
    11a8:	88 ec       	ldi	r24, 0xC8	; 200
    11aa:	97 e0       	ldi	r25, 0x07	; 7
    11ac:	90 93 c5 07 	sts	0x07C5, r25	; 0x8007c5 <pxOverflowDelayedTaskList+0x1>
    11b0:	80 93 c4 07 	sts	0x07C4, r24	; 0x8007c4 <pxOverflowDelayedTaskList>
    11b4:	0f c0       	rjmp	.+30     	; 0x11d4 <xTaskGenericCreate+0x162>
    11b6:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <xSchedulerRunning>
    11ba:	81 11       	cpse	r24, r1
    11bc:	0b c0       	rjmp	.+22     	; 0x11d4 <xTaskGenericCreate+0x162>
    11be:	e0 91 fe 07 	lds	r30, 0x07FE	; 0x8007fe <pxCurrentTCB>
    11c2:	f0 91 ff 07 	lds	r31, 0x07FF	; 0x8007ff <pxCurrentTCB+0x1>
    11c6:	86 89       	ldd	r24, Z+22	; 0x16
    11c8:	08 17       	cp	r16, r24
    11ca:	20 f0       	brcs	.+8      	; 0x11d4 <xTaskGenericCreate+0x162>
    11cc:	d0 93 ff 07 	sts	0x07FF, r29	; 0x8007ff <pxCurrentTCB+0x1>
    11d0:	c0 93 fe 07 	sts	0x07FE, r28	; 0x8007fe <pxCurrentTCB>
    11d4:	8e 89       	ldd	r24, Y+22	; 0x16
    11d6:	90 91 ad 07 	lds	r25, 0x07AD	; 0x8007ad <uxTopUsedPriority>
    11da:	98 17       	cp	r25, r24
    11dc:	10 f4       	brcc	.+4      	; 0x11e2 <xTaskGenericCreate+0x170>
    11de:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <uxTopUsedPriority>
    11e2:	90 91 a6 07 	lds	r25, 0x07A6	; 0x8007a6 <uxTaskNumber>
    11e6:	9f 5f       	subi	r25, 0xFF	; 255
    11e8:	90 93 a6 07 	sts	0x07A6, r25	; 0x8007a6 <uxTaskNumber>
    11ec:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <uxTopReadyPriority>
    11f0:	98 17       	cp	r25, r24
    11f2:	10 f4       	brcc	.+4      	; 0x11f8 <xTaskGenericCreate+0x186>
    11f4:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <uxTopReadyPriority>
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	9c 01       	movw	r18, r24
    11fc:	22 0f       	add	r18, r18
    11fe:	33 1f       	adc	r19, r19
    1200:	22 0f       	add	r18, r18
    1202:	33 1f       	adc	r19, r19
    1204:	22 0f       	add	r18, r18
    1206:	33 1f       	adc	r19, r19
    1208:	82 0f       	add	r24, r18
    120a:	93 1f       	adc	r25, r19
    120c:	b6 01       	movw	r22, r12
    120e:	86 52       	subi	r24, 0x26	; 38
    1210:	98 4f       	sbci	r25, 0xF8	; 248
    1212:	0e 94 9e 00 	call	0x13c	; 0x13c <vListInsertEnd>
    1216:	0f 90       	pop	r0
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <xSchedulerRunning>
    121e:	88 23       	and	r24, r24
    1220:	51 f0       	breq	.+20     	; 0x1236 <xTaskGenericCreate+0x1c4>
    1222:	e0 91 fe 07 	lds	r30, 0x07FE	; 0x8007fe <pxCurrentTCB>
    1226:	f0 91 ff 07 	lds	r31, 0x07FF	; 0x8007ff <pxCurrentTCB+0x1>
    122a:	86 89       	ldd	r24, Z+22	; 0x16
    122c:	80 17       	cp	r24, r16
    122e:	28 f4       	brcc	.+10     	; 0x123a <xTaskGenericCreate+0x1c8>
    1230:	38 de       	rcall	.-912    	; 0xea2 <vPortYield>
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	09 c0       	rjmp	.+18     	; 0x1248 <xTaskGenericCreate+0x1d6>
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	07 c0       	rjmp	.+14     	; 0x1248 <xTaskGenericCreate+0x1d6>
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	05 c0       	rjmp	.+10     	; 0x1248 <xTaskGenericCreate+0x1d6>
    123e:	d8 8e       	std	Y+24, r13	; 0x18
    1240:	cf 8a       	std	Y+23, r12	; 0x17
    1242:	c6 01       	movw	r24, r12
    1244:	3e cf       	rjmp	.-388    	; 0x10c2 <xTaskGenericCreate+0x50>
    1246:	8f ef       	ldi	r24, 0xFF	; 255
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	1f 91       	pop	r17
    124e:	0f 91       	pop	r16
    1250:	ff 90       	pop	r15
    1252:	ef 90       	pop	r14
    1254:	df 90       	pop	r13
    1256:	cf 90       	pop	r12
    1258:	bf 90       	pop	r11
    125a:	af 90       	pop	r10
    125c:	9f 90       	pop	r9
    125e:	8f 90       	pop	r8
    1260:	7f 90       	pop	r7
    1262:	6f 90       	pop	r6
    1264:	5f 90       	pop	r5
    1266:	4f 90       	pop	r4
    1268:	08 95       	ret

0000126a <vTaskStartScheduler>:
    126a:	af 92       	push	r10
    126c:	bf 92       	push	r11
    126e:	cf 92       	push	r12
    1270:	df 92       	push	r13
    1272:	ef 92       	push	r14
    1274:	ff 92       	push	r15
    1276:	0f 93       	push	r16
    1278:	a1 2c       	mov	r10, r1
    127a:	b1 2c       	mov	r11, r1
    127c:	c1 2c       	mov	r12, r1
    127e:	d1 2c       	mov	r13, r1
    1280:	e1 2c       	mov	r14, r1
    1282:	f1 2c       	mov	r15, r1
    1284:	00 e0       	ldi	r16, 0x00	; 0
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	45 e5       	ldi	r20, 0x55	; 85
    128c:	50 e0       	ldi	r21, 0x00	; 0
    128e:	64 ea       	ldi	r22, 0xA4	; 164
    1290:	71 e0       	ldi	r23, 0x01	; 1
    1292:	88 ec       	ldi	r24, 0xC8	; 200
    1294:	9a e0       	ldi	r25, 0x0A	; 10
    1296:	ed de       	rcall	.-550    	; 0x1072 <xTaskGenericCreate>
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	41 f4       	brne	.+16     	; 0x12ac <vTaskStartScheduler+0x42>
    129c:	f8 94       	cli
    129e:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <xSchedulerRunning>
    12a2:	10 92 af 07 	sts	0x07AF, r1	; 0x8007af <xTickCount+0x1>
    12a6:	10 92 ae 07 	sts	0x07AE, r1	; 0x8007ae <xTickCount>
    12aa:	c1 dd       	rcall	.-1150   	; 0xe2e <xPortStartScheduler>
    12ac:	0f 91       	pop	r16
    12ae:	ff 90       	pop	r15
    12b0:	ef 90       	pop	r14
    12b2:	df 90       	pop	r13
    12b4:	cf 90       	pop	r12
    12b6:	bf 90       	pop	r11
    12b8:	af 90       	pop	r10
    12ba:	08 95       	ret

000012bc <vTaskSuspendAll>:
    12bc:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <uxSchedulerSuspended>
    12c0:	8f 5f       	subi	r24, 0xFF	; 255
    12c2:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <uxSchedulerSuspended>
    12c6:	08 95       	ret

000012c8 <vTaskIncrementTick>:
    12c8:	0f 93       	push	r16
    12ca:	1f 93       	push	r17
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <uxSchedulerSuspended>
    12d4:	81 11       	cpse	r24, r1
    12d6:	b2 c0       	rjmp	.+356    	; 0x143c <vTaskIncrementTick+0x174>
    12d8:	80 91 ae 07 	lds	r24, 0x07AE	; 0x8007ae <xTickCount>
    12dc:	90 91 af 07 	lds	r25, 0x07AF	; 0x8007af <xTickCount+0x1>
    12e0:	01 96       	adiw	r24, 0x01	; 1
    12e2:	90 93 af 07 	sts	0x07AF, r25	; 0x8007af <xTickCount+0x1>
    12e6:	80 93 ae 07 	sts	0x07AE, r24	; 0x8007ae <xTickCount>
    12ea:	80 91 ae 07 	lds	r24, 0x07AE	; 0x8007ae <xTickCount>
    12ee:	90 91 af 07 	lds	r25, 0x07AF	; 0x8007af <xTickCount+0x1>
    12f2:	89 2b       	or	r24, r25
    12f4:	99 f5       	brne	.+102    	; 0x135c <vTaskIncrementTick+0x94>
    12f6:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxDelayedTaskList>
    12fa:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxDelayedTaskList+0x1>
    12fe:	20 91 c4 07 	lds	r18, 0x07C4	; 0x8007c4 <pxOverflowDelayedTaskList>
    1302:	30 91 c5 07 	lds	r19, 0x07C5	; 0x8007c5 <pxOverflowDelayedTaskList+0x1>
    1306:	30 93 c7 07 	sts	0x07C7, r19	; 0x8007c7 <pxDelayedTaskList+0x1>
    130a:	20 93 c6 07 	sts	0x07C6, r18	; 0x8007c6 <pxDelayedTaskList>
    130e:	90 93 c5 07 	sts	0x07C5, r25	; 0x8007c5 <pxOverflowDelayedTaskList+0x1>
    1312:	80 93 c4 07 	sts	0x07C4, r24	; 0x8007c4 <pxOverflowDelayedTaskList>
    1316:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <xNumOfOverflows>
    131a:	8f 5f       	subi	r24, 0xFF	; 255
    131c:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <xNumOfOverflows>
    1320:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <pxDelayedTaskList>
    1324:	f0 91 c7 07 	lds	r31, 0x07C7	; 0x8007c7 <pxDelayedTaskList+0x1>
    1328:	80 81       	ld	r24, Z
    132a:	81 11       	cpse	r24, r1
    132c:	07 c0       	rjmp	.+14     	; 0x133c <vTaskIncrementTick+0x74>
    132e:	8f ef       	ldi	r24, 0xFF	; 255
    1330:	9f ef       	ldi	r25, 0xFF	; 255
    1332:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <xNextTaskUnblockTime+0x1>
    1336:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <xNextTaskUnblockTime>
    133a:	10 c0       	rjmp	.+32     	; 0x135c <vTaskIncrementTick+0x94>
    133c:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <pxDelayedTaskList>
    1340:	f0 91 c7 07 	lds	r31, 0x07C7	; 0x8007c7 <pxDelayedTaskList+0x1>
    1344:	05 80       	ldd	r0, Z+5	; 0x05
    1346:	f6 81       	ldd	r31, Z+6	; 0x06
    1348:	e0 2d       	mov	r30, r0
    134a:	06 80       	ldd	r0, Z+6	; 0x06
    134c:	f7 81       	ldd	r31, Z+7	; 0x07
    134e:	e0 2d       	mov	r30, r0
    1350:	82 81       	ldd	r24, Z+2	; 0x02
    1352:	93 81       	ldd	r25, Z+3	; 0x03
    1354:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <xNextTaskUnblockTime+0x1>
    1358:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <xNextTaskUnblockTime>
    135c:	20 91 ae 07 	lds	r18, 0x07AE	; 0x8007ae <xTickCount>
    1360:	30 91 af 07 	lds	r19, 0x07AF	; 0x8007af <xTickCount+0x1>
    1364:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <xNextTaskUnblockTime>
    1368:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <xNextTaskUnblockTime+0x1>
    136c:	28 17       	cp	r18, r24
    136e:	39 07       	cpc	r19, r25
    1370:	08 f4       	brcc	.+2      	; 0x1374 <vTaskIncrementTick+0xac>
    1372:	69 c0       	rjmp	.+210    	; 0x1446 <vTaskIncrementTick+0x17e>
    1374:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <pxDelayedTaskList>
    1378:	f0 91 c7 07 	lds	r31, 0x07C7	; 0x8007c7 <pxDelayedTaskList+0x1>
    137c:	80 81       	ld	r24, Z
    137e:	88 23       	and	r24, r24
    1380:	99 f0       	breq	.+38     	; 0x13a8 <vTaskIncrementTick+0xe0>
    1382:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <pxDelayedTaskList>
    1386:	f0 91 c7 07 	lds	r31, 0x07C7	; 0x8007c7 <pxDelayedTaskList+0x1>
    138a:	05 80       	ldd	r0, Z+5	; 0x05
    138c:	f6 81       	ldd	r31, Z+6	; 0x06
    138e:	e0 2d       	mov	r30, r0
    1390:	c6 81       	ldd	r28, Z+6	; 0x06
    1392:	d7 81       	ldd	r29, Z+7	; 0x07
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	9b 81       	ldd	r25, Y+3	; 0x03
    1398:	20 91 ae 07 	lds	r18, 0x07AE	; 0x8007ae <xTickCount>
    139c:	30 91 af 07 	lds	r19, 0x07AF	; 0x8007af <xTickCount+0x1>
    13a0:	28 17       	cp	r18, r24
    13a2:	39 07       	cpc	r19, r25
    13a4:	f8 f4       	brcc	.+62     	; 0x13e4 <vTaskIncrementTick+0x11c>
    13a6:	19 c0       	rjmp	.+50     	; 0x13da <vTaskIncrementTick+0x112>
    13a8:	8f ef       	ldi	r24, 0xFF	; 255
    13aa:	9f ef       	ldi	r25, 0xFF	; 255
    13ac:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <xNextTaskUnblockTime+0x1>
    13b0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <xNextTaskUnblockTime>
    13b4:	48 c0       	rjmp	.+144    	; 0x1446 <vTaskIncrementTick+0x17e>
    13b6:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <pxDelayedTaskList>
    13ba:	f0 91 c7 07 	lds	r31, 0x07C7	; 0x8007c7 <pxDelayedTaskList+0x1>
    13be:	05 80       	ldd	r0, Z+5	; 0x05
    13c0:	f6 81       	ldd	r31, Z+6	; 0x06
    13c2:	e0 2d       	mov	r30, r0
    13c4:	c6 81       	ldd	r28, Z+6	; 0x06
    13c6:	d7 81       	ldd	r29, Z+7	; 0x07
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	9b 81       	ldd	r25, Y+3	; 0x03
    13cc:	20 91 ae 07 	lds	r18, 0x07AE	; 0x8007ae <xTickCount>
    13d0:	30 91 af 07 	lds	r19, 0x07AF	; 0x8007af <xTickCount+0x1>
    13d4:	28 17       	cp	r18, r24
    13d6:	39 07       	cpc	r19, r25
    13d8:	28 f4       	brcc	.+10     	; 0x13e4 <vTaskIncrementTick+0x11c>
    13da:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <xNextTaskUnblockTime+0x1>
    13de:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <xNextTaskUnblockTime>
    13e2:	31 c0       	rjmp	.+98     	; 0x1446 <vTaskIncrementTick+0x17e>
    13e4:	8e 01       	movw	r16, r28
    13e6:	0e 5f       	subi	r16, 0xFE	; 254
    13e8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ea:	c8 01       	movw	r24, r16
    13ec:	0e 94 00 01 	call	0x200	; 0x200 <vListRemove>
    13f0:	8c 89       	ldd	r24, Y+20	; 0x14
    13f2:	9d 89       	ldd	r25, Y+21	; 0x15
    13f4:	89 2b       	or	r24, r25
    13f6:	21 f0       	breq	.+8      	; 0x1400 <vTaskIncrementTick+0x138>
    13f8:	ce 01       	movw	r24, r28
    13fa:	0c 96       	adiw	r24, 0x0c	; 12
    13fc:	0e 94 00 01 	call	0x200	; 0x200 <vListRemove>
    1400:	8e 89       	ldd	r24, Y+22	; 0x16
    1402:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <uxTopReadyPriority>
    1406:	98 17       	cp	r25, r24
    1408:	10 f4       	brcc	.+4      	; 0x140e <vTaskIncrementTick+0x146>
    140a:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <uxTopReadyPriority>
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	9c 01       	movw	r18, r24
    1412:	22 0f       	add	r18, r18
    1414:	33 1f       	adc	r19, r19
    1416:	22 0f       	add	r18, r18
    1418:	33 1f       	adc	r19, r19
    141a:	22 0f       	add	r18, r18
    141c:	33 1f       	adc	r19, r19
    141e:	82 0f       	add	r24, r18
    1420:	93 1f       	adc	r25, r19
    1422:	b8 01       	movw	r22, r16
    1424:	86 52       	subi	r24, 0x26	; 38
    1426:	98 4f       	sbci	r25, 0xF8	; 248
    1428:	0e 94 9e 00 	call	0x13c	; 0x13c <vListInsertEnd>
    142c:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <pxDelayedTaskList>
    1430:	f0 91 c7 07 	lds	r31, 0x07C7	; 0x8007c7 <pxDelayedTaskList+0x1>
    1434:	80 81       	ld	r24, Z
    1436:	81 11       	cpse	r24, r1
    1438:	be cf       	rjmp	.-132    	; 0x13b6 <vTaskIncrementTick+0xee>
    143a:	b6 cf       	rjmp	.-148    	; 0x13a8 <vTaskIncrementTick+0xe0>
    143c:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <uxMissedTicks>
    1440:	8f 5f       	subi	r24, 0xFF	; 255
    1442:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <uxMissedTicks>
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	1f 91       	pop	r17
    144c:	0f 91       	pop	r16
    144e:	08 95       	ret

00001450 <xTaskResumeAll>:
    1450:	cf 92       	push	r12
    1452:	df 92       	push	r13
    1454:	ef 92       	push	r14
    1456:	ff 92       	push	r15
    1458:	0f 93       	push	r16
    145a:	1f 93       	push	r17
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	f8 94       	cli
    1464:	0f 92       	push	r0
    1466:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <uxSchedulerSuspended>
    146a:	81 50       	subi	r24, 0x01	; 1
    146c:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <uxSchedulerSuspended>
    1470:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <uxSchedulerSuspended>
    1474:	81 11       	cpse	r24, r1
    1476:	62 c0       	rjmp	.+196    	; 0x153c <xTaskResumeAll+0xec>
    1478:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <uxCurrentNumberOfTasks>
    147c:	81 11       	cpse	r24, r1
    147e:	32 c0       	rjmp	.+100    	; 0x14e4 <xTaskResumeAll+0x94>
    1480:	60 c0       	rjmp	.+192    	; 0x1542 <xTaskResumeAll+0xf2>
    1482:	d7 01       	movw	r26, r14
    1484:	15 96       	adiw	r26, 0x05	; 5
    1486:	ed 91       	ld	r30, X+
    1488:	fc 91       	ld	r31, X
    148a:	16 97       	sbiw	r26, 0x06	; 6
    148c:	c6 81       	ldd	r28, Z+6	; 0x06
    148e:	d7 81       	ldd	r29, Z+7	; 0x07
    1490:	ce 01       	movw	r24, r28
    1492:	0c 96       	adiw	r24, 0x0c	; 12
    1494:	0e 94 00 01 	call	0x200	; 0x200 <vListRemove>
    1498:	8e 01       	movw	r16, r28
    149a:	0e 5f       	subi	r16, 0xFE	; 254
    149c:	1f 4f       	sbci	r17, 0xFF	; 255
    149e:	c8 01       	movw	r24, r16
    14a0:	0e 94 00 01 	call	0x200	; 0x200 <vListRemove>
    14a4:	8e 89       	ldd	r24, Y+22	; 0x16
    14a6:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <uxTopReadyPriority>
    14aa:	98 17       	cp	r25, r24
    14ac:	10 f4       	brcc	.+4      	; 0x14b2 <xTaskResumeAll+0x62>
    14ae:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <uxTopReadyPriority>
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	9c 01       	movw	r18, r24
    14b6:	22 0f       	add	r18, r18
    14b8:	33 1f       	adc	r19, r19
    14ba:	22 0f       	add	r18, r18
    14bc:	33 1f       	adc	r19, r19
    14be:	22 0f       	add	r18, r18
    14c0:	33 1f       	adc	r19, r19
    14c2:	82 0f       	add	r24, r18
    14c4:	93 1f       	adc	r25, r19
    14c6:	b8 01       	movw	r22, r16
    14c8:	86 52       	subi	r24, 0x26	; 38
    14ca:	98 4f       	sbci	r25, 0xF8	; 248
    14cc:	0e 94 9e 00 	call	0x13c	; 0x13c <vListInsertEnd>
    14d0:	e0 91 fe 07 	lds	r30, 0x07FE	; 0x8007fe <pxCurrentTCB>
    14d4:	f0 91 ff 07 	lds	r31, 0x07FF	; 0x8007ff <pxCurrentTCB+0x1>
    14d8:	9e 89       	ldd	r25, Y+22	; 0x16
    14da:	86 89       	ldd	r24, Z+22	; 0x16
    14dc:	98 17       	cp	r25, r24
    14de:	58 f0       	brcs	.+22     	; 0x14f6 <xTaskResumeAll+0xa6>
    14e0:	dc 2c       	mov	r13, r12
    14e2:	09 c0       	rjmp	.+18     	; 0x14f6 <xTaskResumeAll+0xa6>
    14e4:	d1 2c       	mov	r13, r1
    14e6:	0f 2e       	mov	r0, r31
    14e8:	fb eb       	ldi	r31, 0xBB	; 187
    14ea:	ef 2e       	mov	r14, r31
    14ec:	f7 e0       	ldi	r31, 0x07	; 7
    14ee:	ff 2e       	mov	r15, r31
    14f0:	f0 2d       	mov	r31, r0
    14f2:	cc 24       	eor	r12, r12
    14f4:	c3 94       	inc	r12
    14f6:	f7 01       	movw	r30, r14
    14f8:	80 81       	ld	r24, Z
    14fa:	81 11       	cpse	r24, r1
    14fc:	c2 cf       	rjmp	.-124    	; 0x1482 <xTaskResumeAll+0x32>
    14fe:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <uxMissedTicks>
    1502:	88 23       	and	r24, r24
    1504:	79 f0       	breq	.+30     	; 0x1524 <xTaskResumeAll+0xd4>
    1506:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <uxMissedTicks>
    150a:	88 23       	and	r24, r24
    150c:	91 f0       	breq	.+36     	; 0x1532 <xTaskResumeAll+0xe2>
    150e:	dc de       	rcall	.-584    	; 0x12c8 <vTaskIncrementTick>
    1510:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <uxMissedTicks>
    1514:	81 50       	subi	r24, 0x01	; 1
    1516:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <uxMissedTicks>
    151a:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <uxMissedTicks>
    151e:	81 11       	cpse	r24, r1
    1520:	f6 cf       	rjmp	.-20     	; 0x150e <xTaskResumeAll+0xbe>
    1522:	07 c0       	rjmp	.+14     	; 0x1532 <xTaskResumeAll+0xe2>
    1524:	f1 e0       	ldi	r31, 0x01	; 1
    1526:	df 16       	cp	r13, r31
    1528:	21 f0       	breq	.+8      	; 0x1532 <xTaskResumeAll+0xe2>
    152a:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <xMissedYield>
    152e:	81 30       	cpi	r24, 0x01	; 1
    1530:	39 f4       	brne	.+14     	; 0x1540 <xTaskResumeAll+0xf0>
    1532:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <xMissedYield>
    1536:	b5 dc       	rcall	.-1686   	; 0xea2 <vPortYield>
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	03 c0       	rjmp	.+6      	; 0x1542 <xTaskResumeAll+0xf2>
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	01 c0       	rjmp	.+2      	; 0x1542 <xTaskResumeAll+0xf2>
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	0f 90       	pop	r0
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	df 91       	pop	r29
    1548:	cf 91       	pop	r28
    154a:	1f 91       	pop	r17
    154c:	0f 91       	pop	r16
    154e:	ff 90       	pop	r15
    1550:	ef 90       	pop	r14
    1552:	df 90       	pop	r13
    1554:	cf 90       	pop	r12
    1556:	08 95       	ret

00001558 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    155e:	89 2b       	or	r24, r25
    1560:	99 f0       	breq	.+38     	; 0x1588 <vTaskDelay+0x30>
		{
			vTaskSuspendAll();
    1562:	ac de       	rcall	.-680    	; 0x12bc <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1564:	80 91 ae 07 	lds	r24, 0x07AE	; 0x8007ae <xTickCount>
    1568:	90 91 af 07 	lds	r25, 0x07AF	; 0x8007af <xTickCount+0x1>
    156c:	c8 0f       	add	r28, r24
    156e:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1570:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <pxCurrentTCB>
    1574:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <pxCurrentTCB+0x1>
    1578:	02 96       	adiw	r24, 0x02	; 2
    157a:	0e 94 00 01 	call	0x200	; 0x200 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    157e:	ce 01       	movw	r24, r28
			}
			xAlreadyYielded = xTaskResumeAll();
    1580:	43 dd       	rcall	.-1402   	; 0x1008 <prvAddCurrentTaskToDelayedList>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1582:	66 df       	rcall	.-308    	; 0x1450 <xTaskResumeAll>
    1584:	81 11       	cpse	r24, r1
		{
			portYIELD_WITHIN_API();
    1586:	01 c0       	rjmp	.+2      	; 0x158a <vTaskDelay+0x32>
    1588:	8c dc       	rcall	.-1768   	; 0xea2 <vPortYield>
		}
	}
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	08 95       	ret

00001590 <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1590:	0f 2e       	mov	r0, r31
    1592:	f2 eb       	ldi	r31, 0xB2	; 178
    1594:	ef 2e       	mov	r14, r31
    1596:	f7 e0       	ldi	r31, 0x07	; 7
    1598:	ff 2e       	mov	r15, r31
    159a:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    159c:	ca ed       	ldi	r28, 0xDA	; 218
    159e:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    15a0:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <uxTasksDeleted>
    15a4:	88 23       	and	r24, r24
    15a6:	41 f1       	breq	.+80     	; 0x15f8 <prvIdleTask+0x68>
		{
			vTaskSuspendAll();
    15a8:	89 de       	rcall	.-750    	; 0x12bc <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    15aa:	d7 01       	movw	r26, r14
			xTaskResumeAll();
    15ac:	1c 91       	ld	r17, X
    15ae:	50 df       	rcall	.-352    	; 0x1450 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    15b0:	11 23       	and	r17, r17
    15b2:	11 f1       	breq	.+68     	; 0x15f8 <prvIdleTask+0x68>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    15ba:	d7 01       	movw	r26, r14
    15bc:	15 96       	adiw	r26, 0x05	; 5
    15be:	ed 91       	ld	r30, X+
    15c0:	fc 91       	ld	r31, X
    15c2:	16 97       	sbiw	r26, 0x06	; 6
    15c4:	06 81       	ldd	r16, Z+6	; 0x06
    15c6:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
    15c8:	c8 01       	movw	r24, r16
    15ca:	02 96       	adiw	r24, 0x02	; 2
    15cc:	0e 94 00 01 	call	0x200	; 0x200 <vListRemove>
					--uxCurrentNumberOfTasks;
    15d0:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <uxCurrentNumberOfTasks>
    15d4:	81 50       	subi	r24, 0x01	; 1
    15d6:	80 93 b0 07 	sts	0x07B0, r24	; 0x8007b0 <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
    15da:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <uxTasksDeleted>
    15de:	81 50       	subi	r24, 0x01	; 1
    15e0:	80 93 b1 07 	sts	0x07B1, r24	; 0x8007b1 <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
    15e4:	0f 90       	pop	r0
    15e6:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    15e8:	f8 01       	movw	r30, r16
    15ea:	87 89       	ldd	r24, Z+23	; 0x17
    15ec:	90 8d       	ldd	r25, Z+24	; 0x18
    15ee:	0e 94 8b 00 	call	0x116	; 0x116 <vPortFree>
		vPortFree( pxTCB );
    15f2:	c8 01       	movw	r24, r16
    15f4:	0e 94 8b 00 	call	0x116	; 0x116 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    15f8:	88 81       	ld	r24, Y
    15fa:	82 30       	cpi	r24, 0x02	; 2
			{
				taskYIELD();
    15fc:	88 f2       	brcs	.-94     	; 0x15a0 <prvIdleTask+0x10>
    15fe:	51 dc       	rcall	.-1886   	; 0xea2 <vPortYield>
    1600:	cf cf       	rjmp	.-98     	; 0x15a0 <prvIdleTask+0x10>

00001602 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    1602:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <uxSchedulerSuspended>
    1606:	81 11       	cpse	r24, r1
    1608:	13 c0       	rjmp	.+38     	; 0x1630 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    160a:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <uxTopReadyPriority>
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	fc 01       	movw	r30, r24
    1612:	ee 0f       	add	r30, r30
    1614:	ff 1f       	adc	r31, r31
    1616:	ee 0f       	add	r30, r30
    1618:	ff 1f       	adc	r31, r31
    161a:	ee 0f       	add	r30, r30
    161c:	ff 1f       	adc	r31, r31
    161e:	8e 0f       	add	r24, r30
    1620:	9f 1f       	adc	r25, r31
    1622:	fc 01       	movw	r30, r24
    1624:	e6 52       	subi	r30, 0x26	; 38
    1626:	f8 4f       	sbci	r31, 0xF8	; 248
    1628:	80 81       	ld	r24, Z
    162a:	88 23       	and	r24, r24
    162c:	29 f0       	breq	.+10     	; 0x1638 <vTaskSwitchContext+0x36>
    162e:	1b c0       	rjmp	.+54     	; 0x1666 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <xMissedYield>
    1636:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    1638:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <uxTopReadyPriority>
    163c:	81 50       	subi	r24, 0x01	; 1
    163e:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1642:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <uxTopReadyPriority>
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	fc 01       	movw	r30, r24
    164a:	ee 0f       	add	r30, r30
    164c:	ff 1f       	adc	r31, r31
    164e:	ee 0f       	add	r30, r30
    1650:	ff 1f       	adc	r31, r31
    1652:	ee 0f       	add	r30, r30
    1654:	ff 1f       	adc	r31, r31
    1656:	8e 0f       	add	r24, r30
    1658:	9f 1f       	adc	r25, r31
    165a:	fc 01       	movw	r30, r24
    165c:	e6 52       	subi	r30, 0x26	; 38
    165e:	f8 4f       	sbci	r31, 0xF8	; 248
    1660:	80 81       	ld	r24, Z
    1662:	88 23       	and	r24, r24
    1664:	49 f3       	breq	.-46     	; 0x1638 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    1666:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <uxTopReadyPriority>
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	9c 01       	movw	r18, r24
    166e:	22 0f       	add	r18, r18
    1670:	33 1f       	adc	r19, r19
    1672:	22 0f       	add	r18, r18
    1674:	33 1f       	adc	r19, r19
    1676:	22 0f       	add	r18, r18
    1678:	33 1f       	adc	r19, r19
    167a:	28 0f       	add	r18, r24
    167c:	39 1f       	adc	r19, r25
    167e:	d9 01       	movw	r26, r18
    1680:	a6 52       	subi	r26, 0x26	; 38
    1682:	b8 4f       	sbci	r27, 0xF8	; 248
    1684:	11 96       	adiw	r26, 0x01	; 1
    1686:	ed 91       	ld	r30, X+
    1688:	fc 91       	ld	r31, X
    168a:	12 97       	sbiw	r26, 0x02	; 2
    168c:	02 80       	ldd	r0, Z+2	; 0x02
    168e:	f3 81       	ldd	r31, Z+3	; 0x03
    1690:	e0 2d       	mov	r30, r0
    1692:	12 96       	adiw	r26, 0x02	; 2
    1694:	fc 93       	st	X, r31
    1696:	ee 93       	st	-X, r30
    1698:	11 97       	sbiw	r26, 0x01	; 1
    169a:	23 52       	subi	r18, 0x23	; 35
    169c:	38 4f       	sbci	r19, 0xF8	; 248
    169e:	e2 17       	cp	r30, r18
    16a0:	f3 07       	cpc	r31, r19
    16a2:	29 f4       	brne	.+10     	; 0x16ae <vTaskSwitchContext+0xac>
    16a4:	22 81       	ldd	r18, Z+2	; 0x02
    16a6:	33 81       	ldd	r19, Z+3	; 0x03
    16a8:	fd 01       	movw	r30, r26
    16aa:	32 83       	std	Z+2, r19	; 0x02
    16ac:	21 83       	std	Z+1, r18	; 0x01
    16ae:	fc 01       	movw	r30, r24
    16b0:	ee 0f       	add	r30, r30
    16b2:	ff 1f       	adc	r31, r31
    16b4:	ee 0f       	add	r30, r30
    16b6:	ff 1f       	adc	r31, r31
    16b8:	ee 0f       	add	r30, r30
    16ba:	ff 1f       	adc	r31, r31
    16bc:	8e 0f       	add	r24, r30
    16be:	9f 1f       	adc	r25, r31
    16c0:	fc 01       	movw	r30, r24
    16c2:	e6 52       	subi	r30, 0x26	; 38
    16c4:	f8 4f       	sbci	r31, 0xF8	; 248
    16c6:	01 80       	ldd	r0, Z+1	; 0x01
    16c8:	f2 81       	ldd	r31, Z+2	; 0x02
    16ca:	e0 2d       	mov	r30, r0
    16cc:	86 81       	ldd	r24, Z+6	; 0x06
    16ce:	97 81       	ldd	r25, Z+7	; 0x07
    16d0:	90 93 ff 07 	sts	0x07FF, r25	; 0x8007ff <pxCurrentTCB+0x1>
    16d4:	80 93 fe 07 	sts	0x07FE, r24	; 0x8007fe <pxCurrentTCB>
    16d8:	08 95       	ret

000016da <__divmodhi4>:
    16da:	97 fb       	bst	r25, 7
    16dc:	07 2e       	mov	r0, r23
    16de:	16 f4       	brtc	.+4      	; 0x16e4 <__divmodhi4+0xa>
    16e0:	00 94       	com	r0
    16e2:	06 d0       	rcall	.+12     	; 0x16f0 <__divmodhi4_neg1>
    16e4:	77 fd       	sbrc	r23, 7
    16e6:	08 d0       	rcall	.+16     	; 0x16f8 <__divmodhi4_neg2>
    16e8:	0b d0       	rcall	.+22     	; 0x1700 <__udivmodhi4>
    16ea:	07 fc       	sbrc	r0, 7
    16ec:	05 d0       	rcall	.+10     	; 0x16f8 <__divmodhi4_neg2>
    16ee:	3e f4       	brtc	.+14     	; 0x16fe <__divmodhi4_exit>

000016f0 <__divmodhi4_neg1>:
    16f0:	90 95       	com	r25
    16f2:	81 95       	neg	r24
    16f4:	9f 4f       	sbci	r25, 0xFF	; 255
    16f6:	08 95       	ret

000016f8 <__divmodhi4_neg2>:
    16f8:	70 95       	com	r23
    16fa:	61 95       	neg	r22
    16fc:	7f 4f       	sbci	r23, 0xFF	; 255

000016fe <__divmodhi4_exit>:
    16fe:	08 95       	ret

00001700 <__udivmodhi4>:
    1700:	aa 1b       	sub	r26, r26
    1702:	bb 1b       	sub	r27, r27
    1704:	51 e1       	ldi	r21, 0x11	; 17
    1706:	07 c0       	rjmp	.+14     	; 0x1716 <__udivmodhi4_ep>

00001708 <__udivmodhi4_loop>:
    1708:	aa 1f       	adc	r26, r26
    170a:	bb 1f       	adc	r27, r27
    170c:	a6 17       	cp	r26, r22
    170e:	b7 07       	cpc	r27, r23
    1710:	10 f0       	brcs	.+4      	; 0x1716 <__udivmodhi4_ep>
    1712:	a6 1b       	sub	r26, r22
    1714:	b7 0b       	sbc	r27, r23

00001716 <__udivmodhi4_ep>:
    1716:	88 1f       	adc	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	5a 95       	dec	r21
    171c:	a9 f7       	brne	.-22     	; 0x1708 <__udivmodhi4_loop>
    171e:	80 95       	com	r24
    1720:	90 95       	com	r25
    1722:	bc 01       	movw	r22, r24
    1724:	cd 01       	movw	r24, r26
    1726:	08 95       	ret

00001728 <do_rand>:
    1728:	8f 92       	push	r8
    172a:	9f 92       	push	r9
    172c:	af 92       	push	r10
    172e:	bf 92       	push	r11
    1730:	cf 92       	push	r12
    1732:	df 92       	push	r13
    1734:	ef 92       	push	r14
    1736:	ff 92       	push	r15
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
    173c:	ec 01       	movw	r28, r24
    173e:	68 81       	ld	r22, Y
    1740:	79 81       	ldd	r23, Y+1	; 0x01
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	9b 81       	ldd	r25, Y+3	; 0x03
    1746:	61 15       	cp	r22, r1
    1748:	71 05       	cpc	r23, r1
    174a:	81 05       	cpc	r24, r1
    174c:	91 05       	cpc	r25, r1
    174e:	21 f4       	brne	.+8      	; 0x1758 <do_rand+0x30>
    1750:	64 e2       	ldi	r22, 0x24	; 36
    1752:	79 ed       	ldi	r23, 0xD9	; 217
    1754:	8b e5       	ldi	r24, 0x5B	; 91
    1756:	97 e0       	ldi	r25, 0x07	; 7
    1758:	2d e1       	ldi	r18, 0x1D	; 29
    175a:	33 ef       	ldi	r19, 0xF3	; 243
    175c:	41 e0       	ldi	r20, 0x01	; 1
    175e:	50 e0       	ldi	r21, 0x00	; 0
    1760:	4e d0       	rcall	.+156    	; 0x17fe <__divmodsi4>
    1762:	49 01       	movw	r8, r18
    1764:	5a 01       	movw	r10, r20
    1766:	9b 01       	movw	r18, r22
    1768:	ac 01       	movw	r20, r24
    176a:	a7 ea       	ldi	r26, 0xA7	; 167
    176c:	b1 e4       	ldi	r27, 0x41	; 65
    176e:	63 d0       	rcall	.+198    	; 0x1836 <__muluhisi3>
    1770:	6b 01       	movw	r12, r22
    1772:	7c 01       	movw	r14, r24
    1774:	ac ee       	ldi	r26, 0xEC	; 236
    1776:	b4 ef       	ldi	r27, 0xF4	; 244
    1778:	a5 01       	movw	r20, r10
    177a:	94 01       	movw	r18, r8
    177c:	68 d0       	rcall	.+208    	; 0x184e <__mulohisi3>
    177e:	dc 01       	movw	r26, r24
    1780:	cb 01       	movw	r24, r22
    1782:	8c 0d       	add	r24, r12
    1784:	9d 1d       	adc	r25, r13
    1786:	ae 1d       	adc	r26, r14
    1788:	bf 1d       	adc	r27, r15
    178a:	b7 ff       	sbrs	r27, 7
    178c:	03 c0       	rjmp	.+6      	; 0x1794 <do_rand+0x6c>
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	a1 09       	sbc	r26, r1
    1792:	b0 48       	sbci	r27, 0x80	; 128
    1794:	88 83       	st	Y, r24
    1796:	99 83       	std	Y+1, r25	; 0x01
    1798:	aa 83       	std	Y+2, r26	; 0x02
    179a:	bb 83       	std	Y+3, r27	; 0x03
    179c:	9f 77       	andi	r25, 0x7F	; 127
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	ff 90       	pop	r15
    17a4:	ef 90       	pop	r14
    17a6:	df 90       	pop	r13
    17a8:	cf 90       	pop	r12
    17aa:	bf 90       	pop	r11
    17ac:	af 90       	pop	r10
    17ae:	9f 90       	pop	r9
    17b0:	8f 90       	pop	r8
    17b2:	08 95       	ret

000017b4 <rand_r>:
    17b4:	b9 cf       	rjmp	.-142    	; 0x1728 <do_rand>

000017b6 <rand>:
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	91 e0       	ldi	r25, 0x01	; 1
    17ba:	b6 cf       	rjmp	.-148    	; 0x1728 <do_rand>

000017bc <srand>:
    17bc:	a0 e0       	ldi	r26, 0x00	; 0
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    17c4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    17c8:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    17cc:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    17d0:	08 95       	ret

000017d2 <memset>:
    17d2:	dc 01       	movw	r26, r24
    17d4:	01 c0       	rjmp	.+2      	; 0x17d8 <memset+0x6>
    17d6:	6d 93       	st	X+, r22
    17d8:	41 50       	subi	r20, 0x01	; 1
    17da:	50 40       	sbci	r21, 0x00	; 0
    17dc:	e0 f7       	brcc	.-8      	; 0x17d6 <memset+0x4>
    17de:	08 95       	ret

000017e0 <strncpy>:
    17e0:	fb 01       	movw	r30, r22
    17e2:	dc 01       	movw	r26, r24
    17e4:	41 50       	subi	r20, 0x01	; 1
    17e6:	50 40       	sbci	r21, 0x00	; 0
    17e8:	48 f0       	brcs	.+18     	; 0x17fc <strncpy+0x1c>
    17ea:	01 90       	ld	r0, Z+
    17ec:	0d 92       	st	X+, r0
    17ee:	00 20       	and	r0, r0
    17f0:	c9 f7       	brne	.-14     	; 0x17e4 <strncpy+0x4>
    17f2:	01 c0       	rjmp	.+2      	; 0x17f6 <strncpy+0x16>
    17f4:	1d 92       	st	X+, r1
    17f6:	41 50       	subi	r20, 0x01	; 1
    17f8:	50 40       	sbci	r21, 0x00	; 0
    17fa:	e0 f7       	brcc	.-8      	; 0x17f4 <strncpy+0x14>
    17fc:	08 95       	ret

000017fe <__divmodsi4>:
    17fe:	05 2e       	mov	r0, r21
    1800:	97 fb       	bst	r25, 7
    1802:	16 f4       	brtc	.+4      	; 0x1808 <__divmodsi4+0xa>
    1804:	00 94       	com	r0
    1806:	0f d0       	rcall	.+30     	; 0x1826 <__negsi2>
    1808:	57 fd       	sbrc	r21, 7
    180a:	05 d0       	rcall	.+10     	; 0x1816 <__divmodsi4_neg2>
    180c:	24 d0       	rcall	.+72     	; 0x1856 <__udivmodsi4>
    180e:	07 fc       	sbrc	r0, 7
    1810:	02 d0       	rcall	.+4      	; 0x1816 <__divmodsi4_neg2>
    1812:	46 f4       	brtc	.+16     	; 0x1824 <__divmodsi4_exit>
    1814:	08 c0       	rjmp	.+16     	; 0x1826 <__negsi2>

00001816 <__divmodsi4_neg2>:
    1816:	50 95       	com	r21
    1818:	40 95       	com	r20
    181a:	30 95       	com	r19
    181c:	21 95       	neg	r18
    181e:	3f 4f       	sbci	r19, 0xFF	; 255
    1820:	4f 4f       	sbci	r20, 0xFF	; 255
    1822:	5f 4f       	sbci	r21, 0xFF	; 255

00001824 <__divmodsi4_exit>:
    1824:	08 95       	ret

00001826 <__negsi2>:
    1826:	90 95       	com	r25
    1828:	80 95       	com	r24
    182a:	70 95       	com	r23
    182c:	61 95       	neg	r22
    182e:	7f 4f       	sbci	r23, 0xFF	; 255
    1830:	8f 4f       	sbci	r24, 0xFF	; 255
    1832:	9f 4f       	sbci	r25, 0xFF	; 255
    1834:	08 95       	ret

00001836 <__muluhisi3>:
    1836:	31 d0       	rcall	.+98     	; 0x189a <__umulhisi3>
    1838:	a5 9f       	mul	r26, r21
    183a:	90 0d       	add	r25, r0
    183c:	b4 9f       	mul	r27, r20
    183e:	90 0d       	add	r25, r0
    1840:	a4 9f       	mul	r26, r20
    1842:	80 0d       	add	r24, r0
    1844:	91 1d       	adc	r25, r1
    1846:	11 24       	eor	r1, r1
    1848:	08 95       	ret

0000184a <__mulshisi3>:
    184a:	b7 ff       	sbrs	r27, 7
    184c:	f4 cf       	rjmp	.-24     	; 0x1836 <__muluhisi3>

0000184e <__mulohisi3>:
    184e:	f3 df       	rcall	.-26     	; 0x1836 <__muluhisi3>
    1850:	82 1b       	sub	r24, r18
    1852:	93 0b       	sbc	r25, r19
    1854:	08 95       	ret

00001856 <__udivmodsi4>:
    1856:	a1 e2       	ldi	r26, 0x21	; 33
    1858:	1a 2e       	mov	r1, r26
    185a:	aa 1b       	sub	r26, r26
    185c:	bb 1b       	sub	r27, r27
    185e:	fd 01       	movw	r30, r26
    1860:	0d c0       	rjmp	.+26     	; 0x187c <__udivmodsi4_ep>

00001862 <__udivmodsi4_loop>:
    1862:	aa 1f       	adc	r26, r26
    1864:	bb 1f       	adc	r27, r27
    1866:	ee 1f       	adc	r30, r30
    1868:	ff 1f       	adc	r31, r31
    186a:	a2 17       	cp	r26, r18
    186c:	b3 07       	cpc	r27, r19
    186e:	e4 07       	cpc	r30, r20
    1870:	f5 07       	cpc	r31, r21
    1872:	20 f0       	brcs	.+8      	; 0x187c <__udivmodsi4_ep>
    1874:	a2 1b       	sub	r26, r18
    1876:	b3 0b       	sbc	r27, r19
    1878:	e4 0b       	sbc	r30, r20
    187a:	f5 0b       	sbc	r31, r21

0000187c <__udivmodsi4_ep>:
    187c:	66 1f       	adc	r22, r22
    187e:	77 1f       	adc	r23, r23
    1880:	88 1f       	adc	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	1a 94       	dec	r1
    1886:	69 f7       	brne	.-38     	; 0x1862 <__udivmodsi4_loop>
    1888:	60 95       	com	r22
    188a:	70 95       	com	r23
    188c:	80 95       	com	r24
    188e:	90 95       	com	r25
    1890:	9b 01       	movw	r18, r22
    1892:	ac 01       	movw	r20, r24
    1894:	bd 01       	movw	r22, r26
    1896:	cf 01       	movw	r24, r30
    1898:	08 95       	ret

0000189a <__umulhisi3>:
    189a:	a2 9f       	mul	r26, r18
    189c:	b0 01       	movw	r22, r0
    189e:	b3 9f       	mul	r27, r19
    18a0:	c0 01       	movw	r24, r0
    18a2:	a3 9f       	mul	r26, r19
    18a4:	70 0d       	add	r23, r0
    18a6:	81 1d       	adc	r24, r1
    18a8:	11 24       	eor	r1, r1
    18aa:	91 1d       	adc	r25, r1
    18ac:	b2 9f       	mul	r27, r18
    18ae:	70 0d       	add	r23, r0
    18b0:	81 1d       	adc	r24, r1
    18b2:	11 24       	eor	r1, r1
    18b4:	91 1d       	adc	r25, r1
    18b6:	08 95       	ret

000018b8 <_exit>:
    18b8:	f8 94       	cli

000018ba <__stop_program>:
    18ba:	ff cf       	rjmp	.-2      	; 0x18ba <__stop_program>
