
CHIP_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800100  0000199c  00001a30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000199c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000661  008001b4  008001b4  00001ae4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ae4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  00001b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003277  00000000  00000000  00001e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001084  00000000  00000000  000050f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001fd1  00000000  00000000  00006177  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000086c  00000000  00000000  00008148  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000135e  00000000  00000000  000089b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001920  00000000  00000000  00009d12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000320  00000000  00000000  0000b632  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
       2:	00 00       	nop
       4:	68 c0       	rjmp	.+208    	; 0xd6 <__bad_interrupt>
       6:	00 00       	nop
       8:	66 c0       	rjmp	.+204    	; 0xd6 <__bad_interrupt>
       a:	00 00       	nop
       c:	64 c0       	rjmp	.+200    	; 0xd6 <__bad_interrupt>
       e:	00 00       	nop
      10:	62 c0       	rjmp	.+196    	; 0xd6 <__bad_interrupt>
      12:	00 00       	nop
      14:	60 c0       	rjmp	.+192    	; 0xd6 <__bad_interrupt>
      16:	00 00       	nop
      18:	5e c0       	rjmp	.+188    	; 0xd6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5c c0       	rjmp	.+184    	; 0xd6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5a c0       	rjmp	.+180    	; 0xd6 <__bad_interrupt>
      22:	00 00       	nop
      24:	58 c0       	rjmp	.+176    	; 0xd6 <__bad_interrupt>
      26:	00 00       	nop
      28:	56 c0       	rjmp	.+172    	; 0xd6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	54 c0       	rjmp	.+168    	; 0xd6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	52 c0       	rjmp	.+164    	; 0xd6 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <__vector_13>
      38:	4e c0       	rjmp	.+156    	; 0xd6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4c c0       	rjmp	.+152    	; 0xd6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	44 c0       	rjmp	.+136    	; 0xd6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
      52:	00 00       	nop
      54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
      56:	00 00       	nop
      58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8d 05       	cpc	r24, r13
      8e:	a3 05       	cpc	r26, r3
      90:	cd 05       	cpc	r28, r13
      92:	e2 05       	cpc	r30, r2
      94:	f5 05       	cpc	r31, r5
      96:	0e 06       	cpc	r0, r30
      98:	43 06       	cpc	r4, r19

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d0 e4       	ldi	r29, 0x40	; 64
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
      a6:	11 e0       	ldi	r17, 0x01	; 1
      a8:	a0 e0       	ldi	r26, 0x00	; 0
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	ec e9       	ldi	r30, 0x9C	; 156
      ae:	f9 e1       	ldi	r31, 0x19	; 25
      b0:	00 e0       	ldi	r16, 0x00	; 0
      b2:	0b bf       	out	0x3b, r16	; 59
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
      b6:	07 90       	elpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	a4 3b       	cpi	r26, 0xB4	; 180
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
      c0:	28 e0       	ldi	r18, 0x08	; 8
      c2:	a4 eb       	ldi	r26, 0xB4	; 180
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	a5 31       	cpi	r26, 0x15	; 21
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	81 d6       	rcall	.+3330   	; 0xdd4 <main>
      d2:	0c 94 cc 0c 	jmp	0x1998	; 0x1998 <_exit>

000000d6 <__bad_interrupt>:
      d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      d8:	cf 93       	push	r28
      da:	df 93       	push	r29
      dc:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      de:	0e 94 c5 09 	call	0x138a	; 0x138a <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      e2:	20 91 b4 01 	lds	r18, 0x01B4	; 0x8001b4 <__data_end>
      e6:	30 91 b5 01 	lds	r19, 0x01B5	; 0x8001b5 <__data_end+0x1>
      ea:	c9 01       	movw	r24, r18
      ec:	8c 0f       	add	r24, r28
      ee:	9d 1f       	adc	r25, r29
      f0:	8c 3d       	cpi	r24, 0xDC	; 220
      f2:	45 e0       	ldi	r20, 0x05	; 5
      f4:	94 07       	cpc	r25, r20
      f6:	58 f4       	brcc	.+22     	; 0x10e <pvPortMalloc+0x36>
      f8:	28 17       	cp	r18, r24
      fa:	39 07       	cpc	r19, r25
      fc:	58 f4       	brcc	.+22     	; 0x114 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
      fe:	e9 01       	movw	r28, r18
     100:	ca 54       	subi	r28, 0x4A	; 74
     102:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
     104:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <__data_end+0x1>
     108:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <__data_end>
     10c:	05 c0       	rjmp	.+10     	; 0x118 <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     10e:	c0 e0       	ldi	r28, 0x00	; 0
     110:	d0 e0       	ldi	r29, 0x00	; 0
     112:	02 c0       	rjmp	.+4      	; 0x118 <pvPortMalloc+0x40>
     114:	c0 e0       	ldi	r28, 0x00	; 0
     116:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     118:	0e 94 8f 0a 	call	0x151e	; 0x151e <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     11c:	ce 01       	movw	r24, r28
     11e:	df 91       	pop	r29
     120:	cf 91       	pop	r28
     122:	08 95       	ret

00000124 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     124:	08 95       	ret

00000126 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     126:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     128:	03 96       	adiw	r24, 0x03	; 3
     12a:	92 83       	std	Z+2, r25	; 0x02
     12c:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     12e:	2f ef       	ldi	r18, 0xFF	; 255
     130:	3f ef       	ldi	r19, 0xFF	; 255
     132:	34 83       	std	Z+4, r19	; 0x04
     134:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     136:	96 83       	std	Z+6, r25	; 0x06
     138:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     13a:	90 87       	std	Z+8, r25	; 0x08
     13c:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     13e:	10 82       	st	Z, r1
     140:	08 95       	ret

00000142 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     142:	fc 01       	movw	r30, r24
     144:	11 86       	std	Z+9, r1	; 0x09
     146:	10 86       	std	Z+8, r1	; 0x08
     148:	08 95       	ret

0000014a <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     14a:	cf 93       	push	r28
     14c:	df 93       	push	r29
     14e:	fc 01       	movw	r30, r24
     150:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     152:	21 81       	ldd	r18, Z+1	; 0x01
     154:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     156:	e9 01       	movw	r28, r18
     158:	8a 81       	ldd	r24, Y+2	; 0x02
     15a:	9b 81       	ldd	r25, Y+3	; 0x03
     15c:	13 96       	adiw	r26, 0x03	; 3
     15e:	9c 93       	st	X, r25
     160:	8e 93       	st	-X, r24
     162:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     164:	81 81       	ldd	r24, Z+1	; 0x01
     166:	92 81       	ldd	r25, Z+2	; 0x02
     168:	15 96       	adiw	r26, 0x05	; 5
     16a:	9c 93       	st	X, r25
     16c:	8e 93       	st	-X, r24
     16e:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	ec 01       	movw	r28, r24
     176:	7d 83       	std	Y+5, r23	; 0x05
     178:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     17a:	e9 01       	movw	r28, r18
     17c:	7b 83       	std	Y+3, r23	; 0x03
     17e:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     180:	72 83       	std	Z+2, r23	; 0x02
     182:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     184:	19 96       	adiw	r26, 0x09	; 9
     186:	fc 93       	st	X, r31
     188:	ee 93       	st	-X, r30
     18a:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     18c:	80 81       	ld	r24, Z
     18e:	8f 5f       	subi	r24, 0xFF	; 255
     190:	80 83       	st	Z, r24
}
     192:	df 91       	pop	r29
     194:	cf 91       	pop	r28
     196:	08 95       	ret

00000198 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     198:	cf 93       	push	r28
     19a:	df 93       	push	r29
     19c:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     19e:	48 81       	ld	r20, Y
     1a0:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     1a2:	4f 3f       	cpi	r20, 0xFF	; 255
     1a4:	2f ef       	ldi	r18, 0xFF	; 255
     1a6:	52 07       	cpc	r21, r18
     1a8:	31 f4       	brne	.+12     	; 0x1b6 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     1aa:	dc 01       	movw	r26, r24
     1ac:	17 96       	adiw	r26, 0x07	; 7
     1ae:	ed 91       	ld	r30, X+
     1b0:	fc 91       	ld	r31, X
     1b2:	18 97       	sbiw	r26, 0x08	; 8
     1b4:	17 c0       	rjmp	.+46     	; 0x1e4 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     1b6:	fc 01       	movw	r30, r24
     1b8:	33 96       	adiw	r30, 0x03	; 3
     1ba:	dc 01       	movw	r26, r24
     1bc:	15 96       	adiw	r26, 0x05	; 5
     1be:	2d 91       	ld	r18, X+
     1c0:	3c 91       	ld	r19, X
     1c2:	16 97       	sbiw	r26, 0x06	; 6
     1c4:	d9 01       	movw	r26, r18
     1c6:	2d 91       	ld	r18, X+
     1c8:	3c 91       	ld	r19, X
     1ca:	42 17       	cp	r20, r18
     1cc:	53 07       	cpc	r21, r19
     1ce:	50 f0       	brcs	.+20     	; 0x1e4 <vListInsert+0x4c>
     1d0:	02 80       	ldd	r0, Z+2	; 0x02
     1d2:	f3 81       	ldd	r31, Z+3	; 0x03
     1d4:	e0 2d       	mov	r30, r0
     1d6:	a2 81       	ldd	r26, Z+2	; 0x02
     1d8:	b3 81       	ldd	r27, Z+3	; 0x03
     1da:	2d 91       	ld	r18, X+
     1dc:	3c 91       	ld	r19, X
     1de:	42 17       	cp	r20, r18
     1e0:	53 07       	cpc	r21, r19
     1e2:	b0 f7       	brcc	.-20     	; 0x1d0 <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     1e4:	a2 81       	ldd	r26, Z+2	; 0x02
     1e6:	b3 81       	ldd	r27, Z+3	; 0x03
     1e8:	bb 83       	std	Y+3, r27	; 0x03
     1ea:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     1ec:	15 96       	adiw	r26, 0x05	; 5
     1ee:	dc 93       	st	X, r29
     1f0:	ce 93       	st	-X, r28
     1f2:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     1f4:	fd 83       	std	Y+5, r31	; 0x05
     1f6:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     1f8:	d3 83       	std	Z+3, r29	; 0x03
     1fa:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     1fc:	99 87       	std	Y+9, r25	; 0x09
     1fe:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     200:	fc 01       	movw	r30, r24
     202:	20 81       	ld	r18, Z
     204:	2f 5f       	subi	r18, 0xFF	; 255
     206:	20 83       	st	Z, r18
}
     208:	df 91       	pop	r29
     20a:	cf 91       	pop	r28
     20c:	08 95       	ret

0000020e <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     20e:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     210:	a2 81       	ldd	r26, Z+2	; 0x02
     212:	b3 81       	ldd	r27, Z+3	; 0x03
     214:	84 81       	ldd	r24, Z+4	; 0x04
     216:	95 81       	ldd	r25, Z+5	; 0x05
     218:	15 96       	adiw	r26, 0x05	; 5
     21a:	9c 93       	st	X, r25
     21c:	8e 93       	st	-X, r24
     21e:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     220:	a4 81       	ldd	r26, Z+4	; 0x04
     222:	b5 81       	ldd	r27, Z+5	; 0x05
     224:	82 81       	ldd	r24, Z+2	; 0x02
     226:	93 81       	ldd	r25, Z+3	; 0x03
     228:	13 96       	adiw	r26, 0x03	; 3
     22a:	9c 93       	st	X, r25
     22c:	8e 93       	st	-X, r24
     22e:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     230:	a0 85       	ldd	r26, Z+8	; 0x08
     232:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     234:	11 96       	adiw	r26, 0x01	; 1
     236:	8d 91       	ld	r24, X+
     238:	9c 91       	ld	r25, X
     23a:	12 97       	sbiw	r26, 0x02	; 2
     23c:	e8 17       	cp	r30, r24
     23e:	f9 07       	cpc	r31, r25
     240:	31 f4       	brne	.+12     	; 0x24e <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     242:	84 81       	ldd	r24, Z+4	; 0x04
     244:	95 81       	ldd	r25, Z+5	; 0x05
     246:	12 96       	adiw	r26, 0x02	; 2
     248:	9c 93       	st	X, r25
     24a:	8e 93       	st	-X, r24
     24c:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     24e:	11 86       	std	Z+9, r1	; 0x09
     250:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     252:	8c 91       	ld	r24, X
     254:	81 50       	subi	r24, 0x01	; 1
     256:	8c 93       	st	X, r24
     258:	08 95       	ret

0000025a <initUSART>:
//RECEIVE FSM

enum RECState {Rec_Wait, Receive_State } rec_state;

void REC_Init(){
	rec_state = Rec_Wait;
     25a:	81 30       	cpi	r24, 0x01	; 1
     25c:	81 f0       	breq	.+32     	; 0x27e <initUSART+0x24>
     25e:	e1 ec       	ldi	r30, 0xC1	; 193
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	80 81       	ld	r24, Z
     264:	88 61       	ori	r24, 0x18	; 24
     266:	80 83       	st	Z, r24
     268:	e2 ec       	ldi	r30, 0xC2	; 194
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	86 60       	ori	r24, 0x06	; 6
     270:	80 83       	st	Z, r24
     272:	83 e3       	ldi	r24, 0x33	; 51
     274:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     278:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     27c:	08 95       	ret
     27e:	e9 ec       	ldi	r30, 0xC9	; 201
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	80 81       	ld	r24, Z
     284:	88 61       	ori	r24, 0x18	; 24
     286:	80 83       	st	Z, r24
     288:	ea ec       	ldi	r30, 0xCA	; 202
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	80 81       	ld	r24, Z
     28e:	86 60       	ori	r24, 0x06	; 6
     290:	80 83       	st	Z, r24
     292:	83 e3       	ldi	r24, 0x33	; 51
     294:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     298:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     29c:	08 95       	ret

0000029e <USART_Flush>:
     29e:	81 30       	cpi	r24, 0x01	; 1
     2a0:	29 f4       	brne	.+10     	; 0x2ac <USART_Flush+0xe>
     2a2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     2a6:	88 23       	and	r24, r24
     2a8:	74 f0       	brlt	.+28     	; 0x2c6 <USART_Flush+0x28>
     2aa:	08 95       	ret
     2ac:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     2b0:	88 23       	and	r24, r24
     2b2:	8c f4       	brge	.+34     	; 0x2d6 <USART_Flush+0x38>
     2b4:	a6 ec       	ldi	r26, 0xC6	; 198
     2b6:	b0 e0       	ldi	r27, 0x00	; 0
     2b8:	e0 ec       	ldi	r30, 0xC0	; 192
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	8c 91       	ld	r24, X
     2be:	80 81       	ld	r24, Z
     2c0:	88 23       	and	r24, r24
     2c2:	e4 f3       	brlt	.-8      	; 0x2bc <USART_Flush+0x1e>
     2c4:	08 95       	ret
     2c6:	ae ec       	ldi	r26, 0xCE	; 206
     2c8:	b0 e0       	ldi	r27, 0x00	; 0
     2ca:	e8 ec       	ldi	r30, 0xC8	; 200
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	8c 91       	ld	r24, X
     2d0:	80 81       	ld	r24, Z
     2d2:	88 23       	and	r24, r24
     2d4:	e4 f3       	brlt	.-8      	; 0x2ce <USART_Flush+0x30>
     2d6:	08 95       	ret

000002d8 <USART_Receive>:
     2d8:	81 30       	cpi	r24, 0x01	; 1
     2da:	41 f0       	breq	.+16     	; 0x2ec <USART_Receive+0x14>
     2dc:	e0 ec       	ldi	r30, 0xC0	; 192
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	80 81       	ld	r24, Z
     2e2:	88 23       	and	r24, r24
     2e4:	ec f7       	brge	.-6      	; 0x2e0 <USART_Receive+0x8>
     2e6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     2ea:	08 95       	ret
     2ec:	e8 ec       	ldi	r30, 0xC8	; 200
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	80 81       	ld	r24, Z
     2f2:	88 23       	and	r24, r24
     2f4:	ec f7       	brge	.-6      	; 0x2f0 <USART_Receive+0x18>
     2f6:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     2fa:	08 95       	ret

000002fc <generate_random_num>:
     2fc:	0e 94 4b 0c 	call	0x1896	; 0x1896 <rand>
     300:	6a e0       	ldi	r22, 0x0A	; 10
     302:	70 e0       	ldi	r23, 0x00	; 0
     304:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__divmodhi4>
     308:	08 95       	ret

0000030a <Motor_Tick>:
     30a:	80 91 11 08 	lds	r24, 0x0811	; 0x800811 <motor_state>
     30e:	81 30       	cpi	r24, 0x01	; 1
     310:	19 f0       	breq	.+6      	; 0x318 <Motor_Tick+0xe>
     312:	82 30       	cpi	r24, 0x02	; 2
     314:	99 f0       	breq	.+38     	; 0x33c <Motor_Tick+0x32>
     316:	24 c0       	rjmp	.+72     	; 0x360 <Motor_Tick+0x56>
     318:	e0 91 a8 07 	lds	r30, 0x07A8	; 0x8007a8 <p_index>
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	e7 5f       	subi	r30, 0xF7	; 247
     320:	fe 4f       	sbci	r31, 0xFE	; 254
     322:	80 81       	ld	r24, Z
     324:	85 b9       	out	0x05, r24	; 5
     326:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <p_index>
     32a:	83 30       	cpi	r24, 0x03	; 3
     32c:	19 f4       	brne	.+6      	; 0x334 <Motor_Tick+0x2a>
     32e:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <p_index>
     332:	16 c0       	rjmp	.+44     	; 0x360 <Motor_Tick+0x56>
     334:	8f 5f       	subi	r24, 0xFF	; 255
     336:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <p_index>
     33a:	12 c0       	rjmp	.+36     	; 0x360 <Motor_Tick+0x56>
     33c:	e0 91 a8 07 	lds	r30, 0x07A8	; 0x8007a8 <p_index>
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	e7 5f       	subi	r30, 0xF7	; 247
     344:	fe 4f       	sbci	r31, 0xFE	; 254
     346:	80 81       	ld	r24, Z
     348:	85 b9       	out	0x05, r24	; 5
     34a:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <p_index>
     34e:	81 11       	cpse	r24, r1
     350:	04 c0       	rjmp	.+8      	; 0x35a <Motor_Tick+0x50>
     352:	83 e0       	ldi	r24, 0x03	; 3
     354:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <p_index>
     358:	03 c0       	rjmp	.+6      	; 0x360 <Motor_Tick+0x56>
     35a:	81 50       	subi	r24, 0x01	; 1
     35c:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <p_index>
     360:	80 91 11 08 	lds	r24, 0x0811	; 0x800811 <motor_state>
     364:	81 30       	cpi	r24, 0x01	; 1
     366:	99 f0       	breq	.+38     	; 0x38e <Motor_Tick+0x84>
     368:	18 f0       	brcs	.+6      	; 0x370 <Motor_Tick+0x66>
     36a:	82 30       	cpi	r24, 0x02	; 2
     36c:	79 f1       	breq	.+94     	; 0x3cc <Motor_Tick+0xc2>
     36e:	4a c0       	rjmp	.+148    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     370:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <STEPPER_GO>
     374:	88 23       	and	r24, r24
     376:	09 f4       	brne	.+2      	; 0x37a <Motor_Tick+0x70>
     378:	47 c0       	rjmp	.+142    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	80 93 11 08 	sts	0x0811, r24	; 0x800811 <motor_state>
     380:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <p_index>
     384:	10 92 a7 07 	sts	0x07A7, r1	; 0x8007a7 <numCounter+0x1>
     388:	10 92 a6 07 	sts	0x07A6, r1	; 0x8007a6 <numCounter>
     38c:	08 95       	ret
     38e:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <numCounter>
     392:	90 91 a7 07 	lds	r25, 0x07A7	; 0x8007a7 <numCounter+0x1>
     396:	01 96       	adiw	r24, 0x01	; 1
     398:	90 93 a7 07 	sts	0x07A7, r25	; 0x8007a7 <numCounter+0x1>
     39c:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <numCounter>
     3a0:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <numPhases>
     3a4:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <numPhases+0x1>
     3a8:	82 17       	cp	r24, r18
     3aa:	93 07       	cpc	r25, r19
     3ac:	24 f4       	brge	.+8      	; 0x3b6 <Motor_Tick+0xac>
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	80 93 11 08 	sts	0x0811, r24	; 0x800811 <motor_state>
     3b4:	08 95       	ret
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	80 93 11 08 	sts	0x0811, r24	; 0x800811 <motor_state>
     3bc:	83 e0       	ldi	r24, 0x03	; 3
     3be:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <p_index>
     3c2:	10 92 a7 07 	sts	0x07A7, r1	; 0x8007a7 <numCounter+0x1>
     3c6:	10 92 a6 07 	sts	0x07A6, r1	; 0x8007a6 <numCounter>
     3ca:	08 95       	ret
     3cc:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <numCounter>
     3d0:	90 91 a7 07 	lds	r25, 0x07A7	; 0x8007a7 <numCounter+0x1>
     3d4:	01 96       	adiw	r24, 0x01	; 1
     3d6:	90 93 a7 07 	sts	0x07A7, r25	; 0x8007a7 <numCounter+0x1>
     3da:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <numCounter>
     3de:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <numPhases>
     3e2:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <numPhases+0x1>
     3e6:	82 17       	cp	r24, r18
     3e8:	93 07       	cpc	r25, r19
     3ea:	24 f4       	brge	.+8      	; 0x3f4 <Motor_Tick+0xea>
     3ec:	82 e0       	ldi	r24, 0x02	; 2
     3ee:	80 93 11 08 	sts	0x0811, r24	; 0x800811 <motor_state>
     3f2:	08 95       	ret
     3f4:	10 92 11 08 	sts	0x0811, r1	; 0x800811 <motor_state>
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <STEPPER_DONE>
     3fe:	10 92 a3 07 	sts	0x07A3, r1	; 0x8007a3 <STEPPER_GO>
     402:	08 95       	ret
     404:	10 92 11 08 	sts	0x0811, r1	; 0x800811 <motor_state>
     408:	08 95       	ret

0000040a <MotorSecTask>:
     40a:	10 92 11 08 	sts	0x0811, r1	; 0x800811 <motor_state>
     40e:	7d df       	rcall	.-262    	; 0x30a <Motor_Tick>
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 13 0b 	call	0x1626	; 0x1626 <vTaskDelay>
     418:	fa cf       	rjmp	.-12     	; 0x40e <MotorSecTask+0x4>

0000041a <MotorSecPulse>:
     41a:	af 92       	push	r10
     41c:	bf 92       	push	r11
     41e:	cf 92       	push	r12
     420:	df 92       	push	r13
     422:	ef 92       	push	r14
     424:	ff 92       	push	r15
     426:	0f 93       	push	r16
     428:	a1 2c       	mov	r10, r1
     42a:	b1 2c       	mov	r11, r1
     42c:	c1 2c       	mov	r12, r1
     42e:	d1 2c       	mov	r13, r1
     430:	e1 2c       	mov	r14, r1
     432:	f1 2c       	mov	r15, r1
     434:	08 2f       	mov	r16, r24
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	45 e5       	ldi	r20, 0x55	; 85
     43c:	50 e0       	ldi	r21, 0x00	; 0
     43e:	6f e0       	ldi	r22, 0x0F	; 15
     440:	71 e0       	ldi	r23, 0x01	; 1
     442:	85 e0       	ldi	r24, 0x05	; 5
     444:	92 e0       	ldi	r25, 0x02	; 2
     446:	77 d6       	rcall	.+3310   	; 0x1136 <xTaskGenericCreate>
     448:	0f 91       	pop	r16
     44a:	ff 90       	pop	r15
     44c:	ef 90       	pop	r14
     44e:	df 90       	pop	r13
     450:	cf 90       	pop	r12
     452:	bf 90       	pop	r11
     454:	af 90       	pop	r10
     456:	08 95       	ret

00000458 <stepper_controller_Tick>:
     458:	80 91 12 08 	lds	r24, 0x0812	; 0x800812 <stepper_controller_state>
     45c:	81 30       	cpi	r24, 0x01	; 1
     45e:	61 f0       	breq	.+24     	; 0x478 <stepper_controller_Tick+0x20>
     460:	18 f0       	brcs	.+6      	; 0x468 <stepper_controller_Tick+0x10>
     462:	82 30       	cpi	r24, 0x02	; 2
     464:	11 f1       	breq	.+68     	; 0x4aa <stepper_controller_Tick+0x52>
     466:	35 c0       	rjmp	.+106    	; 0x4d2 <stepper_controller_Tick+0x7a>
     468:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <systems_go>
     46c:	88 23       	and	r24, r24
     46e:	99 f1       	breq	.+102    	; 0x4d6 <stepper_controller_Tick+0x7e>
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	80 93 12 08 	sts	0x0812, r24	; 0x800812 <stepper_controller_state>
     476:	08 95       	ret
     478:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <systems_go>
     47c:	81 11       	cpse	r24, r1
     47e:	03 c0       	rjmp	.+6      	; 0x486 <stepper_controller_Tick+0x2e>
     480:	10 92 12 08 	sts	0x0812, r1	; 0x800812 <stepper_controller_state>
     484:	08 95       	ret
     486:	3a df       	rcall	.-396    	; 0x2fc <generate_random_num>
     488:	90 93 a5 07 	sts	0x07A5, r25	; 0x8007a5 <temp_random+0x1>
     48c:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <temp_random>
     490:	07 97       	sbiw	r24, 0x07	; 7
     492:	39 f4       	brne	.+14     	; 0x4a2 <stepper_controller_Tick+0x4a>
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	80 93 a3 07 	sts	0x07A3, r24	; 0x8007a3 <STEPPER_GO>
     49a:	82 e0       	ldi	r24, 0x02	; 2
     49c:	80 93 12 08 	sts	0x0812, r24	; 0x800812 <stepper_controller_state>
     4a0:	08 95       	ret
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	80 93 12 08 	sts	0x0812, r24	; 0x800812 <stepper_controller_state>
     4a8:	08 95       	ret
     4aa:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <STEPPER_DONE>
     4ae:	81 30       	cpi	r24, 0x01	; 1
     4b0:	91 f4       	brne	.+36     	; 0x4d6 <stepper_controller_Tick+0x7e>
     4b2:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <systems_go>
     4b6:	81 30       	cpi	r24, 0x01	; 1
     4b8:	29 f4       	brne	.+10     	; 0x4c4 <stepper_controller_Tick+0x6c>
     4ba:	10 92 a2 07 	sts	0x07A2, r1	; 0x8007a2 <STEPPER_DONE>
     4be:	80 93 12 08 	sts	0x0812, r24	; 0x800812 <stepper_controller_state>
     4c2:	08 95       	ret
     4c4:	81 11       	cpse	r24, r1
     4c6:	07 c0       	rjmp	.+14     	; 0x4d6 <stepper_controller_Tick+0x7e>
     4c8:	10 92 a2 07 	sts	0x07A2, r1	; 0x8007a2 <STEPPER_DONE>
     4cc:	10 92 12 08 	sts	0x0812, r1	; 0x800812 <stepper_controller_state>
     4d0:	08 95       	ret
     4d2:	10 92 12 08 	sts	0x0812, r1	; 0x800812 <stepper_controller_state>
     4d6:	08 95       	ret

000004d8 <stepper_controllerSecTask>:
     4d8:	10 92 12 08 	sts	0x0812, r1	; 0x800812 <stepper_controller_state>
     4dc:	bd df       	rcall	.-134    	; 0x458 <stepper_controller_Tick>
     4de:	84 ef       	ldi	r24, 0xF4	; 244
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	0e 94 13 0b 	call	0x1626	; 0x1626 <vTaskDelay>
     4e6:	fa cf       	rjmp	.-12     	; 0x4dc <stepper_controllerSecTask+0x4>

000004e8 <Start_stepper_controller_Pulse>:
     4e8:	af 92       	push	r10
     4ea:	bf 92       	push	r11
     4ec:	cf 92       	push	r12
     4ee:	df 92       	push	r13
     4f0:	ef 92       	push	r14
     4f2:	ff 92       	push	r15
     4f4:	0f 93       	push	r16
     4f6:	a1 2c       	mov	r10, r1
     4f8:	b1 2c       	mov	r11, r1
     4fa:	c1 2c       	mov	r12, r1
     4fc:	d1 2c       	mov	r13, r1
     4fe:	e1 2c       	mov	r14, r1
     500:	f1 2c       	mov	r15, r1
     502:	08 2f       	mov	r16, r24
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	45 e5       	ldi	r20, 0x55	; 85
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	6c e1       	ldi	r22, 0x1C	; 28
     50e:	71 e0       	ldi	r23, 0x01	; 1
     510:	8c e6       	ldi	r24, 0x6C	; 108
     512:	92 e0       	ldi	r25, 0x02	; 2
     514:	10 d6       	rcall	.+3104   	; 0x1136 <xTaskGenericCreate>
     516:	0f 91       	pop	r16
     518:	ff 90       	pop	r15
     51a:	ef 90       	pop	r14
     51c:	df 90       	pop	r13
     51e:	cf 90       	pop	r12
     520:	bf 90       	pop	r11
     522:	af 90       	pop	r10
     524:	08 95       	ret

00000526 <SERVO_DRIVE_Tick>:
     526:	80 91 0c 08 	lds	r24, 0x080C	; 0x80080c <servo_driver_state>
     52a:	81 11       	cpse	r24, r1
     52c:	28 c0       	rjmp	.+80     	; 0x57e <SERVO_DRIVE_Tick+0x58>
     52e:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <servo_direction>
     532:	90 91 9d 07 	lds	r25, 0x079D	; 0x80079d <servo_direction+0x1>
     536:	81 30       	cpi	r24, 0x01	; 1
     538:	91 05       	cpc	r25, r1
     53a:	51 f4       	brne	.+20     	; 0x550 <SERVO_DRIVE_Tick+0x2a>
     53c:	10 92 a1 07 	sts	0x07A1, r1	; 0x8007a1 <right>
     540:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <center>
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	80 93 a0 07 	sts	0x07A0, r24	; 0x8007a0 <left>
     54a:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <max_servo>
     54e:	19 c0       	rjmp	.+50     	; 0x582 <SERVO_DRIVE_Tick+0x5c>
     550:	02 97       	sbiw	r24, 0x02	; 2
     552:	59 f4       	brne	.+22     	; 0x56a <SERVO_DRIVE_Tick+0x44>
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <right>
     55a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <center>
     55e:	10 92 a0 07 	sts	0x07A0, r1	; 0x8007a0 <left>
     562:	82 e0       	ldi	r24, 0x02	; 2
     564:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <max_servo>
     568:	0c c0       	rjmp	.+24     	; 0x582 <SERVO_DRIVE_Tick+0x5c>
     56a:	10 92 a1 07 	sts	0x07A1, r1	; 0x8007a1 <right>
     56e:	10 92 a0 07 	sts	0x07A0, r1	; 0x8007a0 <left>
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <center>
     578:	10 92 9f 07 	sts	0x079F, r1	; 0x80079f <max_servo>
     57c:	02 c0       	rjmp	.+4      	; 0x582 <SERVO_DRIVE_Tick+0x5c>
     57e:	81 11       	cpse	r24, r1
     580:	03 c0       	rjmp	.+6      	; 0x588 <SERVO_DRIVE_Tick+0x62>
     582:	10 92 0c 08 	sts	0x080C, r1	; 0x80080c <servo_driver_state>
     586:	08 95       	ret
     588:	10 92 0c 08 	sts	0x080C, r1	; 0x80080c <servo_driver_state>
     58c:	08 95       	ret

0000058e <SERVODRIVESecTask>:
     58e:	10 92 0c 08 	sts	0x080C, r1	; 0x80080c <servo_driver_state>
     592:	c9 df       	rcall	.-110    	; 0x526 <SERVO_DRIVE_Tick>
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 13 0b 	call	0x1626	; 0x1626 <vTaskDelay>
     59c:	fa cf       	rjmp	.-12     	; 0x592 <SERVODRIVESecTask+0x4>

0000059e <SERVODRIVESecPulse>:
     59e:	af 92       	push	r10
     5a0:	bf 92       	push	r11
     5a2:	cf 92       	push	r12
     5a4:	df 92       	push	r13
     5a6:	ef 92       	push	r14
     5a8:	ff 92       	push	r15
     5aa:	0f 93       	push	r16
     5ac:	a1 2c       	mov	r10, r1
     5ae:	b1 2c       	mov	r11, r1
     5b0:	c1 2c       	mov	r12, r1
     5b2:	d1 2c       	mov	r13, r1
     5b4:	e1 2c       	mov	r14, r1
     5b6:	f1 2c       	mov	r15, r1
     5b8:	08 2f       	mov	r16, r24
     5ba:	20 e0       	ldi	r18, 0x00	; 0
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	45 e5       	ldi	r20, 0x55	; 85
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	66 e3       	ldi	r22, 0x36	; 54
     5c4:	71 e0       	ldi	r23, 0x01	; 1
     5c6:	87 ec       	ldi	r24, 0xC7	; 199
     5c8:	92 e0       	ldi	r25, 0x02	; 2
     5ca:	b5 d5       	rcall	.+2922   	; 0x1136 <xTaskGenericCreate>
     5cc:	0f 91       	pop	r16
     5ce:	ff 90       	pop	r15
     5d0:	ef 90       	pop	r14
     5d2:	df 90       	pop	r13
     5d4:	cf 90       	pop	r12
     5d6:	bf 90       	pop	r11
     5d8:	af 90       	pop	r10
     5da:	08 95       	ret

000005dc <SERVO_Tick>:
     5dc:	80 91 0f 08 	lds	r24, 0x080F	; 0x80080f <servo_state>
     5e0:	88 23       	and	r24, r24
     5e2:	19 f0       	breq	.+6      	; 0x5ea <SERVO_Tick+0xe>
     5e4:	81 30       	cpi	r24, 0x01	; 1
     5e6:	c1 f0       	breq	.+48     	; 0x618 <SERVO_Tick+0x3c>
     5e8:	36 c0       	rjmp	.+108    	; 0x656 <SERVO_Tick+0x7a>
     5ea:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <left>
     5ee:	81 11       	cpse	r24, r1
     5f0:	04 c0       	rjmp	.+8      	; 0x5fa <SERVO_Tick+0x1e>
     5f2:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <right>
     5f6:	88 23       	and	r24, r24
     5f8:	59 f0       	breq	.+22     	; 0x610 <SERVO_Tick+0x34>
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <servo_state>
     600:	10 92 9e 07 	sts	0x079E, r1	; 0x80079e <servo_counter>
     604:	40 9a       	sbi	0x08, 0	; 8
     606:	80 91 0f 08 	lds	r24, 0x080F	; 0x80080f <servo_state>
     60a:	81 30       	cpi	r24, 0x01	; 1
     60c:	39 f1       	breq	.+78     	; 0x65c <SERVO_Tick+0x80>
     60e:	08 95       	ret
     610:	40 98       	cbi	0x08, 0	; 8
     612:	10 92 0f 08 	sts	0x080F, r1	; 0x80080f <servo_state>
     616:	08 95       	ret
     618:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <servo_counter>
     61c:	90 91 9f 07 	lds	r25, 0x079F	; 0x80079f <max_servo>
     620:	89 17       	cp	r24, r25
     622:	78 f4       	brcc	.+30     	; 0x642 <SERVO_Tick+0x66>
     624:	90 91 a0 07 	lds	r25, 0x07A0	; 0x8007a0 <left>
     628:	91 11       	cpse	r25, r1
     62a:	04 c0       	rjmp	.+8      	; 0x634 <SERVO_Tick+0x58>
     62c:	90 91 a1 07 	lds	r25, 0x07A1	; 0x8007a1 <right>
     630:	99 23       	and	r25, r25
     632:	39 f0       	breq	.+14     	; 0x642 <SERVO_Tick+0x66>
     634:	8f 5f       	subi	r24, 0xFF	; 255
     636:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <servo_counter>
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <servo_state>
     640:	0d c0       	rjmp	.+26     	; 0x65c <SERVO_Tick+0x80>
     642:	10 92 a0 07 	sts	0x07A0, r1	; 0x8007a0 <left>
     646:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <center>
     64a:	10 92 a1 07 	sts	0x07A1, r1	; 0x8007a1 <right>
     64e:	40 98       	cbi	0x08, 0	; 8
     650:	10 92 0f 08 	sts	0x080F, r1	; 0x80080f <servo_state>
     654:	08 95       	ret
     656:	10 92 0f 08 	sts	0x080F, r1	; 0x80080f <servo_state>
     65a:	08 95       	ret
     65c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <center>
     660:	88 23       	and	r24, r24
     662:	49 f0       	breq	.+18     	; 0x676 <SERVO_Tick+0x9a>
     664:	10 92 a0 07 	sts	0x07A0, r1	; 0x8007a0 <left>
     668:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <center>
     66c:	10 92 a1 07 	sts	0x07A1, r1	; 0x8007a1 <right>
     670:	40 98       	cbi	0x08, 0	; 8
     672:	10 92 0f 08 	sts	0x080F, r1	; 0x80080f <servo_state>
     676:	08 95       	ret

00000678 <SERVOSecTask>:
     678:	10 92 0f 08 	sts	0x080F, r1	; 0x80080f <servo_state>
     67c:	af df       	rcall	.-162    	; 0x5dc <SERVO_Tick>
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	d1 d7       	rcall	.+4002   	; 0x1626 <vTaskDelay>
     684:	fb cf       	rjmp	.-10     	; 0x67c <SERVOSecTask+0x4>

00000686 <SERVOSecPulse>:
     686:	af 92       	push	r10
     688:	bf 92       	push	r11
     68a:	cf 92       	push	r12
     68c:	df 92       	push	r13
     68e:	ef 92       	push	r14
     690:	ff 92       	push	r15
     692:	0f 93       	push	r16
     694:	a1 2c       	mov	r10, r1
     696:	b1 2c       	mov	r11, r1
     698:	c1 2c       	mov	r12, r1
     69a:	d1 2c       	mov	r13, r1
     69c:	e1 2c       	mov	r14, r1
     69e:	f1 2c       	mov	r15, r1
     6a0:	08 2f       	mov	r16, r24
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	45 e5       	ldi	r20, 0x55	; 85
     6a8:	50 e0       	ldi	r21, 0x00	; 0
     6aa:	68 e4       	ldi	r22, 0x48	; 72
     6ac:	71 e0       	ldi	r23, 0x01	; 1
     6ae:	8c e3       	ldi	r24, 0x3C	; 60
     6b0:	93 e0       	ldi	r25, 0x03	; 3
     6b2:	41 d5       	rcall	.+2690   	; 0x1136 <xTaskGenericCreate>
     6b4:	0f 91       	pop	r16
     6b6:	ff 90       	pop	r15
     6b8:	ef 90       	pop	r14
     6ba:	df 90       	pop	r13
     6bc:	cf 90       	pop	r12
     6be:	bf 90       	pop	r11
     6c0:	af 90       	pop	r10
     6c2:	08 95       	ret

000006c4 <servo_controller_Tick>:
     6c4:	80 91 13 08 	lds	r24, 0x0813	; 0x800813 <servo_controller_state>
     6c8:	81 30       	cpi	r24, 0x01	; 1
     6ca:	69 f0       	breq	.+26     	; 0x6e6 <servo_controller_Tick+0x22>
     6cc:	18 f0       	brcs	.+6      	; 0x6d4 <servo_controller_Tick+0x10>
     6ce:	82 30       	cpi	r24, 0x02	; 2
     6d0:	89 f1       	breq	.+98     	; 0x734 <servo_controller_Tick+0x70>
     6d2:	54 c0       	rjmp	.+168    	; 0x77c <servo_controller_Tick+0xb8>
     6d4:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <systems_go>
     6d8:	88 23       	and	r24, r24
     6da:	09 f4       	brne	.+2      	; 0x6de <servo_controller_Tick+0x1a>
     6dc:	51 c0       	rjmp	.+162    	; 0x780 <servo_controller_Tick+0xbc>
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <servo_controller_state>
     6e4:	08 95       	ret
     6e6:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <systems_go>
     6ea:	81 11       	cpse	r24, r1
     6ec:	03 c0       	rjmp	.+6      	; 0x6f4 <servo_controller_Tick+0x30>
     6ee:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <servo_controller_state>
     6f2:	08 95       	ret
     6f4:	03 de       	rcall	.-1018   	; 0x2fc <generate_random_num>
     6f6:	90 93 9b 07 	sts	0x079B, r25	; 0x80079b <temp_random2+0x1>
     6fa:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <temp_random2>
     6fe:	08 97       	sbiw	r24, 0x08	; 8
     700:	ac f0       	brlt	.+42     	; 0x72c <servo_controller_Tick+0x68>
     702:	82 e0       	ldi	r24, 0x02	; 2
     704:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <servo_controller_state>
     708:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <head_movement>
     70c:	81 30       	cpi	r24, 0x01	; 1
     70e:	39 f4       	brne	.+14     	; 0x71e <servo_controller_Tick+0x5a>
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	90 93 9d 07 	sts	0x079D, r25	; 0x80079d <servo_direction+0x1>
     718:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <servo_direction>
     71c:	08 95       	ret
     71e:	82 e0       	ldi	r24, 0x02	; 2
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	90 93 9d 07 	sts	0x079D, r25	; 0x80079d <servo_direction+0x1>
     726:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <servo_direction>
     72a:	08 95       	ret
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <servo_controller_state>
     732:	08 95       	ret
     734:	e3 dd       	rcall	.-1082   	; 0x2fc <generate_random_num>
     736:	90 93 9b 07 	sts	0x079B, r25	; 0x80079b <temp_random2+0x1>
     73a:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <temp_random2>
     73e:	03 97       	sbiw	r24, 0x03	; 3
     740:	24 f4       	brge	.+8      	; 0x74a <servo_controller_Tick+0x86>
     742:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <systems_go>
     746:	81 11       	cpse	r24, r1
     748:	15 c0       	rjmp	.+42     	; 0x774 <servo_controller_Tick+0xb0>
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <servo_controller_state>
     750:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <head_movement>
     754:	81 30       	cpi	r24, 0x01	; 1
     756:	39 f4       	brne	.+14     	; 0x766 <servo_controller_Tick+0xa2>
     758:	82 e0       	ldi	r24, 0x02	; 2
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	90 93 9d 07 	sts	0x079D, r25	; 0x80079d <servo_direction+0x1>
     760:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <servo_direction>
     764:	08 95       	ret
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	90 93 9d 07 	sts	0x079D, r25	; 0x80079d <servo_direction+0x1>
     76e:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <servo_direction>
     772:	08 95       	ret
     774:	82 e0       	ldi	r24, 0x02	; 2
     776:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <servo_controller_state>
     77a:	08 95       	ret
     77c:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <servo_controller_state>
     780:	08 95       	ret

00000782 <servo_controllerSecTask>:
     782:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <servo_controller_state>
     786:	9e df       	rcall	.-196    	; 0x6c4 <servo_controller_Tick>
     788:	84 ef       	ldi	r24, 0xF4	; 244
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	4c d7       	rcall	.+3736   	; 0x1626 <vTaskDelay>
     78e:	fb cf       	rjmp	.-10     	; 0x786 <servo_controllerSecTask+0x4>

00000790 <Start_servo_controller_Pulse>:
     790:	af 92       	push	r10
     792:	bf 92       	push	r11
     794:	cf 92       	push	r12
     796:	df 92       	push	r13
     798:	ef 92       	push	r14
     79a:	ff 92       	push	r15
     79c:	0f 93       	push	r16
     79e:	a1 2c       	mov	r10, r1
     7a0:	b1 2c       	mov	r11, r1
     7a2:	c1 2c       	mov	r12, r1
     7a4:	d1 2c       	mov	r13, r1
     7a6:	e1 2c       	mov	r14, r1
     7a8:	f1 2c       	mov	r15, r1
     7aa:	08 2f       	mov	r16, r24
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	45 e5       	ldi	r20, 0x55	; 85
     7b2:	50 e0       	ldi	r21, 0x00	; 0
     7b4:	65 e5       	ldi	r22, 0x55	; 85
     7b6:	71 e0       	ldi	r23, 0x01	; 1
     7b8:	81 ec       	ldi	r24, 0xC1	; 193
     7ba:	93 e0       	ldi	r25, 0x03	; 3
     7bc:	bc d4       	rcall	.+2424   	; 0x1136 <xTaskGenericCreate>
     7be:	0f 91       	pop	r16
     7c0:	ff 90       	pop	r15
     7c2:	ef 90       	pop	r14
     7c4:	df 90       	pop	r13
     7c6:	cf 90       	pop	r12
     7c8:	bf 90       	pop	r11
     7ca:	af 90       	pop	r10
     7cc:	08 95       	ret

000007ce <Audio_Tick>:
     7ce:	80 91 10 08 	lds	r24, 0x0810	; 0x800810 <audio_state>
     7d2:	88 23       	and	r24, r24
     7d4:	19 f0       	breq	.+6      	; 0x7dc <Audio_Tick+0xe>
     7d6:	81 30       	cpi	r24, 0x01	; 1
     7d8:	29 f0       	breq	.+10     	; 0x7e4 <Audio_Tick+0x16>
     7da:	0b c0       	rjmp	.+22     	; 0x7f2 <Audio_Tick+0x24>
     7dc:	88 b1       	in	r24, 0x08	; 8
     7de:	8c 60       	ori	r24, 0x0C	; 12
     7e0:	88 b9       	out	0x08, r24	; 8
     7e2:	07 c0       	rjmp	.+14     	; 0x7f2 <Audio_Tick+0x24>
     7e4:	80 91 ae 07 	lds	r24, 0x07AE	; 0x8007ae <bark_setting>
     7e8:	81 30       	cpi	r24, 0x01	; 1
     7ea:	11 f4       	brne	.+4      	; 0x7f0 <Audio_Tick+0x22>
     7ec:	43 98       	cbi	0x08, 3	; 8
     7ee:	01 c0       	rjmp	.+2      	; 0x7f2 <Audio_Tick+0x24>
     7f0:	42 98       	cbi	0x08, 2	; 8
     7f2:	80 91 10 08 	lds	r24, 0x0810	; 0x800810 <audio_state>
     7f6:	88 23       	and	r24, r24
     7f8:	19 f0       	breq	.+6      	; 0x800 <Audio_Tick+0x32>
     7fa:	81 30       	cpi	r24, 0x01	; 1
     7fc:	41 f0       	breq	.+16     	; 0x80e <Audio_Tick+0x40>
     7fe:	0e c0       	rjmp	.+28     	; 0x81c <Audio_Tick+0x4e>
     800:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <systems_go>
     804:	81 30       	cpi	r24, 0x01	; 1
     806:	61 f4       	brne	.+24     	; 0x820 <Audio_Tick+0x52>
     808:	80 93 10 08 	sts	0x0810, r24	; 0x800810 <audio_state>
     80c:	08 95       	ret
     80e:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <systems_go>
     812:	81 30       	cpi	r24, 0x01	; 1
     814:	29 f0       	breq	.+10     	; 0x820 <Audio_Tick+0x52>
     816:	10 92 10 08 	sts	0x0810, r1	; 0x800810 <audio_state>
     81a:	08 95       	ret
     81c:	10 92 10 08 	sts	0x0810, r1	; 0x800810 <audio_state>
     820:	08 95       	ret

00000822 <AudioSecTask>:
     822:	10 92 10 08 	sts	0x0810, r1	; 0x800810 <audio_state>
     826:	d3 df       	rcall	.-90     	; 0x7ce <Audio_Tick>
     828:	8a e0       	ldi	r24, 0x0A	; 10
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	fc d6       	rcall	.+3576   	; 0x1626 <vTaskDelay>
     82e:	fb cf       	rjmp	.-10     	; 0x826 <AudioSecTask+0x4>

00000830 <StartAudioPulse>:
     830:	af 92       	push	r10
     832:	bf 92       	push	r11
     834:	cf 92       	push	r12
     836:	df 92       	push	r13
     838:	ef 92       	push	r14
     83a:	ff 92       	push	r15
     83c:	0f 93       	push	r16
     83e:	a1 2c       	mov	r10, r1
     840:	b1 2c       	mov	r11, r1
     842:	c1 2c       	mov	r12, r1
     844:	d1 2c       	mov	r13, r1
     846:	e1 2c       	mov	r14, r1
     848:	f1 2c       	mov	r15, r1
     84a:	08 2f       	mov	r16, r24
     84c:	20 e0       	ldi	r18, 0x00	; 0
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	45 e5       	ldi	r20, 0x55	; 85
     852:	50 e0       	ldi	r21, 0x00	; 0
     854:	6d e6       	ldi	r22, 0x6D	; 109
     856:	71 e0       	ldi	r23, 0x01	; 1
     858:	81 e1       	ldi	r24, 0x11	; 17
     85a:	94 e0       	ldi	r25, 0x04	; 4
     85c:	6c d4       	rcall	.+2264   	; 0x1136 <xTaskGenericCreate>
     85e:	0f 91       	pop	r16
     860:	ff 90       	pop	r15
     862:	ef 90       	pop	r14
     864:	df 90       	pop	r13
     866:	cf 90       	pop	r12
     868:	bf 90       	pop	r11
     86a:	af 90       	pop	r10
     86c:	08 95       	ret

0000086e <Beam_Tick>:
     86e:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <beam_state>
     872:	88 23       	and	r24, r24
     874:	19 f0       	breq	.+6      	; 0x87c <Beam_Tick+0xe>
     876:	81 30       	cpi	r24, 0x01	; 1
     878:	21 f0       	breq	.+8      	; 0x882 <Beam_Tick+0x14>
     87a:	0c c0       	rjmp	.+24     	; 0x894 <Beam_Tick+0x26>
     87c:	10 92 99 07 	sts	0x0799, r1	; 0x800799 <beam_detected>
     880:	0e c0       	rjmp	.+28     	; 0x89e <Beam_Tick+0x30>
     882:	00 99       	sbic	0x00, 0	; 0
     884:	04 c0       	rjmp	.+8      	; 0x88e <Beam_Tick+0x20>
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	80 93 99 07 	sts	0x0799, r24	; 0x800799 <beam_detected>
     88c:	12 c0       	rjmp	.+36     	; 0x8b2 <Beam_Tick+0x44>
     88e:	10 92 99 07 	sts	0x0799, r1	; 0x800799 <beam_detected>
     892:	0f c0       	rjmp	.+30     	; 0x8b2 <Beam_Tick+0x44>
     894:	88 23       	and	r24, r24
     896:	19 f0       	breq	.+6      	; 0x89e <Beam_Tick+0x30>
     898:	81 30       	cpi	r24, 0x01	; 1
     89a:	a9 f4       	brne	.+42     	; 0x8c6 <Beam_Tick+0x58>
     89c:	0a c0       	rjmp	.+20     	; 0x8b2 <Beam_Tick+0x44>
     89e:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <ARM_DISARM>
     8a2:	81 30       	cpi	r24, 0x01	; 1
     8a4:	19 f4       	brne	.+6      	; 0x8ac <Beam_Tick+0x3e>
     8a6:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <beam_state>
     8aa:	08 95       	ret
     8ac:	10 92 14 08 	sts	0x0814, r1	; 0x800814 <beam_state>
     8b0:	08 95       	ret
     8b2:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <ARM_DISARM>
     8b6:	81 30       	cpi	r24, 0x01	; 1
     8b8:	19 f4       	brne	.+6      	; 0x8c0 <Beam_Tick+0x52>
     8ba:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <beam_state>
     8be:	08 95       	ret
     8c0:	10 92 14 08 	sts	0x0814, r1	; 0x800814 <beam_state>
     8c4:	08 95       	ret
     8c6:	10 92 14 08 	sts	0x0814, r1	; 0x800814 <beam_state>
     8ca:	08 95       	ret

000008cc <BEAMSecTask>:
     8cc:	10 92 14 08 	sts	0x0814, r1	; 0x800814 <beam_state>
     8d0:	ce df       	rcall	.-100    	; 0x86e <Beam_Tick>
     8d2:	8a e0       	ldi	r24, 0x0A	; 10
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	a7 d6       	rcall	.+3406   	; 0x1626 <vTaskDelay>
     8d8:	fb cf       	rjmp	.-10     	; 0x8d0 <BEAMSecTask+0x4>

000008da <StartBeamPulse>:
     8da:	af 92       	push	r10
     8dc:	bf 92       	push	r11
     8de:	cf 92       	push	r12
     8e0:	df 92       	push	r13
     8e2:	ef 92       	push	r14
     8e4:	ff 92       	push	r15
     8e6:	0f 93       	push	r16
     8e8:	a1 2c       	mov	r10, r1
     8ea:	b1 2c       	mov	r11, r1
     8ec:	c1 2c       	mov	r12, r1
     8ee:	d1 2c       	mov	r13, r1
     8f0:	e1 2c       	mov	r14, r1
     8f2:	f1 2c       	mov	r15, r1
     8f4:	08 2f       	mov	r16, r24
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	45 e5       	ldi	r20, 0x55	; 85
     8fc:	50 e0       	ldi	r21, 0x00	; 0
     8fe:	6a e7       	ldi	r22, 0x7A	; 122
     900:	71 e0       	ldi	r23, 0x01	; 1
     902:	86 e6       	ldi	r24, 0x66	; 102
     904:	94 e0       	ldi	r25, 0x04	; 4
     906:	17 d4       	rcall	.+2094   	; 0x1136 <xTaskGenericCreate>
     908:	0f 91       	pop	r16
     90a:	ff 90       	pop	r15
     90c:	ef 90       	pop	r14
     90e:	df 90       	pop	r13
     910:	cf 90       	pop	r12
     912:	bf 90       	pop	r11
     914:	af 90       	pop	r10
     916:	08 95       	ret

00000918 <Motion_Tick>:
     918:	80 91 0b 08 	lds	r24, 0x080B	; 0x80080b <motion_state>
     91c:	88 23       	and	r24, r24
     91e:	19 f0       	breq	.+6      	; 0x926 <Motion_Tick+0xe>
     920:	82 30       	cpi	r24, 0x02	; 2
     922:	59 f0       	breq	.+22     	; 0x93a <Motion_Tick+0x22>
     924:	13 c0       	rjmp	.+38     	; 0x94c <Motion_Tick+0x34>
     926:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <motion_boot_cnt>
     92a:	90 91 97 07 	lds	r25, 0x0797	; 0x800797 <motion_boot_cnt+0x1>
     92e:	01 96       	adiw	r24, 0x01	; 1
     930:	90 93 97 07 	sts	0x0797, r25	; 0x800797 <motion_boot_cnt+0x1>
     934:	80 93 96 07 	sts	0x0796, r24	; 0x800796 <motion_boot_cnt>
     938:	0f c0       	rjmp	.+30     	; 0x958 <Motion_Tick+0x40>
     93a:	02 9b       	sbis	0x00, 2	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <Motion_Tick+0x2e>
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	80 93 98 07 	sts	0x0798, r24	; 0x800798 <motion_detected>
     944:	25 c0       	rjmp	.+74     	; 0x990 <Motion_Tick+0x78>
     946:	10 92 98 07 	sts	0x0798, r1	; 0x800798 <motion_detected>
     94a:	22 c0       	rjmp	.+68     	; 0x990 <Motion_Tick+0x78>
     94c:	81 30       	cpi	r24, 0x01	; 1
     94e:	b1 f0       	breq	.+44     	; 0x97c <Motion_Tick+0x64>
     950:	18 f0       	brcs	.+6      	; 0x958 <Motion_Tick+0x40>
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	49 f5       	brne	.+82     	; 0x9a8 <Motion_Tick+0x90>
     956:	1c c0       	rjmp	.+56     	; 0x990 <Motion_Tick+0x78>
     958:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <motion_boot_cnt>
     95c:	90 91 97 07 	lds	r25, 0x0797	; 0x800797 <motion_boot_cnt+0x1>
     960:	80 32       	cpi	r24, 0x20	; 32
     962:	9e 44       	sbci	r25, 0x4E	; 78
     964:	1c f4       	brge	.+6      	; 0x96c <Motion_Tick+0x54>
     966:	10 92 0b 08 	sts	0x080B, r1	; 0x80080b <motion_state>
     96a:	08 95       	ret
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	80 93 0b 08 	sts	0x080B, r24	; 0x80080b <motion_state>
     972:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <motion_boot_cnt+0x1>
     976:	10 92 96 07 	sts	0x0796, r1	; 0x800796 <motion_boot_cnt>
     97a:	08 95       	ret
     97c:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <ARM_DISARM>
     980:	81 30       	cpi	r24, 0x01	; 1
     982:	a9 f4       	brne	.+42     	; 0x9ae <Motion_Tick+0x96>
     984:	10 92 98 07 	sts	0x0798, r1	; 0x800798 <motion_detected>
     988:	82 e0       	ldi	r24, 0x02	; 2
     98a:	80 93 0b 08 	sts	0x080B, r24	; 0x80080b <motion_state>
     98e:	08 95       	ret
     990:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <ARM_DISARM>
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	21 f4       	brne	.+8      	; 0x9a0 <Motion_Tick+0x88>
     998:	82 e0       	ldi	r24, 0x02	; 2
     99a:	80 93 0b 08 	sts	0x080B, r24	; 0x80080b <motion_state>
     99e:	08 95       	ret
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	80 93 0b 08 	sts	0x080B, r24	; 0x80080b <motion_state>
     9a6:	08 95       	ret
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	80 93 0b 08 	sts	0x080B, r24	; 0x80080b <motion_state>
     9ae:	08 95       	ret

000009b0 <MotionSecTask>:
     9b0:	10 92 0b 08 	sts	0x080B, r1	; 0x80080b <motion_state>
     9b4:	b1 df       	rcall	.-158    	; 0x918 <Motion_Tick>
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	35 d6       	rcall	.+3178   	; 0x1626 <vTaskDelay>
     9bc:	fb cf       	rjmp	.-10     	; 0x9b4 <MotionSecTask+0x4>

000009be <StartMotionPulse>:
     9be:	af 92       	push	r10
     9c0:	bf 92       	push	r11
     9c2:	cf 92       	push	r12
     9c4:	df 92       	push	r13
     9c6:	ef 92       	push	r14
     9c8:	ff 92       	push	r15
     9ca:	0f 93       	push	r16
     9cc:	a1 2c       	mov	r10, r1
     9ce:	b1 2c       	mov	r11, r1
     9d0:	c1 2c       	mov	r12, r1
     9d2:	d1 2c       	mov	r13, r1
     9d4:	e1 2c       	mov	r14, r1
     9d6:	f1 2c       	mov	r15, r1
     9d8:	08 2f       	mov	r16, r24
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	45 e5       	ldi	r20, 0x55	; 85
     9e0:	50 e0       	ldi	r21, 0x00	; 0
     9e2:	66 e8       	ldi	r22, 0x86	; 134
     9e4:	71 e0       	ldi	r23, 0x01	; 1
     9e6:	88 ed       	ldi	r24, 0xD8	; 216
     9e8:	94 e0       	ldi	r25, 0x04	; 4
     9ea:	a5 d3       	rcall	.+1866   	; 0x1136 <xTaskGenericCreate>
     9ec:	0f 91       	pop	r16
     9ee:	ff 90       	pop	r15
     9f0:	ef 90       	pop	r14
     9f2:	df 90       	pop	r13
     9f4:	cf 90       	pop	r12
     9f6:	bf 90       	pop	r11
     9f8:	af 90       	pop	r10
     9fa:	08 95       	ret

000009fc <Control_Tick>:
     9fc:	80 91 0d 08 	lds	r24, 0x080D	; 0x80080d <control_state>
     a00:	83 30       	cpi	r24, 0x03	; 3
     a02:	09 f4       	brne	.+2      	; 0xa06 <Control_Tick+0xa>
     a04:	49 c0       	rjmp	.+146    	; 0xa98 <Control_Tick+0x9c>
     a06:	28 f4       	brcc	.+10     	; 0xa12 <Control_Tick+0x16>
     a08:	88 23       	and	r24, r24
     a0a:	61 f0       	breq	.+24     	; 0xa24 <Control_Tick+0x28>
     a0c:	81 30       	cpi	r24, 0x01	; 1
     a0e:	99 f0       	breq	.+38     	; 0xa36 <Control_Tick+0x3a>
     a10:	78 c0       	rjmp	.+240    	; 0xb02 <Control_Tick+0x106>
     a12:	85 30       	cpi	r24, 0x05	; 5
     a14:	09 f4       	brne	.+2      	; 0xa18 <Control_Tick+0x1c>
     a16:	58 c0       	rjmp	.+176    	; 0xac8 <Control_Tick+0xcc>
     a18:	08 f4       	brcc	.+2      	; 0xa1c <Control_Tick+0x20>
     a1a:	48 c0       	rjmp	.+144    	; 0xaac <Control_Tick+0xb0>
     a1c:	86 30       	cpi	r24, 0x06	; 6
     a1e:	09 f4       	brne	.+2      	; 0xa22 <Control_Tick+0x26>
     a20:	63 c0       	rjmp	.+198    	; 0xae8 <Control_Tick+0xec>
     a22:	6f c0       	rjmp	.+222    	; 0xb02 <Control_Tick+0x106>
     a24:	85 b1       	in	r24, 0x05	; 5
     a26:	8f 70       	andi	r24, 0x0F	; 15
     a28:	85 b9       	out	0x05, r24	; 5
     a2a:	85 b1       	in	r24, 0x05	; 5
     a2c:	80 6f       	ori	r24, 0xF0	; 240
     a2e:	85 b9       	out	0x05, r24	; 5
     a30:	10 92 ac 07 	sts	0x07AC, r1	; 0x8007ac <systems_go>
     a34:	66 c0       	rjmp	.+204    	; 0xb02 <Control_Tick+0x106>
     a36:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <random_seed_val>
     a3a:	90 91 ab 07 	lds	r25, 0x07AB	; 0x8007ab <random_seed_val+0x1>
     a3e:	01 96       	adiw	r24, 0x01	; 1
     a40:	8f 30       	cpi	r24, 0x0F	; 15
     a42:	27 e2       	ldi	r18, 0x27	; 39
     a44:	92 07       	cpc	r25, r18
     a46:	2c f4       	brge	.+10     	; 0xa52 <Control_Tick+0x56>
     a48:	90 93 ab 07 	sts	0x07AB, r25	; 0x8007ab <random_seed_val+0x1>
     a4c:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <random_seed_val>
     a50:	04 c0       	rjmp	.+8      	; 0xa5a <Control_Tick+0x5e>
     a52:	10 92 ab 07 	sts	0x07AB, r1	; 0x8007ab <random_seed_val+0x1>
     a56:	10 92 aa 07 	sts	0x07AA, r1	; 0x8007aa <random_seed_val>
     a5a:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <delay_timing>
     a5e:	81 11       	cpse	r24, r1
     a60:	07 c0       	rjmp	.+14     	; 0xa70 <Control_Tick+0x74>
     a62:	85 e0       	ldi	r24, 0x05	; 5
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <delay_sec+0x1>
     a6a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <delay_sec>
     a6e:	0f c0       	rjmp	.+30     	; 0xa8e <Control_Tick+0x92>
     a70:	81 30       	cpi	r24, 0x01	; 1
     a72:	39 f4       	brne	.+14     	; 0xa82 <Control_Tick+0x86>
     a74:	8a e0       	ldi	r24, 0x0A	; 10
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <delay_sec+0x1>
     a7c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <delay_sec>
     a80:	06 c0       	rjmp	.+12     	; 0xa8e <Control_Tick+0x92>
     a82:	8f e0       	ldi	r24, 0x0F	; 15
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <delay_sec+0x1>
     a8a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <delay_sec>
     a8e:	85 b1       	in	r24, 0x05	; 5
     a90:	8f 70       	andi	r24, 0x0F	; 15
     a92:	85 b9       	out	0x05, r24	; 5
     a94:	2c 9a       	sbi	0x05, 4	; 5
     a96:	35 c0       	rjmp	.+106    	; 0xb02 <Control_Tick+0x106>
     a98:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <vishal_counter>
     a9c:	90 91 93 07 	lds	r25, 0x0793	; 0x800793 <vishal_counter+0x1>
     aa0:	01 96       	adiw	r24, 0x01	; 1
     aa2:	90 93 93 07 	sts	0x0793, r25	; 0x800793 <vishal_counter+0x1>
     aa6:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <vishal_counter>
     aaa:	8c c0       	rjmp	.+280    	; 0xbc4 <Control_Tick+0x1c8>
     aac:	85 b1       	in	r24, 0x05	; 5
     aae:	8f 70       	andi	r24, 0x0F	; 15
     ab0:	85 b9       	out	0x05, r24	; 5
     ab2:	2d 9a       	sbi	0x05, 5	; 5
     ab4:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <controll_counter>
     ab8:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <controll_counter+0x1>
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	90 93 95 07 	sts	0x0795, r25	; 0x800795 <controll_counter+0x1>
     ac2:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <controll_counter>
     ac6:	1d c0       	rjmp	.+58     	; 0xb02 <Control_Tick+0x106>
     ac8:	85 b1       	in	r24, 0x05	; 5
     aca:	8f 70       	andi	r24, 0x0F	; 15
     acc:	85 b9       	out	0x05, r24	; 5
     ace:	85 b1       	in	r24, 0x05	; 5
     ad0:	80 63       	ori	r24, 0x30	; 48
     ad2:	85 b9       	out	0x05, r24	; 5
     ad4:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <controll_counter>
     ad8:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <controll_counter+0x1>
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	90 93 95 07 	sts	0x0795, r25	; 0x800795 <controll_counter+0x1>
     ae2:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <controll_counter>
     ae6:	0d c0       	rjmp	.+26     	; 0xb02 <Control_Tick+0x106>
     ae8:	85 b1       	in	r24, 0x05	; 5
     aea:	8f 70       	andi	r24, 0x0F	; 15
     aec:	85 b9       	out	0x05, r24	; 5
     aee:	2e 9a       	sbi	0x05, 6	; 5
     af0:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <controll_counter>
     af4:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <controll_counter+0x1>
     af8:	01 96       	adiw	r24, 0x01	; 1
     afa:	90 93 95 07 	sts	0x0795, r25	; 0x800795 <controll_counter+0x1>
     afe:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <controll_counter>
     b02:	e0 91 0d 08 	lds	r30, 0x080D	; 0x80080d <control_state>
     b06:	8e 2f       	mov	r24, r30
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	87 30       	cpi	r24, 0x07	; 7
     b0c:	91 05       	cpc	r25, r1
     b0e:	08 f0       	brcs	.+2      	; 0xb12 <Control_Tick+0x116>
     b10:	d5 c0       	rjmp	.+426    	; 0xcbc <Control_Tick+0x2c0>
     b12:	fc 01       	movw	r30, r24
     b14:	ea 5b       	subi	r30, 0xBA	; 186
     b16:	ff 4f       	sbci	r31, 0xFF	; 255
     b18:	5a c6       	rjmp	.+3252   	; 0x17ce <__tablejump2__>
     b1a:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <ARM_DISARM>
     b1e:	81 30       	cpi	r24, 0x01	; 1
     b20:	09 f0       	breq	.+2      	; 0xb24 <Control_Tick+0x128>
     b22:	cc c0       	rjmp	.+408    	; 0xcbc <Control_Tick+0x2c0>
     b24:	80 93 0d 08 	sts	0x080D, r24	; 0x80080d <control_state>
     b28:	10 92 ac 07 	sts	0x07AC, r1	; 0x8007ac <systems_go>
     b2c:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <controll_counter+0x1>
     b30:	10 92 94 07 	sts	0x0794, r1	; 0x800794 <controll_counter>
     b34:	10 92 93 07 	sts	0x0793, r1	; 0x800793 <vishal_counter+0x1>
     b38:	10 92 92 07 	sts	0x0792, r1	; 0x800792 <vishal_counter>
     b3c:	10 92 ab 07 	sts	0x07AB, r1	; 0x8007ab <random_seed_val+0x1>
     b40:	10 92 aa 07 	sts	0x07AA, r1	; 0x8007aa <random_seed_val>
     b44:	08 95       	ret
     b46:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <ARM_DISARM>
     b4a:	81 11       	cpse	r24, r1
     b4c:	03 c0       	rjmp	.+6      	; 0xb54 <Control_Tick+0x158>
     b4e:	10 92 0d 08 	sts	0x080D, r1	; 0x80080d <control_state>
     b52:	08 95       	ret
     b54:	80 b1       	in	r24, 0x00	; 0
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	88 0f       	add	r24, r24
     b5a:	89 2f       	mov	r24, r25
     b5c:	88 1f       	adc	r24, r24
     b5e:	99 0b       	sbc	r25, r25
     b60:	91 95       	neg	r25
     b62:	89 2b       	or	r24, r25
     b64:	41 f0       	breq	.+16     	; 0xb76 <Control_Tick+0x17a>
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	80 93 0d 08 	sts	0x080D, r24	; 0x80080d <control_state>
     b6c:	10 92 93 07 	sts	0x0793, r1	; 0x800793 <vishal_counter+0x1>
     b70:	10 92 92 07 	sts	0x0792, r1	; 0x800792 <vishal_counter>
     b74:	08 95       	ret
     b76:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <motion_detected>
     b7a:	81 30       	cpi	r24, 0x01	; 1
     b7c:	09 f0       	breq	.+2      	; 0xb80 <Control_Tick+0x184>
     b7e:	9e c0       	rjmp	.+316    	; 0xcbc <Control_Tick+0x2c0>
     b80:	84 e0       	ldi	r24, 0x04	; 4
     b82:	80 93 0d 08 	sts	0x080D, r24	; 0x80080d <control_state>
     b86:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <controll_counter+0x1>
     b8a:	10 92 94 07 	sts	0x0794, r1	; 0x800794 <controll_counter>
     b8e:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <random_seed_val>
     b92:	90 91 ab 07 	lds	r25, 0x07AB	; 0x8007ab <random_seed_val+0x1>
     b96:	82 c6       	rjmp	.+3332   	; 0x189c <srand>
     b98:	08 95       	ret
     b9a:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <ARM_DISARM>
     b9e:	81 11       	cpse	r24, r1
     ba0:	03 c0       	rjmp	.+6      	; 0xba8 <Control_Tick+0x1ac>
     ba2:	10 92 0d 08 	sts	0x080D, r1	; 0x80080d <control_state>
     ba6:	08 95       	ret
     ba8:	80 b1       	in	r24, 0x00	; 0
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	88 0f       	add	r24, r24
     bae:	89 2f       	mov	r24, r25
     bb0:	88 1f       	adc	r24, r24
     bb2:	99 0b       	sbc	r25, r25
     bb4:	91 95       	neg	r25
     bb6:	89 2b       	or	r24, r25
     bb8:	09 f0       	breq	.+2      	; 0xbbc <Control_Tick+0x1c0>
     bba:	80 c0       	rjmp	.+256    	; 0xcbc <Control_Tick+0x2c0>
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	80 93 0d 08 	sts	0x080D, r24	; 0x80080d <control_state>
     bc2:	08 95       	ret
     bc4:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <ARM_DISARM>
     bc8:	81 11       	cpse	r24, r1
     bca:	03 c0       	rjmp	.+6      	; 0xbd2 <Control_Tick+0x1d6>
     bcc:	10 92 0d 08 	sts	0x080D, r1	; 0x80080d <control_state>
     bd0:	08 95       	ret
     bd2:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <vishal_counter>
     bd6:	90 91 93 07 	lds	r25, 0x0793	; 0x800793 <vishal_counter+0x1>
     bda:	88 38       	cpi	r24, 0x88	; 136
     bdc:	93 41       	sbci	r25, 0x13	; 19
     bde:	0c f4       	brge	.+2      	; 0xbe2 <Control_Tick+0x1e6>
     be0:	6d c0       	rjmp	.+218    	; 0xcbc <Control_Tick+0x2c0>
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	80 93 0d 08 	sts	0x080D, r24	; 0x80080d <control_state>
     be8:	08 95       	ret
     bea:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <ARM_DISARM>
     bee:	81 11       	cpse	r24, r1
     bf0:	03 c0       	rjmp	.+6      	; 0xbf8 <Control_Tick+0x1fc>
     bf2:	10 92 0d 08 	sts	0x080D, r1	; 0x80080d <control_state>
     bf6:	08 95       	ret
     bf8:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <motion_detected>
     bfc:	81 30       	cpi	r24, 0x01	; 1
     bfe:	59 f4       	brne	.+22     	; 0xc16 <Control_Tick+0x21a>
     c00:	80 91 99 07 	lds	r24, 0x0799	; 0x800799 <beam_detected>
     c04:	88 23       	and	r24, r24
     c06:	09 f4       	brne	.+2      	; 0xc0a <Control_Tick+0x20e>
     c08:	59 c0       	rjmp	.+178    	; 0xcbc <Control_Tick+0x2c0>
     c0a:	81 30       	cpi	r24, 0x01	; 1
     c0c:	21 f4       	brne	.+8      	; 0xc16 <Control_Tick+0x21a>
     c0e:	85 e0       	ldi	r24, 0x05	; 5
     c10:	80 93 0d 08 	sts	0x080D, r24	; 0x80080d <control_state>
     c14:	08 95       	ret
     c16:	10 92 0d 08 	sts	0x080D, r1	; 0x80080d <control_state>
     c1a:	08 95       	ret
     c1c:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <ARM_DISARM>
     c20:	81 11       	cpse	r24, r1
     c22:	07 c0       	rjmp	.+14     	; 0xc32 <Control_Tick+0x236>
     c24:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <controll_counter+0x1>
     c28:	10 92 94 07 	sts	0x0794, r1	; 0x800794 <controll_counter>
     c2c:	10 92 0d 08 	sts	0x080D, r1	; 0x80080d <control_state>
     c30:	08 95       	ret
     c32:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <delay_sec>
     c36:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <delay_sec+0x1>
     c3a:	88 ee       	ldi	r24, 0xE8	; 232
     c3c:	93 e0       	ldi	r25, 0x03	; 3
     c3e:	48 9f       	mul	r20, r24
     c40:	90 01       	movw	r18, r0
     c42:	49 9f       	mul	r20, r25
     c44:	30 0d       	add	r19, r0
     c46:	58 9f       	mul	r21, r24
     c48:	30 0d       	add	r19, r0
     c4a:	11 24       	eor	r1, r1
     c4c:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <controll_counter>
     c50:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <controll_counter+0x1>
     c54:	82 17       	cp	r24, r18
     c56:	93 07       	cpc	r25, r19
     c58:	3c f0       	brlt	.+14     	; 0xc68 <Control_Tick+0x26c>
     c5a:	86 e0       	ldi	r24, 0x06	; 6
     c5c:	80 93 0d 08 	sts	0x080D, r24	; 0x80080d <control_state>
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <systems_go>
     c66:	08 95       	ret
     c68:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <motion_detected>
     c6c:	81 30       	cpi	r24, 0x01	; 1
     c6e:	31 f1       	breq	.+76     	; 0xcbc <Control_Tick+0x2c0>
     c70:	80 91 99 07 	lds	r24, 0x0799	; 0x800799 <beam_detected>
     c74:	81 30       	cpi	r24, 0x01	; 1
     c76:	11 f1       	breq	.+68     	; 0xcbc <Control_Tick+0x2c0>
     c78:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <controll_counter+0x1>
     c7c:	10 92 94 07 	sts	0x0794, r1	; 0x800794 <controll_counter>
     c80:	10 92 0d 08 	sts	0x080D, r1	; 0x80080d <control_state>
     c84:	08 95       	ret
     c86:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <ARM_DISARM>
     c8a:	81 11       	cpse	r24, r1
     c8c:	03 c0       	rjmp	.+6      	; 0xc94 <Control_Tick+0x298>
     c8e:	10 92 0d 08 	sts	0x080D, r1	; 0x80080d <control_state>
     c92:	08 95       	ret
     c94:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <controll_counter>
     c98:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <controll_counter+0x1>
     c9c:	80 32       	cpi	r24, 0x20	; 32
     c9e:	9e 44       	sbci	r25, 0x4E	; 78
     ca0:	6c f0       	brlt	.+26     	; 0xcbc <Control_Tick+0x2c0>
     ca2:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <motion_detected>
     ca6:	81 11       	cpse	r24, r1
     ca8:	09 c0       	rjmp	.+18     	; 0xcbc <Control_Tick+0x2c0>
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	80 93 0d 08 	sts	0x080D, r24	; 0x80080d <control_state>
     cb0:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <controll_counter+0x1>
     cb4:	10 92 94 07 	sts	0x0794, r1	; 0x800794 <controll_counter>
     cb8:	10 92 ac 07 	sts	0x07AC, r1	; 0x8007ac <systems_go>
     cbc:	08 95       	ret

00000cbe <ControlSecTask>:
     cbe:	10 92 0d 08 	sts	0x080D, r1	; 0x80080d <control_state>
     cc2:	9c de       	rcall	.-712    	; 0x9fc <Control_Tick>
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	ae d4       	rcall	.+2396   	; 0x1626 <vTaskDelay>
     cca:	fb cf       	rjmp	.-10     	; 0xcc2 <ControlSecTask+0x4>

00000ccc <StartControlPulse>:
     ccc:	af 92       	push	r10
     cce:	bf 92       	push	r11
     cd0:	cf 92       	push	r12
     cd2:	df 92       	push	r13
     cd4:	ef 92       	push	r14
     cd6:	ff 92       	push	r15
     cd8:	0f 93       	push	r16
     cda:	a1 2c       	mov	r10, r1
     cdc:	b1 2c       	mov	r11, r1
     cde:	c1 2c       	mov	r12, r1
     ce0:	d1 2c       	mov	r13, r1
     ce2:	e1 2c       	mov	r14, r1
     ce4:	f1 2c       	mov	r15, r1
     ce6:	08 2f       	mov	r16, r24
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	45 e5       	ldi	r20, 0x55	; 85
     cee:	50 e0       	ldi	r21, 0x00	; 0
     cf0:	65 e9       	ldi	r22, 0x95	; 149
     cf2:	71 e0       	ldi	r23, 0x01	; 1
     cf4:	8f e5       	ldi	r24, 0x5F	; 95
     cf6:	96 e0       	ldi	r25, 0x06	; 6
     cf8:	1e d2       	rcall	.+1084   	; 0x1136 <xTaskGenericCreate>
     cfa:	0f 91       	pop	r16
     cfc:	ff 90       	pop	r15
     cfe:	ef 90       	pop	r14
     d00:	df 90       	pop	r13
     d02:	cf 90       	pop	r12
     d04:	bf 90       	pop	r11
     d06:	af 90       	pop	r10
     d08:	08 95       	ret

00000d0a <Rec_Tick>:
}

void Rec_Tick(){
	//Actions
	switch(rec_state){
     d0a:	80 91 0e 08 	lds	r24, 0x080E	; 0x80080e <rec_state>
     d0e:	81 30       	cpi	r24, 0x01	; 1
     d10:	61 f5       	brne	.+88     	; 0xd6a <Rec_Tick+0x60>
		break;


		case Receive_State:
		//ARM_DISARM = USART_Receive(0); //receive data
		 received_data = USART_Receive(0);
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	e1 da       	rcall	.-2622   	; 0x2d8 <USART_Receive>
     d16:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <received_data>
		 //delay_timing 0 = 5 sec, 1 = 10 sec, 2 = 15 sec
		 //bark_setting 0 = minor, 1 = major
		 //head_movement 0 = right to left, 1 = left to right
		 
		 //set arm_disarm
		 if(GetBit(received_data,0)==1){ //system is armed
     d1a:	80 ff       	sbrs	r24, 0
     d1c:	04 c0       	rjmp	.+8      	; 0xd26 <Rec_Tick+0x1c>
			 ARM_DISARM = 1;
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	80 93 b0 07 	sts	0x07B0, r24	; 0x8007b0 <ARM_DISARM>
     d24:	20 c0       	rjmp	.+64     	; 0xd66 <Rec_Tick+0x5c>
			 //PORTB = PORTB | 0x40; //set pin B6 high
			 //PORTB = 0xFF;
			 
		 }
		 else{                           //system is disarmed
			 ARM_DISARM = 0;
     d26:	10 92 b0 07 	sts	0x07B0, r1	; 0x8007b0 <ARM_DISARM>
			 //PORTB = 0x00;
			 //PORTB = PORTB & 0xBF; //set pin B6 low
			 
			 //set delay timing
			 if(GetBit(received_data,1) == 1){ //delay 10 second
     d2a:	81 ff       	sbrs	r24, 1
     d2c:	04 c0       	rjmp	.+8      	; 0xd36 <Rec_Tick+0x2c>
				 delay_timing = 1;
     d2e:	21 e0       	ldi	r18, 0x01	; 1
     d30:	20 93 af 07 	sts	0x07AF, r18	; 0x8007af <delay_timing>
     d34:	08 c0       	rjmp	.+16     	; 0xd46 <Rec_Tick+0x3c>
			 }
			 else if(GetBit(received_data,2) == 1){//delay 15 second
     d36:	82 ff       	sbrs	r24, 2
     d38:	04 c0       	rjmp	.+8      	; 0xd42 <Rec_Tick+0x38>
				 delay_timing = 2;
     d3a:	22 e0       	ldi	r18, 0x02	; 2
     d3c:	20 93 af 07 	sts	0x07AF, r18	; 0x8007af <delay_timing>
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <Rec_Tick+0x3c>
			 }
			 else{                           //delay 5 second
				 delay_timing = 0;
     d42:	10 92 af 07 	sts	0x07AF, r1	; 0x8007af <delay_timing>
			 }
			 
			 //set bark settings
			 if(GetBit(received_data,3)==1){ //Major Bark
     d46:	83 ff       	sbrs	r24, 3
     d48:	04 c0       	rjmp	.+8      	; 0xd52 <Rec_Tick+0x48>
				 bark_setting = 1;
     d4a:	21 e0       	ldi	r18, 0x01	; 1
     d4c:	20 93 ae 07 	sts	0x07AE, r18	; 0x8007ae <bark_setting>
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <Rec_Tick+0x4c>
			 }
			 else{                           //Minor Bark
				 bark_setting = 0;
     d52:	10 92 ae 07 	sts	0x07AE, r1	; 0x8007ae <bark_setting>
			 }
			 
			 //set dog head movement
			 if(GetBit(received_data,4)==1){ //Left to Right
     d56:	84 ff       	sbrs	r24, 4
     d58:	04 c0       	rjmp	.+8      	; 0xd62 <Rec_Tick+0x58>
				 head_movement = 1;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <head_movement>
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <Rec_Tick+0x5c>
			 }
			 else{                           //Right to left
				 head_movement = 0;
     d62:	10 92 ad 07 	sts	0x07AD, r1	; 0x8007ad <head_movement>
			 }
		 }
		 
		  
	
		USART_Flush(0); //flush so flag reset
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	9a da       	rcall	.-2764   	; 0x29e <USART_Flush>
		
		default:
		break;
	}
	//Transitions
	switch(rec_state){
     d6a:	80 91 0e 08 	lds	r24, 0x080E	; 0x80080e <rec_state>
     d6e:	88 23       	and	r24, r24
     d70:	19 f0       	breq	.+6      	; 0xd78 <Rec_Tick+0x6e>
			}
		break;


		case Receive_State:
			rec_state = Rec_Wait; //go back 
     d72:	10 92 0e 08 	sts	0x080E, r1	; 0x80080e <rec_state>
     d76:	08 95       	ret
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
     d78:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
		break;
	}
	//Transitions
	switch(rec_state){
		case Rec_Wait:
			if(USART_HasReceived(0)){
     d7c:	88 23       	and	r24, r24
     d7e:	1c f4       	brge	.+6      	; 0xd86 <Rec_Tick+0x7c>
				rec_state = Receive_State; //if ready go to next state
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	80 93 0e 08 	sts	0x080E, r24	; 0x80080e <rec_state>
     d86:	08 95       	ret

00000d88 <RecSecTask>:
//RECEIVE FSM

enum RECState {Rec_Wait, Receive_State } rec_state;

void REC_Init(){
	rec_state = Rec_Wait;
     d88:	10 92 0e 08 	sts	0x080E, r1	; 0x80080e <rec_state>
void RecSecTask()
{
	REC_Init();
	for(;;)
	{
		Rec_Tick();
     d8c:	be df       	rcall	.-132    	; 0xd0a <Rec_Tick>
		vTaskDelay(10);
     d8e:	8a e0       	ldi	r24, 0x0A	; 10
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	49 d4       	rcall	.+2194   	; 0x1626 <vTaskDelay>
     d94:	fb cf       	rjmp	.-10     	; 0xd8c <RecSecTask+0x4>

00000d96 <RecSecPulse>:
	}
}

void RecSecPulse(unsigned portBASE_TYPE Priority)
{
     d96:	af 92       	push	r10
     d98:	bf 92       	push	r11
     d9a:	cf 92       	push	r12
     d9c:	df 92       	push	r13
     d9e:	ef 92       	push	r14
     da0:	ff 92       	push	r15
     da2:	0f 93       	push	r16
	xTaskCreate(RecSecTask, (signed portCHAR *)"RecSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     da4:	a1 2c       	mov	r10, r1
     da6:	b1 2c       	mov	r11, r1
     da8:	c1 2c       	mov	r12, r1
     daa:	d1 2c       	mov	r13, r1
     dac:	e1 2c       	mov	r14, r1
     dae:	f1 2c       	mov	r15, r1
     db0:	08 2f       	mov	r16, r24
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	45 e5       	ldi	r20, 0x55	; 85
     db8:	50 e0       	ldi	r21, 0x00	; 0
     dba:	64 ea       	ldi	r22, 0xA4	; 164
     dbc:	71 e0       	ldi	r23, 0x01	; 1
     dbe:	84 ec       	ldi	r24, 0xC4	; 196
     dc0:	96 e0       	ldi	r25, 0x06	; 6
     dc2:	b9 d1       	rcall	.+882    	; 0x1136 <xTaskGenericCreate>
}
     dc4:	0f 91       	pop	r16
     dc6:	ff 90       	pop	r15
     dc8:	ef 90       	pop	r14
     dca:	df 90       	pop	r13
     dcc:	cf 90       	pop	r12
     dce:	bf 90       	pop	r11
     dd0:	af 90       	pop	r10
     dd2:	08 95       	ret

00000dd4 <main>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 
int main(void) 
{ 
   DDRA = 0x00; PORTA=0xFF; //set to input
     dd4:	11 b8       	out	0x01, r1	; 1
     dd6:	8f ef       	ldi	r24, 0xFF	; 255
     dd8:	82 b9       	out	0x02, r24	; 2
   DDRB = 0xFF; PORTB = 0x00; //set to output
     dda:	84 b9       	out	0x04, r24	; 4
     ddc:	15 b8       	out	0x05, r1	; 5
   DDRC = 0xFF; PORTC = 0x00;
     dde:	87 b9       	out	0x07, r24	; 7
     de0:	18 b8       	out	0x08, r1	; 8
   PORTC = 0x0C; //set pins C2,C3 to high so audio wont play
     de2:	8c e0       	ldi	r24, 0x0C	; 12
     de4:	88 b9       	out	0x08, r24	; 8
   //DDRD = 0xFF; PORTD = 0x00; //used by USART 0
   initUSART(0);//Initialize USART 0
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	38 da       	rcall	.-2960   	; 0x25a <initUSART>
   //Start Tasks  
   RecSecPulse(1);
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	d4 df       	rcall	.-88     	; 0xd96 <RecSecPulse>
   StartBeamPulse(1);
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	74 dd       	rcall	.-1304   	; 0x8da <StartBeamPulse>
   StartMotionPulse(1);
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	e4 dd       	rcall	.-1080   	; 0x9be <StartMotionPulse>
   StartControlPulse(1);
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	69 df       	rcall	.-302    	; 0xccc <StartControlPulse>
   
   MotorSecPulse(1);
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	0e db       	rcall	.-2532   	; 0x41a <MotorSecPulse>
   Start_stepper_controller_Pulse(1);
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	73 db       	rcall	.-2330   	; 0x4e8 <Start_stepper_controller_Pulse>
   Start_servo_controller_Pulse(1);
     e02:	81 e0       	ldi	r24, 0x01	; 1
   SERVODRIVESecPulse(1);
     e04:	c5 dc       	rcall	.-1654   	; 0x790 <Start_servo_controller_Pulse>
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	ca db       	rcall	.-2156   	; 0x59e <SERVODRIVESecPulse>
   SERVOSecPulse(1);
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	3c dc       	rcall	.-1928   	; 0x686 <SERVOSecPulse>
     e0e:	81 e0       	ldi	r24, 0x01	; 1
   StartAudioPulse(1);
     e10:	0f dd       	rcall	.-1506   	; 0x830 <StartAudioPulse>
     e12:	92 d2       	rcall	.+1316   	; 0x1338 <vTaskStartScheduler>
     e14:	80 e0       	ldi	r24, 0x00	; 0
    //RunSchedular 
   vTaskStartScheduler(); 
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	08 95       	ret

00000e1a <pxPortInitialiseStack>:
 
   return 0; 
}
     e1a:	31 e1       	ldi	r19, 0x11	; 17
     e1c:	fc 01       	movw	r30, r24
     e1e:	30 83       	st	Z, r19
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     e20:	31 97       	sbiw	r30, 0x01	; 1
     e22:	22 e2       	ldi	r18, 0x22	; 34
     e24:	20 83       	st	Z, r18
     e26:	31 97       	sbiw	r30, 0x01	; 1
     e28:	a3 e3       	ldi	r26, 0x33	; 51
     e2a:	a0 83       	st	Z, r26
     e2c:	31 97       	sbiw	r30, 0x01	; 1
     e2e:	60 83       	st	Z, r22
     e30:	31 97       	sbiw	r30, 0x01	; 1
     e32:	70 83       	st	Z, r23
     e34:	31 97       	sbiw	r30, 0x01	; 1
     e36:	10 82       	st	Z, r1
     e38:	31 97       	sbiw	r30, 0x01	; 1
     e3a:	60 e8       	ldi	r22, 0x80	; 128
     e3c:	60 83       	st	Z, r22
     e3e:	31 97       	sbiw	r30, 0x01	; 1
     e40:	10 82       	st	Z, r1
     e42:	31 97       	sbiw	r30, 0x01	; 1
     e44:	62 e0       	ldi	r22, 0x02	; 2
     e46:	60 83       	st	Z, r22
     e48:	31 97       	sbiw	r30, 0x01	; 1
     e4a:	63 e0       	ldi	r22, 0x03	; 3
     e4c:	60 83       	st	Z, r22
     e4e:	31 97       	sbiw	r30, 0x01	; 1
     e50:	64 e0       	ldi	r22, 0x04	; 4
     e52:	60 83       	st	Z, r22
     e54:	31 97       	sbiw	r30, 0x01	; 1
     e56:	65 e0       	ldi	r22, 0x05	; 5
     e58:	60 83       	st	Z, r22
     e5a:	31 97       	sbiw	r30, 0x01	; 1
     e5c:	66 e0       	ldi	r22, 0x06	; 6
     e5e:	60 83       	st	Z, r22
     e60:	31 97       	sbiw	r30, 0x01	; 1
     e62:	67 e0       	ldi	r22, 0x07	; 7
     e64:	60 83       	st	Z, r22
     e66:	31 97       	sbiw	r30, 0x01	; 1
     e68:	68 e0       	ldi	r22, 0x08	; 8
     e6a:	60 83       	st	Z, r22
     e6c:	31 97       	sbiw	r30, 0x01	; 1
     e6e:	69 e0       	ldi	r22, 0x09	; 9
     e70:	60 83       	st	Z, r22
     e72:	31 97       	sbiw	r30, 0x01	; 1
     e74:	60 e1       	ldi	r22, 0x10	; 16
     e76:	60 83       	st	Z, r22
     e78:	31 97       	sbiw	r30, 0x01	; 1
     e7a:	30 83       	st	Z, r19
     e7c:	31 97       	sbiw	r30, 0x01	; 1
     e7e:	32 e1       	ldi	r19, 0x12	; 18
     e80:	30 83       	st	Z, r19
     e82:	31 97       	sbiw	r30, 0x01	; 1
     e84:	33 e1       	ldi	r19, 0x13	; 19
     e86:	30 83       	st	Z, r19
     e88:	31 97       	sbiw	r30, 0x01	; 1
     e8a:	34 e1       	ldi	r19, 0x14	; 20
     e8c:	30 83       	st	Z, r19
     e8e:	31 97       	sbiw	r30, 0x01	; 1
     e90:	35 e1       	ldi	r19, 0x15	; 21
     e92:	30 83       	st	Z, r19
     e94:	31 97       	sbiw	r30, 0x01	; 1
     e96:	36 e1       	ldi	r19, 0x16	; 22
     e98:	30 83       	st	Z, r19
     e9a:	31 97       	sbiw	r30, 0x01	; 1
     e9c:	37 e1       	ldi	r19, 0x17	; 23
     e9e:	30 83       	st	Z, r19
     ea0:	31 97       	sbiw	r30, 0x01	; 1
     ea2:	38 e1       	ldi	r19, 0x18	; 24
     ea4:	30 83       	st	Z, r19
     ea6:	31 97       	sbiw	r30, 0x01	; 1
     ea8:	39 e1       	ldi	r19, 0x19	; 25
     eaa:	30 83       	st	Z, r19
     eac:	31 97       	sbiw	r30, 0x01	; 1
     eae:	30 e2       	ldi	r19, 0x20	; 32
     eb0:	30 83       	st	Z, r19
     eb2:	31 97       	sbiw	r30, 0x01	; 1
     eb4:	31 e2       	ldi	r19, 0x21	; 33
     eb6:	30 83       	st	Z, r19
     eb8:	31 97       	sbiw	r30, 0x01	; 1
     eba:	20 83       	st	Z, r18
     ebc:	31 97       	sbiw	r30, 0x01	; 1
     ebe:	23 e2       	ldi	r18, 0x23	; 35
     ec0:	20 83       	st	Z, r18
     ec2:	31 97       	sbiw	r30, 0x01	; 1
     ec4:	40 83       	st	Z, r20
     ec6:	31 97       	sbiw	r30, 0x01	; 1
     ec8:	50 83       	st	Z, r21
     eca:	31 97       	sbiw	r30, 0x01	; 1
     ecc:	26 e2       	ldi	r18, 0x26	; 38
     ece:	20 83       	st	Z, r18
     ed0:	31 97       	sbiw	r30, 0x01	; 1
     ed2:	27 e2       	ldi	r18, 0x27	; 39
     ed4:	20 83       	st	Z, r18
     ed6:	31 97       	sbiw	r30, 0x01	; 1
     ed8:	28 e2       	ldi	r18, 0x28	; 40
     eda:	20 83       	st	Z, r18
     edc:	31 97       	sbiw	r30, 0x01	; 1
     ede:	29 e2       	ldi	r18, 0x29	; 41
     ee0:	20 83       	st	Z, r18
     ee2:	31 97       	sbiw	r30, 0x01	; 1
     ee4:	20 e3       	ldi	r18, 0x30	; 48
     ee6:	20 83       	st	Z, r18
     ee8:	31 97       	sbiw	r30, 0x01	; 1
     eea:	21 e3       	ldi	r18, 0x31	; 49
     eec:	20 83       	st	Z, r18
     eee:	86 97       	sbiw	r24, 0x26	; 38
     ef0:	08 95       	ret

00000ef2 <xPortStartScheduler>:
     ef2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     ef6:	8c e7       	ldi	r24, 0x7C	; 124
     ef8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     efc:	8b e0       	ldi	r24, 0x0B	; 11
     efe:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     f02:	ef e6       	ldi	r30, 0x6F	; 111
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	82 60       	ori	r24, 0x02	; 2
     f0a:	80 83       	st	Z, r24
     f0c:	a0 91 09 08 	lds	r26, 0x0809	; 0x800809 <pxCurrentTCB>
     f10:	b0 91 0a 08 	lds	r27, 0x080A	; 0x80080a <pxCurrentTCB+0x1>
     f14:	cd 91       	ld	r28, X+
     f16:	cd bf       	out	0x3d, r28	; 61
     f18:	dd 91       	ld	r29, X+
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	ff 91       	pop	r31
     f1e:	ef 91       	pop	r30
     f20:	df 91       	pop	r29
     f22:	cf 91       	pop	r28
     f24:	bf 91       	pop	r27
     f26:	af 91       	pop	r26
     f28:	9f 91       	pop	r25
     f2a:	8f 91       	pop	r24
     f2c:	7f 91       	pop	r23
     f2e:	6f 91       	pop	r22
     f30:	5f 91       	pop	r21
     f32:	4f 91       	pop	r20
     f34:	3f 91       	pop	r19
     f36:	2f 91       	pop	r18
     f38:	1f 91       	pop	r17
     f3a:	0f 91       	pop	r16
     f3c:	ff 90       	pop	r15
     f3e:	ef 90       	pop	r14
     f40:	df 90       	pop	r13
     f42:	cf 90       	pop	r12
     f44:	bf 90       	pop	r11
     f46:	af 90       	pop	r10
     f48:	9f 90       	pop	r9
     f4a:	8f 90       	pop	r8
     f4c:	7f 90       	pop	r7
     f4e:	6f 90       	pop	r6
     f50:	5f 90       	pop	r5
     f52:	4f 90       	pop	r4
     f54:	3f 90       	pop	r3
     f56:	2f 90       	pop	r2
     f58:	1f 90       	pop	r1
     f5a:	0f 90       	pop	r0
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	0f 90       	pop	r0
     f60:	08 95       	ret
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	08 95       	ret

00000f66 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     f66:	0f 92       	push	r0
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	0f 92       	push	r0
     f6e:	1f 92       	push	r1
     f70:	11 24       	eor	r1, r1
     f72:	2f 92       	push	r2
     f74:	3f 92       	push	r3
     f76:	4f 92       	push	r4
     f78:	5f 92       	push	r5
     f7a:	6f 92       	push	r6
     f7c:	7f 92       	push	r7
     f7e:	8f 92       	push	r8
     f80:	9f 92       	push	r9
     f82:	af 92       	push	r10
     f84:	bf 92       	push	r11
     f86:	cf 92       	push	r12
     f88:	df 92       	push	r13
     f8a:	ef 92       	push	r14
     f8c:	ff 92       	push	r15
     f8e:	0f 93       	push	r16
     f90:	1f 93       	push	r17
     f92:	2f 93       	push	r18
     f94:	3f 93       	push	r19
     f96:	4f 93       	push	r20
     f98:	5f 93       	push	r21
     f9a:	6f 93       	push	r22
     f9c:	7f 93       	push	r23
     f9e:	8f 93       	push	r24
     fa0:	9f 93       	push	r25
     fa2:	af 93       	push	r26
     fa4:	bf 93       	push	r27
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	ef 93       	push	r30
     fac:	ff 93       	push	r31
     fae:	a0 91 09 08 	lds	r26, 0x0809	; 0x800809 <pxCurrentTCB>
     fb2:	b0 91 0a 08 	lds	r27, 0x080A	; 0x80080a <pxCurrentTCB+0x1>
     fb6:	0d b6       	in	r0, 0x3d	; 61
     fb8:	0d 92       	st	X+, r0
     fba:	0e b6       	in	r0, 0x3e	; 62
     fbc:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     fbe:	88 d3       	rcall	.+1808   	; 0x16d0 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     fc0:	a0 91 09 08 	lds	r26, 0x0809	; 0x800809 <pxCurrentTCB>
     fc4:	b0 91 0a 08 	lds	r27, 0x080A	; 0x80080a <pxCurrentTCB+0x1>
     fc8:	cd 91       	ld	r28, X+
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	dd 91       	ld	r29, X+
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	ff 91       	pop	r31
     fd2:	ef 91       	pop	r30
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	bf 91       	pop	r27
     fda:	af 91       	pop	r26
     fdc:	9f 91       	pop	r25
     fde:	8f 91       	pop	r24
     fe0:	7f 91       	pop	r23
     fe2:	6f 91       	pop	r22
     fe4:	5f 91       	pop	r21
     fe6:	4f 91       	pop	r20
     fe8:	3f 91       	pop	r19
     fea:	2f 91       	pop	r18
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	ff 90       	pop	r15
     ff2:	ef 90       	pop	r14
     ff4:	df 90       	pop	r13
     ff6:	cf 90       	pop	r12
     ff8:	bf 90       	pop	r11
     ffa:	af 90       	pop	r10
     ffc:	9f 90       	pop	r9
     ffe:	8f 90       	pop	r8
    1000:	7f 90       	pop	r7
    1002:	6f 90       	pop	r6
    1004:	5f 90       	pop	r5
    1006:	4f 90       	pop	r4
    1008:	3f 90       	pop	r3
    100a:	2f 90       	pop	r2
    100c:	1f 90       	pop	r1
    100e:	0f 90       	pop	r0
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1014:	08 95       	ret

00001016 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1016:	0f 92       	push	r0
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	0f 92       	push	r0
    101e:	1f 92       	push	r1
    1020:	11 24       	eor	r1, r1
    1022:	2f 92       	push	r2
    1024:	3f 92       	push	r3
    1026:	4f 92       	push	r4
    1028:	5f 92       	push	r5
    102a:	6f 92       	push	r6
    102c:	7f 92       	push	r7
    102e:	8f 92       	push	r8
    1030:	9f 92       	push	r9
    1032:	af 92       	push	r10
    1034:	bf 92       	push	r11
    1036:	cf 92       	push	r12
    1038:	df 92       	push	r13
    103a:	ef 92       	push	r14
    103c:	ff 92       	push	r15
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	2f 93       	push	r18
    1044:	3f 93       	push	r19
    1046:	4f 93       	push	r20
    1048:	5f 93       	push	r21
    104a:	6f 93       	push	r22
    104c:	7f 93       	push	r23
    104e:	8f 93       	push	r24
    1050:	9f 93       	push	r25
    1052:	af 93       	push	r26
    1054:	bf 93       	push	r27
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	ef 93       	push	r30
    105c:	ff 93       	push	r31
    105e:	a0 91 09 08 	lds	r26, 0x0809	; 0x800809 <pxCurrentTCB>
    1062:	b0 91 0a 08 	lds	r27, 0x080A	; 0x80080a <pxCurrentTCB+0x1>
    1066:	0d b6       	in	r0, 0x3d	; 61
    1068:	0d 92       	st	X+, r0
    106a:	0e b6       	in	r0, 0x3e	; 62
    106c:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    106e:	93 d1       	rcall	.+806    	; 0x1396 <vTaskIncrementTick>
	vTaskSwitchContext();
    1070:	2f d3       	rcall	.+1630   	; 0x16d0 <vTaskSwitchContext>
    1072:	a0 91 09 08 	lds	r26, 0x0809	; 0x800809 <pxCurrentTCB>
	portRESTORE_CONTEXT();
    1076:	b0 91 0a 08 	lds	r27, 0x080A	; 0x80080a <pxCurrentTCB+0x1>
    107a:	cd 91       	ld	r28, X+
    107c:	cd bf       	out	0x3d, r28	; 61
    107e:	dd 91       	ld	r29, X+
    1080:	de bf       	out	0x3e, r29	; 62
    1082:	ff 91       	pop	r31
    1084:	ef 91       	pop	r30
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	bf 91       	pop	r27
    108c:	af 91       	pop	r26
    108e:	9f 91       	pop	r25
    1090:	8f 91       	pop	r24
    1092:	7f 91       	pop	r23
    1094:	6f 91       	pop	r22
    1096:	5f 91       	pop	r21
    1098:	4f 91       	pop	r20
    109a:	3f 91       	pop	r19
    109c:	2f 91       	pop	r18
    109e:	1f 91       	pop	r17
    10a0:	0f 91       	pop	r16
    10a2:	ff 90       	pop	r15
    10a4:	ef 90       	pop	r14
    10a6:	df 90       	pop	r13
    10a8:	cf 90       	pop	r12
    10aa:	bf 90       	pop	r11
    10ac:	af 90       	pop	r10
    10ae:	9f 90       	pop	r9
    10b0:	8f 90       	pop	r8
    10b2:	7f 90       	pop	r7
    10b4:	6f 90       	pop	r6
    10b6:	5f 90       	pop	r5
    10b8:	4f 90       	pop	r4
    10ba:	3f 90       	pop	r3
    10bc:	2f 90       	pop	r2
    10be:	1f 90       	pop	r1
    10c0:	0f 90       	pop	r0
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	0f 90       	pop	r0
    10c6:	08 95       	ret

000010c8 <__vector_13>:

	asm volatile ( "ret" );
    10c8:	a6 df       	rcall	.-180    	; 0x1016 <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
    10ca:	18 95       	reti

000010cc <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	ec 01       	movw	r28, r24
    10d2:	e0 91 09 08 	lds	r30, 0x0809	; 0x800809 <pxCurrentTCB>
    10d6:	f0 91 0a 08 	lds	r31, 0x080A	; 0x80080a <pxCurrentTCB+0x1>
    10da:	93 83       	std	Z+3, r25	; 0x03
    10dc:	82 83       	std	Z+2, r24	; 0x02
    10de:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <xTickCount>
    10e2:	90 91 ba 07 	lds	r25, 0x07BA	; 0x8007ba <xTickCount+0x1>
    10e6:	c8 17       	cp	r28, r24
    10e8:	d9 07       	cpc	r29, r25
    10ea:	60 f4       	brcc	.+24     	; 0x1104 <prvAddCurrentTaskToDelayedList+0x38>
    10ec:	60 91 09 08 	lds	r22, 0x0809	; 0x800809 <pxCurrentTCB>
    10f0:	70 91 0a 08 	lds	r23, 0x080A	; 0x80080a <pxCurrentTCB+0x1>
    10f4:	80 91 cf 07 	lds	r24, 0x07CF	; 0x8007cf <pxOverflowDelayedTaskList>
    10f8:	90 91 d0 07 	lds	r25, 0x07D0	; 0x8007d0 <pxOverflowDelayedTaskList+0x1>
    10fc:	6e 5f       	subi	r22, 0xFE	; 254
    10fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1100:	4b d8       	rcall	.-3946   	; 0x198 <vListInsert>
    1102:	16 c0       	rjmp	.+44     	; 0x1130 <prvAddCurrentTaskToDelayedList+0x64>
    1104:	60 91 09 08 	lds	r22, 0x0809	; 0x800809 <pxCurrentTCB>
    1108:	70 91 0a 08 	lds	r23, 0x080A	; 0x80080a <pxCurrentTCB+0x1>
    110c:	80 91 d1 07 	lds	r24, 0x07D1	; 0x8007d1 <pxDelayedTaskList>
    1110:	90 91 d2 07 	lds	r25, 0x07D2	; 0x8007d2 <pxDelayedTaskList+0x1>
    1114:	6e 5f       	subi	r22, 0xFE	; 254
    1116:	7f 4f       	sbci	r23, 0xFF	; 255
    1118:	3f d8       	rcall	.-3970   	; 0x198 <vListInsert>
    111a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <xNextTaskUnblockTime>
    111e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <xNextTaskUnblockTime+0x1>
    1122:	c8 17       	cp	r28, r24
    1124:	d9 07       	cpc	r29, r25
    1126:	20 f4       	brcc	.+8      	; 0x1130 <prvAddCurrentTaskToDelayedList+0x64>
    1128:	d0 93 0e 01 	sts	0x010E, r29	; 0x80010e <xNextTaskUnblockTime+0x1>
    112c:	c0 93 0d 01 	sts	0x010D, r28	; 0x80010d <xNextTaskUnblockTime>
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	08 95       	ret

00001136 <xTaskGenericCreate>:
    1136:	4f 92       	push	r4
    1138:	5f 92       	push	r5
    113a:	6f 92       	push	r6
    113c:	7f 92       	push	r7
    113e:	8f 92       	push	r8
    1140:	9f 92       	push	r9
    1142:	af 92       	push	r10
    1144:	bf 92       	push	r11
    1146:	cf 92       	push	r12
    1148:	df 92       	push	r13
    114a:	ef 92       	push	r14
    114c:	ff 92       	push	r15
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	5c 01       	movw	r10, r24
    1158:	4b 01       	movw	r8, r22
    115a:	3a 01       	movw	r6, r20
    115c:	29 01       	movw	r4, r18
    115e:	81 e2       	ldi	r24, 0x21	; 33
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	0e 94 6c 00 	call	0xd8	; 0xd8 <pvPortMalloc>
    1166:	ec 01       	movw	r28, r24
    1168:	89 2b       	or	r24, r25
    116a:	09 f4       	brne	.+2      	; 0x116e <xTaskGenericCreate+0x38>
    116c:	d3 c0       	rjmp	.+422    	; 0x1314 <xTaskGenericCreate+0x1de>
    116e:	c1 14       	cp	r12, r1
    1170:	d1 04       	cpc	r13, r1
    1172:	09 f0       	breq	.+2      	; 0x1176 <xTaskGenericCreate+0x40>
    1174:	cb c0       	rjmp	.+406    	; 0x130c <xTaskGenericCreate+0x1d6>
    1176:	c3 01       	movw	r24, r6
    1178:	0e 94 6c 00 	call	0xd8	; 0xd8 <pvPortMalloc>
    117c:	98 8f       	std	Y+24, r25	; 0x18
    117e:	8f 8b       	std	Y+23, r24	; 0x17
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	21 f4       	brne	.+8      	; 0x118c <xTaskGenericCreate+0x56>
    1184:	ce 01       	movw	r24, r28
    1186:	0e 94 92 00 	call	0x124	; 0x124 <vPortFree>
    118a:	c4 c0       	rjmp	.+392    	; 0x1314 <xTaskGenericCreate+0x1de>
    118c:	a3 01       	movw	r20, r6
    118e:	65 ea       	ldi	r22, 0xA5	; 165
    1190:	70 e0       	ldi	r23, 0x00	; 0
    1192:	8f d3       	rcall	.+1822   	; 0x18b2 <memset>
    1194:	93 01       	movw	r18, r6
    1196:	21 50       	subi	r18, 0x01	; 1
    1198:	31 09       	sbc	r19, r1
    119a:	8f 89       	ldd	r24, Y+23	; 0x17
    119c:	98 8d       	ldd	r25, Y+24	; 0x18
    119e:	3c 01       	movw	r6, r24
    11a0:	62 0e       	add	r6, r18
    11a2:	73 1e       	adc	r7, r19
    11a4:	48 e0       	ldi	r20, 0x08	; 8
    11a6:	50 e0       	ldi	r21, 0x00	; 0
    11a8:	b4 01       	movw	r22, r8
    11aa:	ce 01       	movw	r24, r28
    11ac:	49 96       	adiw	r24, 0x19	; 25
    11ae:	88 d3       	rcall	.+1808   	; 0x18c0 <strncpy>
    11b0:	18 a2       	std	Y+32, r1	; 0x20
    11b2:	10 2f       	mov	r17, r16
    11b4:	04 30       	cpi	r16, 0x04	; 4
    11b6:	08 f0       	brcs	.+2      	; 0x11ba <xTaskGenericCreate+0x84>
    11b8:	13 e0       	ldi	r17, 0x03	; 3
    11ba:	1e 8b       	std	Y+22, r17	; 0x16
    11bc:	6e 01       	movw	r12, r28
    11be:	82 e0       	ldi	r24, 0x02	; 2
    11c0:	c8 0e       	add	r12, r24
    11c2:	d1 1c       	adc	r13, r1
    11c4:	c6 01       	movw	r24, r12
    11c6:	0e 94 a1 00 	call	0x142	; 0x142 <vListInitialiseItem>
    11ca:	ce 01       	movw	r24, r28
    11cc:	0c 96       	adiw	r24, 0x0c	; 12
    11ce:	0e 94 a1 00 	call	0x142	; 0x142 <vListInitialiseItem>
    11d2:	d9 87       	std	Y+9, r29	; 0x09
    11d4:	c8 87       	std	Y+8, r28	; 0x08
    11d6:	84 e0       	ldi	r24, 0x04	; 4
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	81 1b       	sub	r24, r17
    11dc:	91 09       	sbc	r25, r1
    11de:	9d 87       	std	Y+13, r25	; 0x0d
    11e0:	8c 87       	std	Y+12, r24	; 0x0c
    11e2:	db 8b       	std	Y+19, r29	; 0x13
    11e4:	ca 8b       	std	Y+18, r28	; 0x12
    11e6:	a2 01       	movw	r20, r4
    11e8:	b5 01       	movw	r22, r10
    11ea:	c3 01       	movw	r24, r6
    11ec:	16 de       	rcall	.-980    	; 0xe1a <pxPortInitialiseStack>
    11ee:	99 83       	std	Y+1, r25	; 0x01
    11f0:	88 83       	st	Y, r24
    11f2:	e1 14       	cp	r14, r1
    11f4:	f1 04       	cpc	r15, r1
    11f6:	19 f0       	breq	.+6      	; 0x11fe <xTaskGenericCreate+0xc8>
    11f8:	f7 01       	movw	r30, r14
    11fa:	d1 83       	std	Z+1, r29	; 0x01
    11fc:	c0 83       	st	Z, r28
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	0f 92       	push	r0
    1204:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <uxCurrentNumberOfTasks>
    1208:	8f 5f       	subi	r24, 0xFF	; 255
    120a:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <uxCurrentNumberOfTasks>
    120e:	80 91 09 08 	lds	r24, 0x0809	; 0x800809 <pxCurrentTCB>
    1212:	90 91 0a 08 	lds	r25, 0x080A	; 0x80080a <pxCurrentTCB+0x1>
    1216:	89 2b       	or	r24, r25
    1218:	a9 f5       	brne	.+106    	; 0x1284 <xTaskGenericCreate+0x14e>
    121a:	d0 93 0a 08 	sts	0x080A, r29	; 0x80080a <pxCurrentTCB+0x1>
    121e:	c0 93 09 08 	sts	0x0809, r28	; 0x800809 <pxCurrentTCB>
    1222:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <uxCurrentNumberOfTasks>
    1226:	81 30       	cpi	r24, 0x01	; 1
    1228:	e1 f5       	brne	.+120    	; 0x12a2 <xTaskGenericCreate+0x16c>
    122a:	85 ee       	ldi	r24, 0xE5	; 229
    122c:	97 e0       	ldi	r25, 0x07	; 7
    122e:	0e 94 93 00 	call	0x126	; 0x126 <vListInitialise>
    1232:	8e ee       	ldi	r24, 0xEE	; 238
    1234:	97 e0       	ldi	r25, 0x07	; 7
    1236:	0e 94 93 00 	call	0x126	; 0x126 <vListInitialise>
    123a:	87 ef       	ldi	r24, 0xF7	; 247
    123c:	97 e0       	ldi	r25, 0x07	; 7
    123e:	0e 94 93 00 	call	0x126	; 0x126 <vListInitialise>
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	98 e0       	ldi	r25, 0x08	; 8
    1246:	0e 94 93 00 	call	0x126	; 0x126 <vListInitialise>
    124a:	8c ed       	ldi	r24, 0xDC	; 220
    124c:	97 e0       	ldi	r25, 0x07	; 7
    124e:	0e 94 93 00 	call	0x126	; 0x126 <vListInitialise>
    1252:	83 ed       	ldi	r24, 0xD3	; 211
    1254:	97 e0       	ldi	r25, 0x07	; 7
    1256:	0e 94 93 00 	call	0x126	; 0x126 <vListInitialise>
    125a:	86 ec       	ldi	r24, 0xC6	; 198
    125c:	97 e0       	ldi	r25, 0x07	; 7
    125e:	0e 94 93 00 	call	0x126	; 0x126 <vListInitialise>
    1262:	8d eb       	ldi	r24, 0xBD	; 189
    1264:	97 e0       	ldi	r25, 0x07	; 7
    1266:	0e 94 93 00 	call	0x126	; 0x126 <vListInitialise>
    126a:	8c ed       	ldi	r24, 0xDC	; 220
    126c:	97 e0       	ldi	r25, 0x07	; 7
    126e:	90 93 d2 07 	sts	0x07D2, r25	; 0x8007d2 <pxDelayedTaskList+0x1>
    1272:	80 93 d1 07 	sts	0x07D1, r24	; 0x8007d1 <pxDelayedTaskList>
    1276:	83 ed       	ldi	r24, 0xD3	; 211
    1278:	97 e0       	ldi	r25, 0x07	; 7
    127a:	90 93 d0 07 	sts	0x07D0, r25	; 0x8007d0 <pxOverflowDelayedTaskList+0x1>
    127e:	80 93 cf 07 	sts	0x07CF, r24	; 0x8007cf <pxOverflowDelayedTaskList>
    1282:	0f c0       	rjmp	.+30     	; 0x12a2 <xTaskGenericCreate+0x16c>
    1284:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <xSchedulerRunning>
    1288:	81 11       	cpse	r24, r1
    128a:	0b c0       	rjmp	.+22     	; 0x12a2 <xTaskGenericCreate+0x16c>
    128c:	e0 91 09 08 	lds	r30, 0x0809	; 0x800809 <pxCurrentTCB>
    1290:	f0 91 0a 08 	lds	r31, 0x080A	; 0x80080a <pxCurrentTCB+0x1>
    1294:	86 89       	ldd	r24, Z+22	; 0x16
    1296:	08 17       	cp	r16, r24
    1298:	20 f0       	brcs	.+8      	; 0x12a2 <xTaskGenericCreate+0x16c>
    129a:	d0 93 0a 08 	sts	0x080A, r29	; 0x80080a <pxCurrentTCB+0x1>
    129e:	c0 93 09 08 	sts	0x0809, r28	; 0x800809 <pxCurrentTCB>
    12a2:	8e 89       	ldd	r24, Y+22	; 0x16
    12a4:	90 91 b8 07 	lds	r25, 0x07B8	; 0x8007b8 <uxTopUsedPriority>
    12a8:	98 17       	cp	r25, r24
    12aa:	10 f4       	brcc	.+4      	; 0x12b0 <xTaskGenericCreate+0x17a>
    12ac:	80 93 b8 07 	sts	0x07B8, r24	; 0x8007b8 <uxTopUsedPriority>
    12b0:	90 91 b1 07 	lds	r25, 0x07B1	; 0x8007b1 <uxTaskNumber>
    12b4:	9f 5f       	subi	r25, 0xFF	; 255
    12b6:	90 93 b1 07 	sts	0x07B1, r25	; 0x8007b1 <uxTaskNumber>
    12ba:	90 91 b7 07 	lds	r25, 0x07B7	; 0x8007b7 <uxTopReadyPriority>
    12be:	98 17       	cp	r25, r24
    12c0:	10 f4       	brcc	.+4      	; 0x12c6 <xTaskGenericCreate+0x190>
    12c2:	80 93 b7 07 	sts	0x07B7, r24	; 0x8007b7 <uxTopReadyPriority>
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	9c 01       	movw	r18, r24
    12ca:	22 0f       	add	r18, r18
    12cc:	33 1f       	adc	r19, r19
    12ce:	22 0f       	add	r18, r18
    12d0:	33 1f       	adc	r19, r19
    12d2:	22 0f       	add	r18, r18
    12d4:	33 1f       	adc	r19, r19
    12d6:	82 0f       	add	r24, r18
    12d8:	93 1f       	adc	r25, r19
    12da:	b6 01       	movw	r22, r12
    12dc:	8b 51       	subi	r24, 0x1B	; 27
    12de:	98 4f       	sbci	r25, 0xF8	; 248
    12e0:	0e 94 a5 00 	call	0x14a	; 0x14a <vListInsertEnd>
    12e4:	0f 90       	pop	r0
    12e6:	0f be       	out	0x3f, r0	; 63
    12e8:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <xSchedulerRunning>
    12ec:	88 23       	and	r24, r24
    12ee:	51 f0       	breq	.+20     	; 0x1304 <xTaskGenericCreate+0x1ce>
    12f0:	e0 91 09 08 	lds	r30, 0x0809	; 0x800809 <pxCurrentTCB>
    12f4:	f0 91 0a 08 	lds	r31, 0x080A	; 0x80080a <pxCurrentTCB+0x1>
    12f8:	86 89       	ldd	r24, Z+22	; 0x16
    12fa:	80 17       	cp	r24, r16
    12fc:	28 f4       	brcc	.+10     	; 0x1308 <xTaskGenericCreate+0x1d2>
    12fe:	33 de       	rcall	.-922    	; 0xf66 <vPortYield>
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	09 c0       	rjmp	.+18     	; 0x1316 <xTaskGenericCreate+0x1e0>
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	07 c0       	rjmp	.+14     	; 0x1316 <xTaskGenericCreate+0x1e0>
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	05 c0       	rjmp	.+10     	; 0x1316 <xTaskGenericCreate+0x1e0>
    130c:	d8 8e       	std	Y+24, r13	; 0x18
    130e:	cf 8a       	std	Y+23, r12	; 0x17
    1310:	c6 01       	movw	r24, r12
    1312:	3c cf       	rjmp	.-392    	; 0x118c <xTaskGenericCreate+0x56>
    1314:	8f ef       	ldi	r24, 0xFF	; 255
    1316:	df 91       	pop	r29
    1318:	cf 91       	pop	r28
    131a:	1f 91       	pop	r17
    131c:	0f 91       	pop	r16
    131e:	ff 90       	pop	r15
    1320:	ef 90       	pop	r14
    1322:	df 90       	pop	r13
    1324:	cf 90       	pop	r12
    1326:	bf 90       	pop	r11
    1328:	af 90       	pop	r10
    132a:	9f 90       	pop	r9
    132c:	8f 90       	pop	r8
    132e:	7f 90       	pop	r7
    1330:	6f 90       	pop	r6
    1332:	5f 90       	pop	r5
    1334:	4f 90       	pop	r4
    1336:	08 95       	ret

00001338 <vTaskStartScheduler>:
    1338:	af 92       	push	r10
    133a:	bf 92       	push	r11
    133c:	cf 92       	push	r12
    133e:	df 92       	push	r13
    1340:	ef 92       	push	r14
    1342:	ff 92       	push	r15
    1344:	0f 93       	push	r16
    1346:	a1 2c       	mov	r10, r1
    1348:	b1 2c       	mov	r11, r1
    134a:	c1 2c       	mov	r12, r1
    134c:	d1 2c       	mov	r13, r1
    134e:	e1 2c       	mov	r14, r1
    1350:	f1 2c       	mov	r15, r1
    1352:	00 e0       	ldi	r16, 0x00	; 0
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	45 e5       	ldi	r20, 0x55	; 85
    135a:	50 e0       	ldi	r21, 0x00	; 0
    135c:	6f ea       	ldi	r22, 0xAF	; 175
    135e:	71 e0       	ldi	r23, 0x01	; 1
    1360:	8f e2       	ldi	r24, 0x2F	; 47
    1362:	9b e0       	ldi	r25, 0x0B	; 11
    1364:	e8 de       	rcall	.-560    	; 0x1136 <xTaskGenericCreate>
    1366:	81 30       	cpi	r24, 0x01	; 1
    1368:	41 f4       	brne	.+16     	; 0x137a <vTaskStartScheduler+0x42>
    136a:	f8 94       	cli
    136c:	80 93 b6 07 	sts	0x07B6, r24	; 0x8007b6 <xSchedulerRunning>
    1370:	10 92 ba 07 	sts	0x07BA, r1	; 0x8007ba <xTickCount+0x1>
    1374:	10 92 b9 07 	sts	0x07B9, r1	; 0x8007b9 <xTickCount>
    1378:	bc dd       	rcall	.-1160   	; 0xef2 <xPortStartScheduler>
    137a:	0f 91       	pop	r16
    137c:	ff 90       	pop	r15
    137e:	ef 90       	pop	r14
    1380:	df 90       	pop	r13
    1382:	cf 90       	pop	r12
    1384:	bf 90       	pop	r11
    1386:	af 90       	pop	r10
    1388:	08 95       	ret

0000138a <vTaskSuspendAll>:
    138a:	80 91 b5 07 	lds	r24, 0x07B5	; 0x8007b5 <uxSchedulerSuspended>
    138e:	8f 5f       	subi	r24, 0xFF	; 255
    1390:	80 93 b5 07 	sts	0x07B5, r24	; 0x8007b5 <uxSchedulerSuspended>
    1394:	08 95       	ret

00001396 <vTaskIncrementTick>:
    1396:	0f 93       	push	r16
    1398:	1f 93       	push	r17
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
    139e:	80 91 b5 07 	lds	r24, 0x07B5	; 0x8007b5 <uxSchedulerSuspended>
    13a2:	81 11       	cpse	r24, r1
    13a4:	b2 c0       	rjmp	.+356    	; 0x150a <vTaskIncrementTick+0x174>
    13a6:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <xTickCount>
    13aa:	90 91 ba 07 	lds	r25, 0x07BA	; 0x8007ba <xTickCount+0x1>
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	90 93 ba 07 	sts	0x07BA, r25	; 0x8007ba <xTickCount+0x1>
    13b4:	80 93 b9 07 	sts	0x07B9, r24	; 0x8007b9 <xTickCount>
    13b8:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <xTickCount>
    13bc:	90 91 ba 07 	lds	r25, 0x07BA	; 0x8007ba <xTickCount+0x1>
    13c0:	89 2b       	or	r24, r25
    13c2:	99 f5       	brne	.+102    	; 0x142a <vTaskIncrementTick+0x94>
    13c4:	80 91 d1 07 	lds	r24, 0x07D1	; 0x8007d1 <pxDelayedTaskList>
    13c8:	90 91 d2 07 	lds	r25, 0x07D2	; 0x8007d2 <pxDelayedTaskList+0x1>
    13cc:	20 91 cf 07 	lds	r18, 0x07CF	; 0x8007cf <pxOverflowDelayedTaskList>
    13d0:	30 91 d0 07 	lds	r19, 0x07D0	; 0x8007d0 <pxOverflowDelayedTaskList+0x1>
    13d4:	30 93 d2 07 	sts	0x07D2, r19	; 0x8007d2 <pxDelayedTaskList+0x1>
    13d8:	20 93 d1 07 	sts	0x07D1, r18	; 0x8007d1 <pxDelayedTaskList>
    13dc:	90 93 d0 07 	sts	0x07D0, r25	; 0x8007d0 <pxOverflowDelayedTaskList+0x1>
    13e0:	80 93 cf 07 	sts	0x07CF, r24	; 0x8007cf <pxOverflowDelayedTaskList>
    13e4:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <xNumOfOverflows>
    13e8:	8f 5f       	subi	r24, 0xFF	; 255
    13ea:	80 93 b2 07 	sts	0x07B2, r24	; 0x8007b2 <xNumOfOverflows>
    13ee:	e0 91 d1 07 	lds	r30, 0x07D1	; 0x8007d1 <pxDelayedTaskList>
    13f2:	f0 91 d2 07 	lds	r31, 0x07D2	; 0x8007d2 <pxDelayedTaskList+0x1>
    13f6:	80 81       	ld	r24, Z
    13f8:	81 11       	cpse	r24, r1
    13fa:	07 c0       	rjmp	.+14     	; 0x140a <vTaskIncrementTick+0x74>
    13fc:	8f ef       	ldi	r24, 0xFF	; 255
    13fe:	9f ef       	ldi	r25, 0xFF	; 255
    1400:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <xNextTaskUnblockTime+0x1>
    1404:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <xNextTaskUnblockTime>
    1408:	10 c0       	rjmp	.+32     	; 0x142a <vTaskIncrementTick+0x94>
    140a:	e0 91 d1 07 	lds	r30, 0x07D1	; 0x8007d1 <pxDelayedTaskList>
    140e:	f0 91 d2 07 	lds	r31, 0x07D2	; 0x8007d2 <pxDelayedTaskList+0x1>
    1412:	05 80       	ldd	r0, Z+5	; 0x05
    1414:	f6 81       	ldd	r31, Z+6	; 0x06
    1416:	e0 2d       	mov	r30, r0
    1418:	06 80       	ldd	r0, Z+6	; 0x06
    141a:	f7 81       	ldd	r31, Z+7	; 0x07
    141c:	e0 2d       	mov	r30, r0
    141e:	82 81       	ldd	r24, Z+2	; 0x02
    1420:	93 81       	ldd	r25, Z+3	; 0x03
    1422:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <xNextTaskUnblockTime+0x1>
    1426:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <xNextTaskUnblockTime>
    142a:	20 91 b9 07 	lds	r18, 0x07B9	; 0x8007b9 <xTickCount>
    142e:	30 91 ba 07 	lds	r19, 0x07BA	; 0x8007ba <xTickCount+0x1>
    1432:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <xNextTaskUnblockTime>
    1436:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <xNextTaskUnblockTime+0x1>
    143a:	28 17       	cp	r18, r24
    143c:	39 07       	cpc	r19, r25
    143e:	08 f4       	brcc	.+2      	; 0x1442 <vTaskIncrementTick+0xac>
    1440:	69 c0       	rjmp	.+210    	; 0x1514 <vTaskIncrementTick+0x17e>
    1442:	e0 91 d1 07 	lds	r30, 0x07D1	; 0x8007d1 <pxDelayedTaskList>
    1446:	f0 91 d2 07 	lds	r31, 0x07D2	; 0x8007d2 <pxDelayedTaskList+0x1>
    144a:	80 81       	ld	r24, Z
    144c:	88 23       	and	r24, r24
    144e:	99 f0       	breq	.+38     	; 0x1476 <vTaskIncrementTick+0xe0>
    1450:	e0 91 d1 07 	lds	r30, 0x07D1	; 0x8007d1 <pxDelayedTaskList>
    1454:	f0 91 d2 07 	lds	r31, 0x07D2	; 0x8007d2 <pxDelayedTaskList+0x1>
    1458:	05 80       	ldd	r0, Z+5	; 0x05
    145a:	f6 81       	ldd	r31, Z+6	; 0x06
    145c:	e0 2d       	mov	r30, r0
    145e:	c6 81       	ldd	r28, Z+6	; 0x06
    1460:	d7 81       	ldd	r29, Z+7	; 0x07
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	9b 81       	ldd	r25, Y+3	; 0x03
    1466:	20 91 b9 07 	lds	r18, 0x07B9	; 0x8007b9 <xTickCount>
    146a:	30 91 ba 07 	lds	r19, 0x07BA	; 0x8007ba <xTickCount+0x1>
    146e:	28 17       	cp	r18, r24
    1470:	39 07       	cpc	r19, r25
    1472:	f8 f4       	brcc	.+62     	; 0x14b2 <vTaskIncrementTick+0x11c>
    1474:	19 c0       	rjmp	.+50     	; 0x14a8 <vTaskIncrementTick+0x112>
    1476:	8f ef       	ldi	r24, 0xFF	; 255
    1478:	9f ef       	ldi	r25, 0xFF	; 255
    147a:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <xNextTaskUnblockTime+0x1>
    147e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <xNextTaskUnblockTime>
    1482:	48 c0       	rjmp	.+144    	; 0x1514 <vTaskIncrementTick+0x17e>
    1484:	e0 91 d1 07 	lds	r30, 0x07D1	; 0x8007d1 <pxDelayedTaskList>
    1488:	f0 91 d2 07 	lds	r31, 0x07D2	; 0x8007d2 <pxDelayedTaskList+0x1>
    148c:	05 80       	ldd	r0, Z+5	; 0x05
    148e:	f6 81       	ldd	r31, Z+6	; 0x06
    1490:	e0 2d       	mov	r30, r0
    1492:	c6 81       	ldd	r28, Z+6	; 0x06
    1494:	d7 81       	ldd	r29, Z+7	; 0x07
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	9b 81       	ldd	r25, Y+3	; 0x03
    149a:	20 91 b9 07 	lds	r18, 0x07B9	; 0x8007b9 <xTickCount>
    149e:	30 91 ba 07 	lds	r19, 0x07BA	; 0x8007ba <xTickCount+0x1>
    14a2:	28 17       	cp	r18, r24
    14a4:	39 07       	cpc	r19, r25
    14a6:	28 f4       	brcc	.+10     	; 0x14b2 <vTaskIncrementTick+0x11c>
    14a8:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <xNextTaskUnblockTime+0x1>
    14ac:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <xNextTaskUnblockTime>
    14b0:	31 c0       	rjmp	.+98     	; 0x1514 <vTaskIncrementTick+0x17e>
    14b2:	8e 01       	movw	r16, r28
    14b4:	0e 5f       	subi	r16, 0xFE	; 254
    14b6:	1f 4f       	sbci	r17, 0xFF	; 255
    14b8:	c8 01       	movw	r24, r16
    14ba:	0e 94 07 01 	call	0x20e	; 0x20e <vListRemove>
    14be:	8c 89       	ldd	r24, Y+20	; 0x14
    14c0:	9d 89       	ldd	r25, Y+21	; 0x15
    14c2:	89 2b       	or	r24, r25
    14c4:	21 f0       	breq	.+8      	; 0x14ce <vTaskIncrementTick+0x138>
    14c6:	ce 01       	movw	r24, r28
    14c8:	0c 96       	adiw	r24, 0x0c	; 12
    14ca:	0e 94 07 01 	call	0x20e	; 0x20e <vListRemove>
    14ce:	8e 89       	ldd	r24, Y+22	; 0x16
    14d0:	90 91 b7 07 	lds	r25, 0x07B7	; 0x8007b7 <uxTopReadyPriority>
    14d4:	98 17       	cp	r25, r24
    14d6:	10 f4       	brcc	.+4      	; 0x14dc <vTaskIncrementTick+0x146>
    14d8:	80 93 b7 07 	sts	0x07B7, r24	; 0x8007b7 <uxTopReadyPriority>
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	9c 01       	movw	r18, r24
    14e0:	22 0f       	add	r18, r18
    14e2:	33 1f       	adc	r19, r19
    14e4:	22 0f       	add	r18, r18
    14e6:	33 1f       	adc	r19, r19
    14e8:	22 0f       	add	r18, r18
    14ea:	33 1f       	adc	r19, r19
    14ec:	82 0f       	add	r24, r18
    14ee:	93 1f       	adc	r25, r19
    14f0:	b8 01       	movw	r22, r16
    14f2:	8b 51       	subi	r24, 0x1B	; 27
    14f4:	98 4f       	sbci	r25, 0xF8	; 248
    14f6:	0e 94 a5 00 	call	0x14a	; 0x14a <vListInsertEnd>
    14fa:	e0 91 d1 07 	lds	r30, 0x07D1	; 0x8007d1 <pxDelayedTaskList>
    14fe:	f0 91 d2 07 	lds	r31, 0x07D2	; 0x8007d2 <pxDelayedTaskList+0x1>
    1502:	80 81       	ld	r24, Z
    1504:	81 11       	cpse	r24, r1
    1506:	be cf       	rjmp	.-132    	; 0x1484 <vTaskIncrementTick+0xee>
    1508:	b6 cf       	rjmp	.-148    	; 0x1476 <vTaskIncrementTick+0xe0>
    150a:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <uxMissedTicks>
    150e:	8f 5f       	subi	r24, 0xFF	; 255
    1510:	80 93 b4 07 	sts	0x07B4, r24	; 0x8007b4 <uxMissedTicks>
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	1f 91       	pop	r17
    151a:	0f 91       	pop	r16
    151c:	08 95       	ret

0000151e <xTaskResumeAll>:
    151e:	cf 92       	push	r12
    1520:	df 92       	push	r13
    1522:	ef 92       	push	r14
    1524:	ff 92       	push	r15
    1526:	0f 93       	push	r16
    1528:	1f 93       	push	r17
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	0f 92       	push	r0
    1534:	80 91 b5 07 	lds	r24, 0x07B5	; 0x8007b5 <uxSchedulerSuspended>
    1538:	81 50       	subi	r24, 0x01	; 1
    153a:	80 93 b5 07 	sts	0x07B5, r24	; 0x8007b5 <uxSchedulerSuspended>
    153e:	80 91 b5 07 	lds	r24, 0x07B5	; 0x8007b5 <uxSchedulerSuspended>
    1542:	81 11       	cpse	r24, r1
    1544:	62 c0       	rjmp	.+196    	; 0x160a <xTaskResumeAll+0xec>
    1546:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <uxCurrentNumberOfTasks>
    154a:	81 11       	cpse	r24, r1
    154c:	32 c0       	rjmp	.+100    	; 0x15b2 <xTaskResumeAll+0x94>
    154e:	60 c0       	rjmp	.+192    	; 0x1610 <xTaskResumeAll+0xf2>
    1550:	d7 01       	movw	r26, r14
    1552:	15 96       	adiw	r26, 0x05	; 5
    1554:	ed 91       	ld	r30, X+
    1556:	fc 91       	ld	r31, X
    1558:	16 97       	sbiw	r26, 0x06	; 6
    155a:	c6 81       	ldd	r28, Z+6	; 0x06
    155c:	d7 81       	ldd	r29, Z+7	; 0x07
    155e:	ce 01       	movw	r24, r28
    1560:	0c 96       	adiw	r24, 0x0c	; 12
    1562:	0e 94 07 01 	call	0x20e	; 0x20e <vListRemove>
    1566:	8e 01       	movw	r16, r28
    1568:	0e 5f       	subi	r16, 0xFE	; 254
    156a:	1f 4f       	sbci	r17, 0xFF	; 255
    156c:	c8 01       	movw	r24, r16
    156e:	0e 94 07 01 	call	0x20e	; 0x20e <vListRemove>
    1572:	8e 89       	ldd	r24, Y+22	; 0x16
    1574:	90 91 b7 07 	lds	r25, 0x07B7	; 0x8007b7 <uxTopReadyPriority>
    1578:	98 17       	cp	r25, r24
    157a:	10 f4       	brcc	.+4      	; 0x1580 <xTaskResumeAll+0x62>
    157c:	80 93 b7 07 	sts	0x07B7, r24	; 0x8007b7 <uxTopReadyPriority>
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	9c 01       	movw	r18, r24
    1584:	22 0f       	add	r18, r18
    1586:	33 1f       	adc	r19, r19
    1588:	22 0f       	add	r18, r18
    158a:	33 1f       	adc	r19, r19
    158c:	22 0f       	add	r18, r18
    158e:	33 1f       	adc	r19, r19
    1590:	82 0f       	add	r24, r18
    1592:	93 1f       	adc	r25, r19
    1594:	b8 01       	movw	r22, r16
    1596:	8b 51       	subi	r24, 0x1B	; 27
    1598:	98 4f       	sbci	r25, 0xF8	; 248
    159a:	0e 94 a5 00 	call	0x14a	; 0x14a <vListInsertEnd>
    159e:	e0 91 09 08 	lds	r30, 0x0809	; 0x800809 <pxCurrentTCB>
    15a2:	f0 91 0a 08 	lds	r31, 0x080A	; 0x80080a <pxCurrentTCB+0x1>
    15a6:	9e 89       	ldd	r25, Y+22	; 0x16
    15a8:	86 89       	ldd	r24, Z+22	; 0x16
    15aa:	98 17       	cp	r25, r24
    15ac:	58 f0       	brcs	.+22     	; 0x15c4 <xTaskResumeAll+0xa6>
    15ae:	dc 2c       	mov	r13, r12
    15b0:	09 c0       	rjmp	.+18     	; 0x15c4 <xTaskResumeAll+0xa6>
    15b2:	d1 2c       	mov	r13, r1
    15b4:	0f 2e       	mov	r0, r31
    15b6:	f6 ec       	ldi	r31, 0xC6	; 198
    15b8:	ef 2e       	mov	r14, r31
    15ba:	f7 e0       	ldi	r31, 0x07	; 7
    15bc:	ff 2e       	mov	r15, r31
    15be:	f0 2d       	mov	r31, r0
    15c0:	cc 24       	eor	r12, r12
    15c2:	c3 94       	inc	r12
    15c4:	f7 01       	movw	r30, r14
    15c6:	80 81       	ld	r24, Z
    15c8:	81 11       	cpse	r24, r1
    15ca:	c2 cf       	rjmp	.-124    	; 0x1550 <xTaskResumeAll+0x32>
    15cc:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <uxMissedTicks>
    15d0:	88 23       	and	r24, r24
    15d2:	79 f0       	breq	.+30     	; 0x15f2 <xTaskResumeAll+0xd4>
    15d4:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <uxMissedTicks>
    15d8:	88 23       	and	r24, r24
    15da:	91 f0       	breq	.+36     	; 0x1600 <xTaskResumeAll+0xe2>
    15dc:	dc de       	rcall	.-584    	; 0x1396 <vTaskIncrementTick>
    15de:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <uxMissedTicks>
    15e2:	81 50       	subi	r24, 0x01	; 1
    15e4:	80 93 b4 07 	sts	0x07B4, r24	; 0x8007b4 <uxMissedTicks>
    15e8:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <uxMissedTicks>
    15ec:	81 11       	cpse	r24, r1
    15ee:	f6 cf       	rjmp	.-20     	; 0x15dc <xTaskResumeAll+0xbe>
    15f0:	07 c0       	rjmp	.+14     	; 0x1600 <xTaskResumeAll+0xe2>
    15f2:	f1 e0       	ldi	r31, 0x01	; 1
    15f4:	df 16       	cp	r13, r31
    15f6:	21 f0       	breq	.+8      	; 0x1600 <xTaskResumeAll+0xe2>
    15f8:	80 91 b3 07 	lds	r24, 0x07B3	; 0x8007b3 <xMissedYield>
    15fc:	81 30       	cpi	r24, 0x01	; 1
    15fe:	39 f4       	brne	.+14     	; 0x160e <xTaskResumeAll+0xf0>
    1600:	10 92 b3 07 	sts	0x07B3, r1	; 0x8007b3 <xMissedYield>
    1604:	b0 dc       	rcall	.-1696   	; 0xf66 <vPortYield>
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	03 c0       	rjmp	.+6      	; 0x1610 <xTaskResumeAll+0xf2>
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	01 c0       	rjmp	.+2      	; 0x1610 <xTaskResumeAll+0xf2>
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	0f 90       	pop	r0
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	df 91       	pop	r29
    1616:	cf 91       	pop	r28
    1618:	1f 91       	pop	r17
    161a:	0f 91       	pop	r16
    161c:	ff 90       	pop	r15
    161e:	ef 90       	pop	r14
    1620:	df 90       	pop	r13
    1622:	cf 90       	pop	r12
    1624:	08 95       	ret

00001626 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    1626:	cf 93       	push	r28
    1628:	df 93       	push	r29
    162a:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    162c:	89 2b       	or	r24, r25
    162e:	99 f0       	breq	.+38     	; 0x1656 <vTaskDelay+0x30>
		{
			vTaskSuspendAll();
    1630:	ac de       	rcall	.-680    	; 0x138a <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1632:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <xTickCount>
    1636:	90 91 ba 07 	lds	r25, 0x07BA	; 0x8007ba <xTickCount+0x1>
    163a:	c8 0f       	add	r28, r24
    163c:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    163e:	80 91 09 08 	lds	r24, 0x0809	; 0x800809 <pxCurrentTCB>
    1642:	90 91 0a 08 	lds	r25, 0x080A	; 0x80080a <pxCurrentTCB+0x1>
    1646:	02 96       	adiw	r24, 0x02	; 2
    1648:	0e 94 07 01 	call	0x20e	; 0x20e <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    164c:	ce 01       	movw	r24, r28
			}
			xAlreadyYielded = xTaskResumeAll();
    164e:	3e dd       	rcall	.-1412   	; 0x10cc <prvAddCurrentTaskToDelayedList>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1650:	66 df       	rcall	.-308    	; 0x151e <xTaskResumeAll>
    1652:	81 11       	cpse	r24, r1
		{
			portYIELD_WITHIN_API();
    1654:	01 c0       	rjmp	.+2      	; 0x1658 <vTaskDelay+0x32>
    1656:	87 dc       	rcall	.-1778   	; 0xf66 <vPortYield>
		}
	}
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	08 95       	ret

0000165e <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    165e:	0f 2e       	mov	r0, r31
    1660:	fd eb       	ldi	r31, 0xBD	; 189
    1662:	ef 2e       	mov	r14, r31
    1664:	f7 e0       	ldi	r31, 0x07	; 7
    1666:	ff 2e       	mov	r15, r31
    1668:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    166a:	c5 ee       	ldi	r28, 0xE5	; 229
    166c:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    166e:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <uxTasksDeleted>
    1672:	88 23       	and	r24, r24
    1674:	41 f1       	breq	.+80     	; 0x16c6 <prvIdleTask+0x68>
		{
			vTaskSuspendAll();
    1676:	89 de       	rcall	.-750    	; 0x138a <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1678:	d7 01       	movw	r26, r14
			xTaskResumeAll();
    167a:	1c 91       	ld	r17, X
    167c:	50 df       	rcall	.-352    	; 0x151e <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    167e:	11 23       	and	r17, r17
    1680:	11 f1       	breq	.+68     	; 0x16c6 <prvIdleTask+0x68>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    1688:	d7 01       	movw	r26, r14
    168a:	15 96       	adiw	r26, 0x05	; 5
    168c:	ed 91       	ld	r30, X+
    168e:	fc 91       	ld	r31, X
    1690:	16 97       	sbiw	r26, 0x06	; 6
    1692:	06 81       	ldd	r16, Z+6	; 0x06
    1694:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
    1696:	c8 01       	movw	r24, r16
    1698:	02 96       	adiw	r24, 0x02	; 2
    169a:	0e 94 07 01 	call	0x20e	; 0x20e <vListRemove>
					--uxCurrentNumberOfTasks;
    169e:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <uxCurrentNumberOfTasks>
    16a2:	81 50       	subi	r24, 0x01	; 1
    16a4:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
    16a8:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <uxTasksDeleted>
    16ac:	81 50       	subi	r24, 0x01	; 1
    16ae:	80 93 bc 07 	sts	0x07BC, r24	; 0x8007bc <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
    16b2:	0f 90       	pop	r0
    16b4:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    16b6:	f8 01       	movw	r30, r16
    16b8:	87 89       	ldd	r24, Z+23	; 0x17
    16ba:	90 8d       	ldd	r25, Z+24	; 0x18
    16bc:	0e 94 92 00 	call	0x124	; 0x124 <vPortFree>
		vPortFree( pxTCB );
    16c0:	c8 01       	movw	r24, r16
    16c2:	0e 94 92 00 	call	0x124	; 0x124 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    16c6:	88 81       	ld	r24, Y
    16c8:	82 30       	cpi	r24, 0x02	; 2
			{
				taskYIELD();
    16ca:	88 f2       	brcs	.-94     	; 0x166e <prvIdleTask+0x10>
    16cc:	4c dc       	rcall	.-1896   	; 0xf66 <vPortYield>
    16ce:	cf cf       	rjmp	.-98     	; 0x166e <prvIdleTask+0x10>

000016d0 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    16d0:	80 91 b5 07 	lds	r24, 0x07B5	; 0x8007b5 <uxSchedulerSuspended>
    16d4:	81 11       	cpse	r24, r1
    16d6:	13 c0       	rjmp	.+38     	; 0x16fe <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    16d8:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <uxTopReadyPriority>
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	fc 01       	movw	r30, r24
    16e0:	ee 0f       	add	r30, r30
    16e2:	ff 1f       	adc	r31, r31
    16e4:	ee 0f       	add	r30, r30
    16e6:	ff 1f       	adc	r31, r31
    16e8:	ee 0f       	add	r30, r30
    16ea:	ff 1f       	adc	r31, r31
    16ec:	8e 0f       	add	r24, r30
    16ee:	9f 1f       	adc	r25, r31
    16f0:	fc 01       	movw	r30, r24
    16f2:	eb 51       	subi	r30, 0x1B	; 27
    16f4:	f8 4f       	sbci	r31, 0xF8	; 248
    16f6:	80 81       	ld	r24, Z
    16f8:	88 23       	and	r24, r24
    16fa:	29 f0       	breq	.+10     	; 0x1706 <vTaskSwitchContext+0x36>
    16fc:	1b c0       	rjmp	.+54     	; 0x1734 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	80 93 b3 07 	sts	0x07B3, r24	; 0x8007b3 <xMissedYield>
    1704:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    1706:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <uxTopReadyPriority>
    170a:	81 50       	subi	r24, 0x01	; 1
    170c:	80 93 b7 07 	sts	0x07B7, r24	; 0x8007b7 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1710:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <uxTopReadyPriority>
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	fc 01       	movw	r30, r24
    1718:	ee 0f       	add	r30, r30
    171a:	ff 1f       	adc	r31, r31
    171c:	ee 0f       	add	r30, r30
    171e:	ff 1f       	adc	r31, r31
    1720:	ee 0f       	add	r30, r30
    1722:	ff 1f       	adc	r31, r31
    1724:	8e 0f       	add	r24, r30
    1726:	9f 1f       	adc	r25, r31
    1728:	fc 01       	movw	r30, r24
    172a:	eb 51       	subi	r30, 0x1B	; 27
    172c:	f8 4f       	sbci	r31, 0xF8	; 248
    172e:	80 81       	ld	r24, Z
    1730:	88 23       	and	r24, r24
    1732:	49 f3       	breq	.-46     	; 0x1706 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    1734:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <uxTopReadyPriority>
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	9c 01       	movw	r18, r24
    173c:	22 0f       	add	r18, r18
    173e:	33 1f       	adc	r19, r19
    1740:	22 0f       	add	r18, r18
    1742:	33 1f       	adc	r19, r19
    1744:	22 0f       	add	r18, r18
    1746:	33 1f       	adc	r19, r19
    1748:	28 0f       	add	r18, r24
    174a:	39 1f       	adc	r19, r25
    174c:	d9 01       	movw	r26, r18
    174e:	ab 51       	subi	r26, 0x1B	; 27
    1750:	b8 4f       	sbci	r27, 0xF8	; 248
    1752:	11 96       	adiw	r26, 0x01	; 1
    1754:	ed 91       	ld	r30, X+
    1756:	fc 91       	ld	r31, X
    1758:	12 97       	sbiw	r26, 0x02	; 2
    175a:	02 80       	ldd	r0, Z+2	; 0x02
    175c:	f3 81       	ldd	r31, Z+3	; 0x03
    175e:	e0 2d       	mov	r30, r0
    1760:	12 96       	adiw	r26, 0x02	; 2
    1762:	fc 93       	st	X, r31
    1764:	ee 93       	st	-X, r30
    1766:	11 97       	sbiw	r26, 0x01	; 1
    1768:	28 51       	subi	r18, 0x18	; 24
    176a:	38 4f       	sbci	r19, 0xF8	; 248
    176c:	e2 17       	cp	r30, r18
    176e:	f3 07       	cpc	r31, r19
    1770:	29 f4       	brne	.+10     	; 0x177c <vTaskSwitchContext+0xac>
    1772:	22 81       	ldd	r18, Z+2	; 0x02
    1774:	33 81       	ldd	r19, Z+3	; 0x03
    1776:	fd 01       	movw	r30, r26
    1778:	32 83       	std	Z+2, r19	; 0x02
    177a:	21 83       	std	Z+1, r18	; 0x01
    177c:	fc 01       	movw	r30, r24
    177e:	ee 0f       	add	r30, r30
    1780:	ff 1f       	adc	r31, r31
    1782:	ee 0f       	add	r30, r30
    1784:	ff 1f       	adc	r31, r31
    1786:	ee 0f       	add	r30, r30
    1788:	ff 1f       	adc	r31, r31
    178a:	8e 0f       	add	r24, r30
    178c:	9f 1f       	adc	r25, r31
    178e:	fc 01       	movw	r30, r24
    1790:	eb 51       	subi	r30, 0x1B	; 27
    1792:	f8 4f       	sbci	r31, 0xF8	; 248
    1794:	01 80       	ldd	r0, Z+1	; 0x01
    1796:	f2 81       	ldd	r31, Z+2	; 0x02
    1798:	e0 2d       	mov	r30, r0
    179a:	86 81       	ldd	r24, Z+6	; 0x06
    179c:	97 81       	ldd	r25, Z+7	; 0x07
    179e:	90 93 0a 08 	sts	0x080A, r25	; 0x80080a <pxCurrentTCB+0x1>
    17a2:	80 93 09 08 	sts	0x0809, r24	; 0x800809 <pxCurrentTCB>
    17a6:	08 95       	ret

000017a8 <__divmodhi4>:
    17a8:	97 fb       	bst	r25, 7
    17aa:	07 2e       	mov	r0, r23
    17ac:	16 f4       	brtc	.+4      	; 0x17b2 <__divmodhi4+0xa>
    17ae:	00 94       	com	r0
    17b0:	06 d0       	rcall	.+12     	; 0x17be <__divmodhi4_neg1>
    17b2:	77 fd       	sbrc	r23, 7
    17b4:	08 d0       	rcall	.+16     	; 0x17c6 <__divmodhi4_neg2>
    17b6:	14 d0       	rcall	.+40     	; 0x17e0 <__udivmodhi4>
    17b8:	07 fc       	sbrc	r0, 7
    17ba:	05 d0       	rcall	.+10     	; 0x17c6 <__divmodhi4_neg2>
    17bc:	3e f4       	brtc	.+14     	; 0x17cc <__divmodhi4_exit>

000017be <__divmodhi4_neg1>:
    17be:	90 95       	com	r25
    17c0:	81 95       	neg	r24
    17c2:	9f 4f       	sbci	r25, 0xFF	; 255
    17c4:	08 95       	ret

000017c6 <__divmodhi4_neg2>:
    17c6:	70 95       	com	r23
    17c8:	61 95       	neg	r22
    17ca:	7f 4f       	sbci	r23, 0xFF	; 255

000017cc <__divmodhi4_exit>:
    17cc:	08 95       	ret

000017ce <__tablejump2__>:
    17ce:	ee 0f       	add	r30, r30
    17d0:	ff 1f       	adc	r31, r31
    17d2:	00 24       	eor	r0, r0
    17d4:	00 1c       	adc	r0, r0
    17d6:	0b be       	out	0x3b, r0	; 59
    17d8:	07 90       	elpm	r0, Z+
    17da:	f6 91       	elpm	r31, Z
    17dc:	e0 2d       	mov	r30, r0
    17de:	09 94       	ijmp

000017e0 <__udivmodhi4>:
    17e0:	aa 1b       	sub	r26, r26
    17e2:	bb 1b       	sub	r27, r27
    17e4:	51 e1       	ldi	r21, 0x11	; 17
    17e6:	07 c0       	rjmp	.+14     	; 0x17f6 <__udivmodhi4_ep>

000017e8 <__udivmodhi4_loop>:
    17e8:	aa 1f       	adc	r26, r26
    17ea:	bb 1f       	adc	r27, r27
    17ec:	a6 17       	cp	r26, r22
    17ee:	b7 07       	cpc	r27, r23
    17f0:	10 f0       	brcs	.+4      	; 0x17f6 <__udivmodhi4_ep>
    17f2:	a6 1b       	sub	r26, r22
    17f4:	b7 0b       	sbc	r27, r23

000017f6 <__udivmodhi4_ep>:
    17f6:	88 1f       	adc	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	5a 95       	dec	r21
    17fc:	a9 f7       	brne	.-22     	; 0x17e8 <__udivmodhi4_loop>
    17fe:	80 95       	com	r24
    1800:	90 95       	com	r25
    1802:	bc 01       	movw	r22, r24
    1804:	cd 01       	movw	r24, r26
    1806:	08 95       	ret

00001808 <do_rand>:
    1808:	8f 92       	push	r8
    180a:	9f 92       	push	r9
    180c:	af 92       	push	r10
    180e:	bf 92       	push	r11
    1810:	cf 92       	push	r12
    1812:	df 92       	push	r13
    1814:	ef 92       	push	r14
    1816:	ff 92       	push	r15
    1818:	cf 93       	push	r28
    181a:	df 93       	push	r29
    181c:	ec 01       	movw	r28, r24
    181e:	68 81       	ld	r22, Y
    1820:	79 81       	ldd	r23, Y+1	; 0x01
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	9b 81       	ldd	r25, Y+3	; 0x03
    1826:	61 15       	cp	r22, r1
    1828:	71 05       	cpc	r23, r1
    182a:	81 05       	cpc	r24, r1
    182c:	91 05       	cpc	r25, r1
    182e:	21 f4       	brne	.+8      	; 0x1838 <do_rand+0x30>
    1830:	64 e2       	ldi	r22, 0x24	; 36
    1832:	79 ed       	ldi	r23, 0xD9	; 217
    1834:	8b e5       	ldi	r24, 0x5B	; 91
    1836:	97 e0       	ldi	r25, 0x07	; 7
    1838:	2d e1       	ldi	r18, 0x1D	; 29
    183a:	33 ef       	ldi	r19, 0xF3	; 243
    183c:	41 e0       	ldi	r20, 0x01	; 1
    183e:	50 e0       	ldi	r21, 0x00	; 0
    1840:	4e d0       	rcall	.+156    	; 0x18de <__divmodsi4>
    1842:	49 01       	movw	r8, r18
    1844:	5a 01       	movw	r10, r20
    1846:	9b 01       	movw	r18, r22
    1848:	ac 01       	movw	r20, r24
    184a:	a7 ea       	ldi	r26, 0xA7	; 167
    184c:	b1 e4       	ldi	r27, 0x41	; 65
    184e:	63 d0       	rcall	.+198    	; 0x1916 <__muluhisi3>
    1850:	6b 01       	movw	r12, r22
    1852:	7c 01       	movw	r14, r24
    1854:	ac ee       	ldi	r26, 0xEC	; 236
    1856:	b4 ef       	ldi	r27, 0xF4	; 244
    1858:	a5 01       	movw	r20, r10
    185a:	94 01       	movw	r18, r8
    185c:	68 d0       	rcall	.+208    	; 0x192e <__mulohisi3>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	8c 0d       	add	r24, r12
    1864:	9d 1d       	adc	r25, r13
    1866:	ae 1d       	adc	r26, r14
    1868:	bf 1d       	adc	r27, r15
    186a:	b7 ff       	sbrs	r27, 7
    186c:	03 c0       	rjmp	.+6      	; 0x1874 <do_rand+0x6c>
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	a1 09       	sbc	r26, r1
    1872:	b0 48       	sbci	r27, 0x80	; 128
    1874:	88 83       	st	Y, r24
    1876:	99 83       	std	Y+1, r25	; 0x01
    1878:	aa 83       	std	Y+2, r26	; 0x02
    187a:	bb 83       	std	Y+3, r27	; 0x03
    187c:	9f 77       	andi	r25, 0x7F	; 127
    187e:	df 91       	pop	r29
    1880:	cf 91       	pop	r28
    1882:	ff 90       	pop	r15
    1884:	ef 90       	pop	r14
    1886:	df 90       	pop	r13
    1888:	cf 90       	pop	r12
    188a:	bf 90       	pop	r11
    188c:	af 90       	pop	r10
    188e:	9f 90       	pop	r9
    1890:	8f 90       	pop	r8
    1892:	08 95       	ret

00001894 <rand_r>:
    1894:	b9 cf       	rjmp	.-142    	; 0x1808 <do_rand>

00001896 <rand>:
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	91 e0       	ldi	r25, 0x01	; 1
    189a:	b6 cf       	rjmp	.-148    	; 0x1808 <do_rand>

0000189c <srand>:
    189c:	a0 e0       	ldi	r26, 0x00	; 0
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    18a4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    18a8:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    18ac:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    18b0:	08 95       	ret

000018b2 <memset>:
    18b2:	dc 01       	movw	r26, r24
    18b4:	01 c0       	rjmp	.+2      	; 0x18b8 <memset+0x6>
    18b6:	6d 93       	st	X+, r22
    18b8:	41 50       	subi	r20, 0x01	; 1
    18ba:	50 40       	sbci	r21, 0x00	; 0
    18bc:	e0 f7       	brcc	.-8      	; 0x18b6 <memset+0x4>
    18be:	08 95       	ret

000018c0 <strncpy>:
    18c0:	fb 01       	movw	r30, r22
    18c2:	dc 01       	movw	r26, r24
    18c4:	41 50       	subi	r20, 0x01	; 1
    18c6:	50 40       	sbci	r21, 0x00	; 0
    18c8:	48 f0       	brcs	.+18     	; 0x18dc <strncpy+0x1c>
    18ca:	01 90       	ld	r0, Z+
    18cc:	0d 92       	st	X+, r0
    18ce:	00 20       	and	r0, r0
    18d0:	c9 f7       	brne	.-14     	; 0x18c4 <strncpy+0x4>
    18d2:	01 c0       	rjmp	.+2      	; 0x18d6 <strncpy+0x16>
    18d4:	1d 92       	st	X+, r1
    18d6:	41 50       	subi	r20, 0x01	; 1
    18d8:	50 40       	sbci	r21, 0x00	; 0
    18da:	e0 f7       	brcc	.-8      	; 0x18d4 <strncpy+0x14>
    18dc:	08 95       	ret

000018de <__divmodsi4>:
    18de:	05 2e       	mov	r0, r21
    18e0:	97 fb       	bst	r25, 7
    18e2:	16 f4       	brtc	.+4      	; 0x18e8 <__divmodsi4+0xa>
    18e4:	00 94       	com	r0
    18e6:	0f d0       	rcall	.+30     	; 0x1906 <__negsi2>
    18e8:	57 fd       	sbrc	r21, 7
    18ea:	05 d0       	rcall	.+10     	; 0x18f6 <__divmodsi4_neg2>
    18ec:	24 d0       	rcall	.+72     	; 0x1936 <__udivmodsi4>
    18ee:	07 fc       	sbrc	r0, 7
    18f0:	02 d0       	rcall	.+4      	; 0x18f6 <__divmodsi4_neg2>
    18f2:	46 f4       	brtc	.+16     	; 0x1904 <__divmodsi4_exit>
    18f4:	08 c0       	rjmp	.+16     	; 0x1906 <__negsi2>

000018f6 <__divmodsi4_neg2>:
    18f6:	50 95       	com	r21
    18f8:	40 95       	com	r20
    18fa:	30 95       	com	r19
    18fc:	21 95       	neg	r18
    18fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1900:	4f 4f       	sbci	r20, 0xFF	; 255
    1902:	5f 4f       	sbci	r21, 0xFF	; 255

00001904 <__divmodsi4_exit>:
    1904:	08 95       	ret

00001906 <__negsi2>:
    1906:	90 95       	com	r25
    1908:	80 95       	com	r24
    190a:	70 95       	com	r23
    190c:	61 95       	neg	r22
    190e:	7f 4f       	sbci	r23, 0xFF	; 255
    1910:	8f 4f       	sbci	r24, 0xFF	; 255
    1912:	9f 4f       	sbci	r25, 0xFF	; 255
    1914:	08 95       	ret

00001916 <__muluhisi3>:
    1916:	31 d0       	rcall	.+98     	; 0x197a <__umulhisi3>
    1918:	a5 9f       	mul	r26, r21
    191a:	90 0d       	add	r25, r0
    191c:	b4 9f       	mul	r27, r20
    191e:	90 0d       	add	r25, r0
    1920:	a4 9f       	mul	r26, r20
    1922:	80 0d       	add	r24, r0
    1924:	91 1d       	adc	r25, r1
    1926:	11 24       	eor	r1, r1
    1928:	08 95       	ret

0000192a <__mulshisi3>:
    192a:	b7 ff       	sbrs	r27, 7
    192c:	f4 cf       	rjmp	.-24     	; 0x1916 <__muluhisi3>

0000192e <__mulohisi3>:
    192e:	f3 df       	rcall	.-26     	; 0x1916 <__muluhisi3>
    1930:	82 1b       	sub	r24, r18
    1932:	93 0b       	sbc	r25, r19
    1934:	08 95       	ret

00001936 <__udivmodsi4>:
    1936:	a1 e2       	ldi	r26, 0x21	; 33
    1938:	1a 2e       	mov	r1, r26
    193a:	aa 1b       	sub	r26, r26
    193c:	bb 1b       	sub	r27, r27
    193e:	fd 01       	movw	r30, r26
    1940:	0d c0       	rjmp	.+26     	; 0x195c <__udivmodsi4_ep>

00001942 <__udivmodsi4_loop>:
    1942:	aa 1f       	adc	r26, r26
    1944:	bb 1f       	adc	r27, r27
    1946:	ee 1f       	adc	r30, r30
    1948:	ff 1f       	adc	r31, r31
    194a:	a2 17       	cp	r26, r18
    194c:	b3 07       	cpc	r27, r19
    194e:	e4 07       	cpc	r30, r20
    1950:	f5 07       	cpc	r31, r21
    1952:	20 f0       	brcs	.+8      	; 0x195c <__udivmodsi4_ep>
    1954:	a2 1b       	sub	r26, r18
    1956:	b3 0b       	sbc	r27, r19
    1958:	e4 0b       	sbc	r30, r20
    195a:	f5 0b       	sbc	r31, r21

0000195c <__udivmodsi4_ep>:
    195c:	66 1f       	adc	r22, r22
    195e:	77 1f       	adc	r23, r23
    1960:	88 1f       	adc	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	1a 94       	dec	r1
    1966:	69 f7       	brne	.-38     	; 0x1942 <__udivmodsi4_loop>
    1968:	60 95       	com	r22
    196a:	70 95       	com	r23
    196c:	80 95       	com	r24
    196e:	90 95       	com	r25
    1970:	9b 01       	movw	r18, r22
    1972:	ac 01       	movw	r20, r24
    1974:	bd 01       	movw	r22, r26
    1976:	cf 01       	movw	r24, r30
    1978:	08 95       	ret

0000197a <__umulhisi3>:
    197a:	a2 9f       	mul	r26, r18
    197c:	b0 01       	movw	r22, r0
    197e:	b3 9f       	mul	r27, r19
    1980:	c0 01       	movw	r24, r0
    1982:	a3 9f       	mul	r26, r19
    1984:	70 0d       	add	r23, r0
    1986:	81 1d       	adc	r24, r1
    1988:	11 24       	eor	r1, r1
    198a:	91 1d       	adc	r25, r1
    198c:	b2 9f       	mul	r27, r18
    198e:	70 0d       	add	r23, r0
    1990:	81 1d       	adc	r24, r1
    1992:	11 24       	eor	r1, r1
    1994:	91 1d       	adc	r25, r1
    1996:	08 95       	ret

00001998 <_exit>:
    1998:	f8 94       	cli

0000199a <__stop_program>:
    199a:	ff cf       	rjmp	.-2      	; 0x199a <__stop_program>
